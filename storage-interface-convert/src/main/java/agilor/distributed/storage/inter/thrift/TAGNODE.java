package agilor.distributed.storage.inter.thrift; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-28")
public class TAGNODE implements org.apache.thrift.TBase<TAGNODE, TAGNODE._Fields>, java.io.Serializable, Cloneable, Comparable<TAGNODE> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAGNODE");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENG_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("engUnit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField IOSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("IOState", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField TYPICAL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("typicalVal", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ENUM_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("enumDesc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SOURCE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceTag", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("upperLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField LOWER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerLimit", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField PUSHREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("pushreference", org.apache.thrift.protocol.TType.I16, (short)17);
  private static final org.apache.thrift.protocol.TField RULE_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleReference", org.apache.thrift.protocol.TType.I16, (short)18);
  private static final org.apache.thrift.protocol.TField EXCEPTION_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionMin", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField EXCEPTION_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionMax", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField EXCEPTION_DEV_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionDev", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField ALARM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmType", org.apache.thrift.protocol.TType.I16, (short)22);
  private static final org.apache.thrift.protocol.TField ALARM_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmState", org.apache.thrift.protocol.TType.I16, (short)23);
  private static final org.apache.thrift.protocol.TField ALARM_HI_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmHi", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField ALARM_LO_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmLo", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField ALARM_HI_HI_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmHiHi", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField ALARM_LOLO_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmLolo", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField HI_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("hiPriority", org.apache.thrift.protocol.TType.I16, (short)28);
  private static final org.apache.thrift.protocol.TField LO_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("loPriority", org.apache.thrift.protocol.TType.I16, (short)29);
  private static final org.apache.thrift.protocol.TField HIHI_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("hihiPriority", org.apache.thrift.protocol.TType.I16, (short)30);
  private static final org.apache.thrift.protocol.TField LOLO_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("loloPriority", org.apache.thrift.protocol.TType.I16, (short)31);
  private static final org.apache.thrift.protocol.TField IS_ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("isArchived", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField IS_COMPRESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isCompressed", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField INTER_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("interMethod", org.apache.thrift.protocol.TType.BYTE, (short)34);
  private static final org.apache.thrift.protocol.TField HIS_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("hisIndex", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField COMPRESS_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("compressMin", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField COMPRESS_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("compressMax", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField LAST_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastValue", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField CREATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("creationDate", org.apache.thrift.protocol.TType.I32, (short)39);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAGNODEStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAGNODETupleSchemeFactory());
  }

  public String name; // required
  public String desc; // required
  public String engUnit; // required
  public int id; // required
  public byte type; // required
  public byte IOState; // required
  public double typicalVal; // required
  public String value; // required
  public String enumDesc; // required
  public int timestamp; // required
  public int state; // required
  public String deviceName; // required
  public String groupName; // required
  public String sourceTag; // required
  public double upperLimit; // required
  public double lowerLimit; // required
  public short pushreference; // required
  public short ruleReference; // required
  public int exceptionMin; // required
  public int exceptionMax; // required
  public double exceptionDev; // required
  public short alarmType; // required
  public short alarmState; // required
  public double alarmHi; // required
  public double alarmLo; // required
  public double alarmHiHi; // required
  public double alarmLolo; // required
  public short hiPriority; // required
  public short loPriority; // required
  public short hihiPriority; // required
  public short loloPriority; // required
  public boolean isArchived; // required
  public boolean isCompressed; // required
  public byte interMethod; // required
  public int hisIndex; // required
  public int compressMin; // required
  public int compressMax; // required
  public double lastValue; // required
  public int creationDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DESC((short)2, "desc"),
    ENG_UNIT((short)3, "engUnit"),
    ID((short)4, "id"),
    TYPE((short)5, "type"),
    IOSTATE((short)6, "IOState"),
    TYPICAL_VAL((short)7, "typicalVal"),
    VALUE((short)8, "value"),
    ENUM_DESC((short)9, "enumDesc"),
    TIMESTAMP((short)10, "timestamp"),
    STATE((short)11, "state"),
    DEVICE_NAME((short)12, "deviceName"),
    GROUP_NAME((short)13, "groupName"),
    SOURCE_TAG((short)14, "sourceTag"),
    UPPER_LIMIT((short)15, "upperLimit"),
    LOWER_LIMIT((short)16, "lowerLimit"),
    PUSHREFERENCE((short)17, "pushreference"),
    RULE_REFERENCE((short)18, "ruleReference"),
    EXCEPTION_MIN((short)19, "exceptionMin"),
    EXCEPTION_MAX((short)20, "exceptionMax"),
    EXCEPTION_DEV((short)21, "exceptionDev"),
    ALARM_TYPE((short)22, "alarmType"),
    ALARM_STATE((short)23, "alarmState"),
    ALARM_HI((short)24, "alarmHi"),
    ALARM_LO((short)25, "alarmLo"),
    ALARM_HI_HI((short)26, "alarmHiHi"),
    ALARM_LOLO((short)27, "alarmLolo"),
    HI_PRIORITY((short)28, "hiPriority"),
    LO_PRIORITY((short)29, "loPriority"),
    HIHI_PRIORITY((short)30, "hihiPriority"),
    LOLO_PRIORITY((short)31, "loloPriority"),
    IS_ARCHIVED((short)32, "isArchived"),
    IS_COMPRESSED((short)33, "isCompressed"),
    INTER_METHOD((short)34, "interMethod"),
    HIS_INDEX((short)35, "hisIndex"),
    COMPRESS_MIN((short)36, "compressMin"),
    COMPRESS_MAX((short)37, "compressMax"),
    LAST_VALUE((short)38, "lastValue"),
    CREATION_DATE((short)39, "creationDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DESC
          return DESC;
        case 3: // ENG_UNIT
          return ENG_UNIT;
        case 4: // ID
          return ID;
        case 5: // TYPE
          return TYPE;
        case 6: // IOSTATE
          return IOSTATE;
        case 7: // TYPICAL_VAL
          return TYPICAL_VAL;
        case 8: // VALUE
          return VALUE;
        case 9: // ENUM_DESC
          return ENUM_DESC;
        case 10: // TIMESTAMP
          return TIMESTAMP;
        case 11: // STATE
          return STATE;
        case 12: // DEVICE_NAME
          return DEVICE_NAME;
        case 13: // GROUP_NAME
          return GROUP_NAME;
        case 14: // SOURCE_TAG
          return SOURCE_TAG;
        case 15: // UPPER_LIMIT
          return UPPER_LIMIT;
        case 16: // LOWER_LIMIT
          return LOWER_LIMIT;
        case 17: // PUSHREFERENCE
          return PUSHREFERENCE;
        case 18: // RULE_REFERENCE
          return RULE_REFERENCE;
        case 19: // EXCEPTION_MIN
          return EXCEPTION_MIN;
        case 20: // EXCEPTION_MAX
          return EXCEPTION_MAX;
        case 21: // EXCEPTION_DEV
          return EXCEPTION_DEV;
        case 22: // ALARM_TYPE
          return ALARM_TYPE;
        case 23: // ALARM_STATE
          return ALARM_STATE;
        case 24: // ALARM_HI
          return ALARM_HI;
        case 25: // ALARM_LO
          return ALARM_LO;
        case 26: // ALARM_HI_HI
          return ALARM_HI_HI;
        case 27: // ALARM_LOLO
          return ALARM_LOLO;
        case 28: // HI_PRIORITY
          return HI_PRIORITY;
        case 29: // LO_PRIORITY
          return LO_PRIORITY;
        case 30: // HIHI_PRIORITY
          return HIHI_PRIORITY;
        case 31: // LOLO_PRIORITY
          return LOLO_PRIORITY;
        case 32: // IS_ARCHIVED
          return IS_ARCHIVED;
        case 33: // IS_COMPRESSED
          return IS_COMPRESSED;
        case 34: // INTER_METHOD
          return INTER_METHOD;
        case 35: // HIS_INDEX
          return HIS_INDEX;
        case 36: // COMPRESS_MIN
          return COMPRESS_MIN;
        case 37: // COMPRESS_MAX
          return COMPRESS_MAX;
        case 38: // LAST_VALUE
          return LAST_VALUE;
        case 39: // CREATION_DATE
          return CREATION_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __IOSTATE_ISSET_ID = 2;
  private static final int __TYPICALVAL_ISSET_ID = 3;
  private static final int __TIMESTAMP_ISSET_ID = 4;
  private static final int __STATE_ISSET_ID = 5;
  private static final int __UPPERLIMIT_ISSET_ID = 6;
  private static final int __LOWERLIMIT_ISSET_ID = 7;
  private static final int __PUSHREFERENCE_ISSET_ID = 8;
  private static final int __RULEREFERENCE_ISSET_ID = 9;
  private static final int __EXCEPTIONMIN_ISSET_ID = 10;
  private static final int __EXCEPTIONMAX_ISSET_ID = 11;
  private static final int __EXCEPTIONDEV_ISSET_ID = 12;
  private static final int __ALARMTYPE_ISSET_ID = 13;
  private static final int __ALARMSTATE_ISSET_ID = 14;
  private static final int __ALARMHI_ISSET_ID = 15;
  private static final int __ALARMLO_ISSET_ID = 16;
  private static final int __ALARMHIHI_ISSET_ID = 17;
  private static final int __ALARMLOLO_ISSET_ID = 18;
  private static final int __HIPRIORITY_ISSET_ID = 19;
  private static final int __LOPRIORITY_ISSET_ID = 20;
  private static final int __HIHIPRIORITY_ISSET_ID = 21;
  private static final int __LOLOPRIORITY_ISSET_ID = 22;
  private static final int __ISARCHIVED_ISSET_ID = 23;
  private static final int __ISCOMPRESSED_ISSET_ID = 24;
  private static final int __INTERMETHOD_ISSET_ID = 25;
  private static final int __HISINDEX_ISSET_ID = 26;
  private static final int __COMPRESSMIN_ISSET_ID = 27;
  private static final int __COMPRESSMAX_ISSET_ID = 28;
  private static final int __LASTVALUE_ISSET_ID = 29;
  private static final int __CREATIONDATE_ISSET_ID = 30;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENG_UNIT, new org.apache.thrift.meta_data.FieldMetaData("engUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IOSTATE, new org.apache.thrift.meta_data.FieldMetaData("IOState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TYPICAL_VAL, new org.apache.thrift.meta_data.FieldMetaData("typicalVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENUM_DESC, new org.apache.thrift.meta_data.FieldMetaData("enumDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_TAG, new org.apache.thrift.meta_data.FieldMetaData("sourceTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("upperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOWER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("lowerLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PUSHREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("pushreference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RULE_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("ruleReference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EXCEPTION_MIN, new org.apache.thrift.meta_data.FieldMetaData("exceptionMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCEPTION_MAX, new org.apache.thrift.meta_data.FieldMetaData("exceptionMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCEPTION_DEV, new org.apache.thrift.meta_data.FieldMetaData("exceptionDev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALARM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alarmType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ALARM_STATE, new org.apache.thrift.meta_data.FieldMetaData("alarmState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ALARM_HI, new org.apache.thrift.meta_data.FieldMetaData("alarmHi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALARM_LO, new org.apache.thrift.meta_data.FieldMetaData("alarmLo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALARM_HI_HI, new org.apache.thrift.meta_data.FieldMetaData("alarmHiHi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALARM_LOLO, new org.apache.thrift.meta_data.FieldMetaData("alarmLolo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HI_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("hiPriority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LO_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("loPriority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HIHI_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("hihiPriority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LOLO_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("loloPriority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.IS_ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("isArchived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_COMPRESSED, new org.apache.thrift.meta_data.FieldMetaData("isCompressed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INTER_METHOD, new org.apache.thrift.meta_data.FieldMetaData("interMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HIS_INDEX, new org.apache.thrift.meta_data.FieldMetaData("hisIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPRESS_MIN, new org.apache.thrift.meta_data.FieldMetaData("compressMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPRESS_MAX, new org.apache.thrift.meta_data.FieldMetaData("compressMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_VALUE, new org.apache.thrift.meta_data.FieldMetaData("lastValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("creationDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAGNODE.class, metaDataMap);
  }

  public TAGNODE() {
  }

  public TAGNODE(
    String name,
    String desc,
    String engUnit,
    int id,
    byte type,
    byte IOState,
    double typicalVal,
    String value,
    String enumDesc,
    int timestamp,
    int state,
    String deviceName,
    String groupName,
    String sourceTag,
    double upperLimit,
    double lowerLimit,
    short pushreference,
    short ruleReference,
    int exceptionMin,
    int exceptionMax,
    double exceptionDev,
    short alarmType,
    short alarmState,
    double alarmHi,
    double alarmLo,
    double alarmHiHi,
    double alarmLolo,
    short hiPriority,
    short loPriority,
    short hihiPriority,
    short loloPriority,
    boolean isArchived,
    boolean isCompressed,
    byte interMethod,
    int hisIndex,
    int compressMin,
    int compressMax,
    double lastValue,
    int creationDate)
  {
    this();
    this.name = name;
    this.desc = desc;
    this.engUnit = engUnit;
    this.id = id;
    setIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.IOState = IOState;
    setIOStateIsSet(true);
    this.typicalVal = typicalVal;
    setTypicalValIsSet(true);
    this.value = value;
    this.enumDesc = enumDesc;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.deviceName = deviceName;
    this.groupName = groupName;
    this.sourceTag = sourceTag;
    this.upperLimit = upperLimit;
    setUpperLimitIsSet(true);
    this.lowerLimit = lowerLimit;
    setLowerLimitIsSet(true);
    this.pushreference = pushreference;
    setPushreferenceIsSet(true);
    this.ruleReference = ruleReference;
    setRuleReferenceIsSet(true);
    this.exceptionMin = exceptionMin;
    setExceptionMinIsSet(true);
    this.exceptionMax = exceptionMax;
    setExceptionMaxIsSet(true);
    this.exceptionDev = exceptionDev;
    setExceptionDevIsSet(true);
    this.alarmType = alarmType;
    setAlarmTypeIsSet(true);
    this.alarmState = alarmState;
    setAlarmStateIsSet(true);
    this.alarmHi = alarmHi;
    setAlarmHiIsSet(true);
    this.alarmLo = alarmLo;
    setAlarmLoIsSet(true);
    this.alarmHiHi = alarmHiHi;
    setAlarmHiHiIsSet(true);
    this.alarmLolo = alarmLolo;
    setAlarmLoloIsSet(true);
    this.hiPriority = hiPriority;
    setHiPriorityIsSet(true);
    this.loPriority = loPriority;
    setLoPriorityIsSet(true);
    this.hihiPriority = hihiPriority;
    setHihiPriorityIsSet(true);
    this.loloPriority = loloPriority;
    setLoloPriorityIsSet(true);
    this.isArchived = isArchived;
    setIsArchivedIsSet(true);
    this.isCompressed = isCompressed;
    setIsCompressedIsSet(true);
    this.interMethod = interMethod;
    setInterMethodIsSet(true);
    this.hisIndex = hisIndex;
    setHisIndexIsSet(true);
    this.compressMin = compressMin;
    setCompressMinIsSet(true);
    this.compressMax = compressMax;
    setCompressMaxIsSet(true);
    this.lastValue = lastValue;
    setLastValueIsSet(true);
    this.creationDate = creationDate;
    setCreationDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAGNODE(TAGNODE other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetEngUnit()) {
      this.engUnit = other.engUnit;
    }
    this.id = other.id;
    this.type = other.type;
    this.IOState = other.IOState;
    this.typicalVal = other.typicalVal;
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetEnumDesc()) {
      this.enumDesc = other.enumDesc;
    }
    this.timestamp = other.timestamp;
    this.state = other.state;
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetSourceTag()) {
      this.sourceTag = other.sourceTag;
    }
    this.upperLimit = other.upperLimit;
    this.lowerLimit = other.lowerLimit;
    this.pushreference = other.pushreference;
    this.ruleReference = other.ruleReference;
    this.exceptionMin = other.exceptionMin;
    this.exceptionMax = other.exceptionMax;
    this.exceptionDev = other.exceptionDev;
    this.alarmType = other.alarmType;
    this.alarmState = other.alarmState;
    this.alarmHi = other.alarmHi;
    this.alarmLo = other.alarmLo;
    this.alarmHiHi = other.alarmHiHi;
    this.alarmLolo = other.alarmLolo;
    this.hiPriority = other.hiPriority;
    this.loPriority = other.loPriority;
    this.hihiPriority = other.hihiPriority;
    this.loloPriority = other.loloPriority;
    this.isArchived = other.isArchived;
    this.isCompressed = other.isCompressed;
    this.interMethod = other.interMethod;
    this.hisIndex = other.hisIndex;
    this.compressMin = other.compressMin;
    this.compressMax = other.compressMax;
    this.lastValue = other.lastValue;
    this.creationDate = other.creationDate;
  }

  public TAGNODE deepCopy() {
    return new TAGNODE(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.desc = null;
    this.engUnit = null;
    setIdIsSet(false);
    this.id = 0;
    setTypeIsSet(false);
    this.type = 0;
    setIOStateIsSet(false);
    this.IOState = 0;
    setTypicalValIsSet(false);
    this.typicalVal = 0.0;
    this.value = null;
    this.enumDesc = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setStateIsSet(false);
    this.state = 0;
    this.deviceName = null;
    this.groupName = null;
    this.sourceTag = null;
    setUpperLimitIsSet(false);
    this.upperLimit = 0.0;
    setLowerLimitIsSet(false);
    this.lowerLimit = 0.0;
    setPushreferenceIsSet(false);
    this.pushreference = 0;
    setRuleReferenceIsSet(false);
    this.ruleReference = 0;
    setExceptionMinIsSet(false);
    this.exceptionMin = 0;
    setExceptionMaxIsSet(false);
    this.exceptionMax = 0;
    setExceptionDevIsSet(false);
    this.exceptionDev = 0.0;
    setAlarmTypeIsSet(false);
    this.alarmType = 0;
    setAlarmStateIsSet(false);
    this.alarmState = 0;
    setAlarmHiIsSet(false);
    this.alarmHi = 0.0;
    setAlarmLoIsSet(false);
    this.alarmLo = 0.0;
    setAlarmHiHiIsSet(false);
    this.alarmHiHi = 0.0;
    setAlarmLoloIsSet(false);
    this.alarmLolo = 0.0;
    setHiPriorityIsSet(false);
    this.hiPriority = 0;
    setLoPriorityIsSet(false);
    this.loPriority = 0;
    setHihiPriorityIsSet(false);
    this.hihiPriority = 0;
    setLoloPriorityIsSet(false);
    this.loloPriority = 0;
    setIsArchivedIsSet(false);
    this.isArchived = false;
    setIsCompressedIsSet(false);
    this.isCompressed = false;
    setInterMethodIsSet(false);
    this.interMethod = 0;
    setHisIndexIsSet(false);
    this.hisIndex = 0;
    setCompressMinIsSet(false);
    this.compressMin = 0;
    setCompressMaxIsSet(false);
    this.compressMax = 0;
    setLastValueIsSet(false);
    this.lastValue = 0.0;
    setCreationDateIsSet(false);
    this.creationDate = 0;
  }

  public String getName() {
    return this.name;
  }

  public TAGNODE setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public TAGNODE setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getEngUnit() {
    return this.engUnit;
  }

  public TAGNODE setEngUnit(String engUnit) {
    this.engUnit = engUnit;
    return this;
  }

  public void unsetEngUnit() {
    this.engUnit = null;
  }

  /** Returns true if field engUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetEngUnit() {
    return this.engUnit != null;
  }

  public void setEngUnitIsSet(boolean value) {
    if (!value) {
      this.engUnit = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public TAGNODE setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public byte getType() {
    return this.type;
  }

  public TAGNODE setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public byte getIOState() {
    return this.IOState;
  }

  public TAGNODE setIOState(byte IOState) {
    this.IOState = IOState;
    setIOStateIsSet(true);
    return this;
  }

  public void unsetIOState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IOSTATE_ISSET_ID);
  }

  /** Returns true if field IOState is set (has been assigned a value) and false otherwise */
  public boolean isSetIOState() {
    return EncodingUtils.testBit(__isset_bitfield, __IOSTATE_ISSET_ID);
  }

  public void setIOStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IOSTATE_ISSET_ID, value);
  }

  public double getTypicalVal() {
    return this.typicalVal;
  }

  public TAGNODE setTypicalVal(double typicalVal) {
    this.typicalVal = typicalVal;
    setTypicalValIsSet(true);
    return this;
  }

  public void unsetTypicalVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPICALVAL_ISSET_ID);
  }

  /** Returns true if field typicalVal is set (has been assigned a value) and false otherwise */
  public boolean isSetTypicalVal() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPICALVAL_ISSET_ID);
  }

  public void setTypicalValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPICALVAL_ISSET_ID, value);
  }

  public String getValue() {
    return this.value;
  }

  public TAGNODE setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public String getEnumDesc() {
    return this.enumDesc;
  }

  public TAGNODE setEnumDesc(String enumDesc) {
    this.enumDesc = enumDesc;
    return this;
  }

  public void unsetEnumDesc() {
    this.enumDesc = null;
  }

  /** Returns true if field enumDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumDesc() {
    return this.enumDesc != null;
  }

  public void setEnumDescIsSet(boolean value) {
    if (!value) {
      this.enumDesc = null;
    }
  }

  public int getTimestamp() {
    return this.timestamp;
  }

  public TAGNODE setTimestamp(int timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public TAGNODE setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getDeviceName() {
    return this.deviceName;
  }

  public TAGNODE setDeviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public TAGNODE setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getSourceTag() {
    return this.sourceTag;
  }

  public TAGNODE setSourceTag(String sourceTag) {
    this.sourceTag = sourceTag;
    return this;
  }

  public void unsetSourceTag() {
    this.sourceTag = null;
  }

  /** Returns true if field sourceTag is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceTag() {
    return this.sourceTag != null;
  }

  public void setSourceTagIsSet(boolean value) {
    if (!value) {
      this.sourceTag = null;
    }
  }

  public double getUpperLimit() {
    return this.upperLimit;
  }

  public TAGNODE setUpperLimit(double upperLimit) {
    this.upperLimit = upperLimit;
    setUpperLimitIsSet(true);
    return this;
  }

  public void unsetUpperLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERLIMIT_ISSET_ID);
  }

  /** Returns true if field upperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPERLIMIT_ISSET_ID);
  }

  public void setUpperLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERLIMIT_ISSET_ID, value);
  }

  public double getLowerLimit() {
    return this.lowerLimit;
  }

  public TAGNODE setLowerLimit(double lowerLimit) {
    this.lowerLimit = lowerLimit;
    setLowerLimitIsSet(true);
    return this;
  }

  public void unsetLowerLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERLIMIT_ISSET_ID);
  }

  /** Returns true if field lowerLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLowerLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWERLIMIT_ISSET_ID);
  }

  public void setLowerLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERLIMIT_ISSET_ID, value);
  }

  public short getPushreference() {
    return this.pushreference;
  }

  public TAGNODE setPushreference(short pushreference) {
    this.pushreference = pushreference;
    setPushreferenceIsSet(true);
    return this;
  }

  public void unsetPushreference() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHREFERENCE_ISSET_ID);
  }

  /** Returns true if field pushreference is set (has been assigned a value) and false otherwise */
  public boolean isSetPushreference() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHREFERENCE_ISSET_ID);
  }

  public void setPushreferenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHREFERENCE_ISSET_ID, value);
  }

  public short getRuleReference() {
    return this.ruleReference;
  }

  public TAGNODE setRuleReference(short ruleReference) {
    this.ruleReference = ruleReference;
    setRuleReferenceIsSet(true);
    return this;
  }

  public void unsetRuleReference() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEREFERENCE_ISSET_ID);
  }

  /** Returns true if field ruleReference is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleReference() {
    return EncodingUtils.testBit(__isset_bitfield, __RULEREFERENCE_ISSET_ID);
  }

  public void setRuleReferenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEREFERENCE_ISSET_ID, value);
  }

  public int getExceptionMin() {
    return this.exceptionMin;
  }

  public TAGNODE setExceptionMin(int exceptionMin) {
    this.exceptionMin = exceptionMin;
    setExceptionMinIsSet(true);
    return this;
  }

  public void unsetExceptionMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONMIN_ISSET_ID);
  }

  /** Returns true if field exceptionMin is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionMin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONMIN_ISSET_ID);
  }

  public void setExceptionMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONMIN_ISSET_ID, value);
  }

  public int getExceptionMax() {
    return this.exceptionMax;
  }

  public TAGNODE setExceptionMax(int exceptionMax) {
    this.exceptionMax = exceptionMax;
    setExceptionMaxIsSet(true);
    return this;
  }

  public void unsetExceptionMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONMAX_ISSET_ID);
  }

  /** Returns true if field exceptionMax is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionMax() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONMAX_ISSET_ID);
  }

  public void setExceptionMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONMAX_ISSET_ID, value);
  }

  public double getExceptionDev() {
    return this.exceptionDev;
  }

  public TAGNODE setExceptionDev(double exceptionDev) {
    this.exceptionDev = exceptionDev;
    setExceptionDevIsSet(true);
    return this;
  }

  public void unsetExceptionDev() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCEPTIONDEV_ISSET_ID);
  }

  /** Returns true if field exceptionDev is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionDev() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCEPTIONDEV_ISSET_ID);
  }

  public void setExceptionDevIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCEPTIONDEV_ISSET_ID, value);
  }

  public short getAlarmType() {
    return this.alarmType;
  }

  public TAGNODE setAlarmType(short alarmType) {
    this.alarmType = alarmType;
    setAlarmTypeIsSet(true);
    return this;
  }

  public void unsetAlarmType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMTYPE_ISSET_ID);
  }

  /** Returns true if field alarmType is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmType() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMTYPE_ISSET_ID);
  }

  public void setAlarmTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMTYPE_ISSET_ID, value);
  }

  public short getAlarmState() {
    return this.alarmState;
  }

  public TAGNODE setAlarmState(short alarmState) {
    this.alarmState = alarmState;
    setAlarmStateIsSet(true);
    return this;
  }

  public void unsetAlarmState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMSTATE_ISSET_ID);
  }

  /** Returns true if field alarmState is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmState() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMSTATE_ISSET_ID);
  }

  public void setAlarmStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMSTATE_ISSET_ID, value);
  }

  public double getAlarmHi() {
    return this.alarmHi;
  }

  public TAGNODE setAlarmHi(double alarmHi) {
    this.alarmHi = alarmHi;
    setAlarmHiIsSet(true);
    return this;
  }

  public void unsetAlarmHi() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMHI_ISSET_ID);
  }

  /** Returns true if field alarmHi is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmHi() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMHI_ISSET_ID);
  }

  public void setAlarmHiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMHI_ISSET_ID, value);
  }

  public double getAlarmLo() {
    return this.alarmLo;
  }

  public TAGNODE setAlarmLo(double alarmLo) {
    this.alarmLo = alarmLo;
    setAlarmLoIsSet(true);
    return this;
  }

  public void unsetAlarmLo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMLO_ISSET_ID);
  }

  /** Returns true if field alarmLo is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmLo() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMLO_ISSET_ID);
  }

  public void setAlarmLoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMLO_ISSET_ID, value);
  }

  public double getAlarmHiHi() {
    return this.alarmHiHi;
  }

  public TAGNODE setAlarmHiHi(double alarmHiHi) {
    this.alarmHiHi = alarmHiHi;
    setAlarmHiHiIsSet(true);
    return this;
  }

  public void unsetAlarmHiHi() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMHIHI_ISSET_ID);
  }

  /** Returns true if field alarmHiHi is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmHiHi() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMHIHI_ISSET_ID);
  }

  public void setAlarmHiHiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMHIHI_ISSET_ID, value);
  }

  public double getAlarmLolo() {
    return this.alarmLolo;
  }

  public TAGNODE setAlarmLolo(double alarmLolo) {
    this.alarmLolo = alarmLolo;
    setAlarmLoloIsSet(true);
    return this;
  }

  public void unsetAlarmLolo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMLOLO_ISSET_ID);
  }

  /** Returns true if field alarmLolo is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmLolo() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMLOLO_ISSET_ID);
  }

  public void setAlarmLoloIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMLOLO_ISSET_ID, value);
  }

  public short getHiPriority() {
    return this.hiPriority;
  }

  public TAGNODE setHiPriority(short hiPriority) {
    this.hiPriority = hiPriority;
    setHiPriorityIsSet(true);
    return this;
  }

  public void unsetHiPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIPRIORITY_ISSET_ID);
  }

  /** Returns true if field hiPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetHiPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __HIPRIORITY_ISSET_ID);
  }

  public void setHiPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIPRIORITY_ISSET_ID, value);
  }

  public short getLoPriority() {
    return this.loPriority;
  }

  public TAGNODE setLoPriority(short loPriority) {
    this.loPriority = loPriority;
    setLoPriorityIsSet(true);
    return this;
  }

  public void unsetLoPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOPRIORITY_ISSET_ID);
  }

  /** Returns true if field loPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetLoPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __LOPRIORITY_ISSET_ID);
  }

  public void setLoPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOPRIORITY_ISSET_ID, value);
  }

  public short getHihiPriority() {
    return this.hihiPriority;
  }

  public TAGNODE setHihiPriority(short hihiPriority) {
    this.hihiPriority = hihiPriority;
    setHihiPriorityIsSet(true);
    return this;
  }

  public void unsetHihiPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIHIPRIORITY_ISSET_ID);
  }

  /** Returns true if field hihiPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetHihiPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __HIHIPRIORITY_ISSET_ID);
  }

  public void setHihiPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIHIPRIORITY_ISSET_ID, value);
  }

  public short getLoloPriority() {
    return this.loloPriority;
  }

  public TAGNODE setLoloPriority(short loloPriority) {
    this.loloPriority = loloPriority;
    setLoloPriorityIsSet(true);
    return this;
  }

  public void unsetLoloPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOLOPRIORITY_ISSET_ID);
  }

  /** Returns true if field loloPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetLoloPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __LOLOPRIORITY_ISSET_ID);
  }

  public void setLoloPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOLOPRIORITY_ISSET_ID, value);
  }

  public boolean isIsArchived() {
    return this.isArchived;
  }

  public TAGNODE setIsArchived(boolean isArchived) {
    this.isArchived = isArchived;
    setIsArchivedIsSet(true);
    return this;
  }

  public void unsetIsArchived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARCHIVED_ISSET_ID);
  }

  /** Returns true if field isArchived is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArchived() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARCHIVED_ISSET_ID);
  }

  public void setIsArchivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARCHIVED_ISSET_ID, value);
  }

  public boolean isIsCompressed() {
    return this.isCompressed;
  }

  public TAGNODE setIsCompressed(boolean isCompressed) {
    this.isCompressed = isCompressed;
    setIsCompressedIsSet(true);
    return this;
  }

  public void unsetIsCompressed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPRESSED_ISSET_ID);
  }

  /** Returns true if field isCompressed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCompressed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPRESSED_ISSET_ID);
  }

  public void setIsCompressedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPRESSED_ISSET_ID, value);
  }

  public byte getInterMethod() {
    return this.interMethod;
  }

  public TAGNODE setInterMethod(byte interMethod) {
    this.interMethod = interMethod;
    setInterMethodIsSet(true);
    return this;
  }

  public void unsetInterMethod() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERMETHOD_ISSET_ID);
  }

  /** Returns true if field interMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetInterMethod() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERMETHOD_ISSET_ID);
  }

  public void setInterMethodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERMETHOD_ISSET_ID, value);
  }

  public int getHisIndex() {
    return this.hisIndex;
  }

  public TAGNODE setHisIndex(int hisIndex) {
    this.hisIndex = hisIndex;
    setHisIndexIsSet(true);
    return this;
  }

  public void unsetHisIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISINDEX_ISSET_ID);
  }

  /** Returns true if field hisIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetHisIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __HISINDEX_ISSET_ID);
  }

  public void setHisIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISINDEX_ISSET_ID, value);
  }

  public int getCompressMin() {
    return this.compressMin;
  }

  public TAGNODE setCompressMin(int compressMin) {
    this.compressMin = compressMin;
    setCompressMinIsSet(true);
    return this;
  }

  public void unsetCompressMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPRESSMIN_ISSET_ID);
  }

  /** Returns true if field compressMin is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressMin() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPRESSMIN_ISSET_ID);
  }

  public void setCompressMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPRESSMIN_ISSET_ID, value);
  }

  public int getCompressMax() {
    return this.compressMax;
  }

  public TAGNODE setCompressMax(int compressMax) {
    this.compressMax = compressMax;
    setCompressMaxIsSet(true);
    return this;
  }

  public void unsetCompressMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPRESSMAX_ISSET_ID);
  }

  /** Returns true if field compressMax is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressMax() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPRESSMAX_ISSET_ID);
  }

  public void setCompressMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPRESSMAX_ISSET_ID, value);
  }

  public double getLastValue() {
    return this.lastValue;
  }

  public TAGNODE setLastValue(double lastValue) {
    this.lastValue = lastValue;
    setLastValueIsSet(true);
    return this;
  }

  public void unsetLastValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTVALUE_ISSET_ID);
  }

  /** Returns true if field lastValue is set (has been assigned a value) and false otherwise */
  public boolean isSetLastValue() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTVALUE_ISSET_ID);
  }

  public void setLastValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTVALUE_ISSET_ID, value);
  }

  public int getCreationDate() {
    return this.creationDate;
  }

  public TAGNODE setCreationDate(int creationDate) {
    this.creationDate = creationDate;
    setCreationDateIsSet(true);
    return this;
  }

  public void unsetCreationDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONDATE_ISSET_ID);
  }

  /** Returns true if field creationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONDATE_ISSET_ID);
  }

  public void setCreationDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case ENG_UNIT:
      if (value == null) {
        unsetEngUnit();
      } else {
        setEngUnit((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case IOSTATE:
      if (value == null) {
        unsetIOState();
      } else {
        setIOState((Byte)value);
      }
      break;

    case TYPICAL_VAL:
      if (value == null) {
        unsetTypicalVal();
      } else {
        setTypicalVal((Double)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ENUM_DESC:
      if (value == null) {
        unsetEnumDesc();
      } else {
        setEnumDesc((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case SOURCE_TAG:
      if (value == null) {
        unsetSourceTag();
      } else {
        setSourceTag((String)value);
      }
      break;

    case UPPER_LIMIT:
      if (value == null) {
        unsetUpperLimit();
      } else {
        setUpperLimit((Double)value);
      }
      break;

    case LOWER_LIMIT:
      if (value == null) {
        unsetLowerLimit();
      } else {
        setLowerLimit((Double)value);
      }
      break;

    case PUSHREFERENCE:
      if (value == null) {
        unsetPushreference();
      } else {
        setPushreference((Short)value);
      }
      break;

    case RULE_REFERENCE:
      if (value == null) {
        unsetRuleReference();
      } else {
        setRuleReference((Short)value);
      }
      break;

    case EXCEPTION_MIN:
      if (value == null) {
        unsetExceptionMin();
      } else {
        setExceptionMin((Integer)value);
      }
      break;

    case EXCEPTION_MAX:
      if (value == null) {
        unsetExceptionMax();
      } else {
        setExceptionMax((Integer)value);
      }
      break;

    case EXCEPTION_DEV:
      if (value == null) {
        unsetExceptionDev();
      } else {
        setExceptionDev((Double)value);
      }
      break;

    case ALARM_TYPE:
      if (value == null) {
        unsetAlarmType();
      } else {
        setAlarmType((Short)value);
      }
      break;

    case ALARM_STATE:
      if (value == null) {
        unsetAlarmState();
      } else {
        setAlarmState((Short)value);
      }
      break;

    case ALARM_HI:
      if (value == null) {
        unsetAlarmHi();
      } else {
        setAlarmHi((Double)value);
      }
      break;

    case ALARM_LO:
      if (value == null) {
        unsetAlarmLo();
      } else {
        setAlarmLo((Double)value);
      }
      break;

    case ALARM_HI_HI:
      if (value == null) {
        unsetAlarmHiHi();
      } else {
        setAlarmHiHi((Double)value);
      }
      break;

    case ALARM_LOLO:
      if (value == null) {
        unsetAlarmLolo();
      } else {
        setAlarmLolo((Double)value);
      }
      break;

    case HI_PRIORITY:
      if (value == null) {
        unsetHiPriority();
      } else {
        setHiPriority((Short)value);
      }
      break;

    case LO_PRIORITY:
      if (value == null) {
        unsetLoPriority();
      } else {
        setLoPriority((Short)value);
      }
      break;

    case HIHI_PRIORITY:
      if (value == null) {
        unsetHihiPriority();
      } else {
        setHihiPriority((Short)value);
      }
      break;

    case LOLO_PRIORITY:
      if (value == null) {
        unsetLoloPriority();
      } else {
        setLoloPriority((Short)value);
      }
      break;

    case IS_ARCHIVED:
      if (value == null) {
        unsetIsArchived();
      } else {
        setIsArchived((Boolean)value);
      }
      break;

    case IS_COMPRESSED:
      if (value == null) {
        unsetIsCompressed();
      } else {
        setIsCompressed((Boolean)value);
      }
      break;

    case INTER_METHOD:
      if (value == null) {
        unsetInterMethod();
      } else {
        setInterMethod((Byte)value);
      }
      break;

    case HIS_INDEX:
      if (value == null) {
        unsetHisIndex();
      } else {
        setHisIndex((Integer)value);
      }
      break;

    case COMPRESS_MIN:
      if (value == null) {
        unsetCompressMin();
      } else {
        setCompressMin((Integer)value);
      }
      break;

    case COMPRESS_MAX:
      if (value == null) {
        unsetCompressMax();
      } else {
        setCompressMax((Integer)value);
      }
      break;

    case LAST_VALUE:
      if (value == null) {
        unsetLastValue();
      } else {
        setLastValue((Double)value);
      }
      break;

    case CREATION_DATE:
      if (value == null) {
        unsetCreationDate();
      } else {
        setCreationDate((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DESC:
      return getDesc();

    case ENG_UNIT:
      return getEngUnit();

    case ID:
      return Integer.valueOf(getId());

    case TYPE:
      return Byte.valueOf(getType());

    case IOSTATE:
      return Byte.valueOf(getIOState());

    case TYPICAL_VAL:
      return Double.valueOf(getTypicalVal());

    case VALUE:
      return getValue();

    case ENUM_DESC:
      return getEnumDesc();

    case TIMESTAMP:
      return Integer.valueOf(getTimestamp());

    case STATE:
      return Integer.valueOf(getState());

    case DEVICE_NAME:
      return getDeviceName();

    case GROUP_NAME:
      return getGroupName();

    case SOURCE_TAG:
      return getSourceTag();

    case UPPER_LIMIT:
      return Double.valueOf(getUpperLimit());

    case LOWER_LIMIT:
      return Double.valueOf(getLowerLimit());

    case PUSHREFERENCE:
      return Short.valueOf(getPushreference());

    case RULE_REFERENCE:
      return Short.valueOf(getRuleReference());

    case EXCEPTION_MIN:
      return Integer.valueOf(getExceptionMin());

    case EXCEPTION_MAX:
      return Integer.valueOf(getExceptionMax());

    case EXCEPTION_DEV:
      return Double.valueOf(getExceptionDev());

    case ALARM_TYPE:
      return Short.valueOf(getAlarmType());

    case ALARM_STATE:
      return Short.valueOf(getAlarmState());

    case ALARM_HI:
      return Double.valueOf(getAlarmHi());

    case ALARM_LO:
      return Double.valueOf(getAlarmLo());

    case ALARM_HI_HI:
      return Double.valueOf(getAlarmHiHi());

    case ALARM_LOLO:
      return Double.valueOf(getAlarmLolo());

    case HI_PRIORITY:
      return Short.valueOf(getHiPriority());

    case LO_PRIORITY:
      return Short.valueOf(getLoPriority());

    case HIHI_PRIORITY:
      return Short.valueOf(getHihiPriority());

    case LOLO_PRIORITY:
      return Short.valueOf(getLoloPriority());

    case IS_ARCHIVED:
      return Boolean.valueOf(isIsArchived());

    case IS_COMPRESSED:
      return Boolean.valueOf(isIsCompressed());

    case INTER_METHOD:
      return Byte.valueOf(getInterMethod());

    case HIS_INDEX:
      return Integer.valueOf(getHisIndex());

    case COMPRESS_MIN:
      return Integer.valueOf(getCompressMin());

    case COMPRESS_MAX:
      return Integer.valueOf(getCompressMax());

    case LAST_VALUE:
      return Double.valueOf(getLastValue());

    case CREATION_DATE:
      return Integer.valueOf(getCreationDate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DESC:
      return isSetDesc();
    case ENG_UNIT:
      return isSetEngUnit();
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case IOSTATE:
      return isSetIOState();
    case TYPICAL_VAL:
      return isSetTypicalVal();
    case VALUE:
      return isSetValue();
    case ENUM_DESC:
      return isSetEnumDesc();
    case TIMESTAMP:
      return isSetTimestamp();
    case STATE:
      return isSetState();
    case DEVICE_NAME:
      return isSetDeviceName();
    case GROUP_NAME:
      return isSetGroupName();
    case SOURCE_TAG:
      return isSetSourceTag();
    case UPPER_LIMIT:
      return isSetUpperLimit();
    case LOWER_LIMIT:
      return isSetLowerLimit();
    case PUSHREFERENCE:
      return isSetPushreference();
    case RULE_REFERENCE:
      return isSetRuleReference();
    case EXCEPTION_MIN:
      return isSetExceptionMin();
    case EXCEPTION_MAX:
      return isSetExceptionMax();
    case EXCEPTION_DEV:
      return isSetExceptionDev();
    case ALARM_TYPE:
      return isSetAlarmType();
    case ALARM_STATE:
      return isSetAlarmState();
    case ALARM_HI:
      return isSetAlarmHi();
    case ALARM_LO:
      return isSetAlarmLo();
    case ALARM_HI_HI:
      return isSetAlarmHiHi();
    case ALARM_LOLO:
      return isSetAlarmLolo();
    case HI_PRIORITY:
      return isSetHiPriority();
    case LO_PRIORITY:
      return isSetLoPriority();
    case HIHI_PRIORITY:
      return isSetHihiPriority();
    case LOLO_PRIORITY:
      return isSetLoloPriority();
    case IS_ARCHIVED:
      return isSetIsArchived();
    case IS_COMPRESSED:
      return isSetIsCompressed();
    case INTER_METHOD:
      return isSetInterMethod();
    case HIS_INDEX:
      return isSetHisIndex();
    case COMPRESS_MIN:
      return isSetCompressMin();
    case COMPRESS_MAX:
      return isSetCompressMax();
    case LAST_VALUE:
      return isSetLastValue();
    case CREATION_DATE:
      return isSetCreationDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAGNODE)
      return this.equals((TAGNODE)that);
    return false;
  }

  public boolean equals(TAGNODE that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_engUnit = true && this.isSetEngUnit();
    boolean that_present_engUnit = true && that.isSetEngUnit();
    if (this_present_engUnit || that_present_engUnit) {
      if (!(this_present_engUnit && that_present_engUnit))
        return false;
      if (!this.engUnit.equals(that.engUnit))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_IOState = true;
    boolean that_present_IOState = true;
    if (this_present_IOState || that_present_IOState) {
      if (!(this_present_IOState && that_present_IOState))
        return false;
      if (this.IOState != that.IOState)
        return false;
    }

    boolean this_present_typicalVal = true;
    boolean that_present_typicalVal = true;
    if (this_present_typicalVal || that_present_typicalVal) {
      if (!(this_present_typicalVal && that_present_typicalVal))
        return false;
      if (this.typicalVal != that.typicalVal)
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_enumDesc = true && this.isSetEnumDesc();
    boolean that_present_enumDesc = true && that.isSetEnumDesc();
    if (this_present_enumDesc || that_present_enumDesc) {
      if (!(this_present_enumDesc && that_present_enumDesc))
        return false;
      if (!this.enumDesc.equals(that.enumDesc))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_sourceTag = true && this.isSetSourceTag();
    boolean that_present_sourceTag = true && that.isSetSourceTag();
    if (this_present_sourceTag || that_present_sourceTag) {
      if (!(this_present_sourceTag && that_present_sourceTag))
        return false;
      if (!this.sourceTag.equals(that.sourceTag))
        return false;
    }

    boolean this_present_upperLimit = true;
    boolean that_present_upperLimit = true;
    if (this_present_upperLimit || that_present_upperLimit) {
      if (!(this_present_upperLimit && that_present_upperLimit))
        return false;
      if (this.upperLimit != that.upperLimit)
        return false;
    }

    boolean this_present_lowerLimit = true;
    boolean that_present_lowerLimit = true;
    if (this_present_lowerLimit || that_present_lowerLimit) {
      if (!(this_present_lowerLimit && that_present_lowerLimit))
        return false;
      if (this.lowerLimit != that.lowerLimit)
        return false;
    }

    boolean this_present_pushreference = true;
    boolean that_present_pushreference = true;
    if (this_present_pushreference || that_present_pushreference) {
      if (!(this_present_pushreference && that_present_pushreference))
        return false;
      if (this.pushreference != that.pushreference)
        return false;
    }

    boolean this_present_ruleReference = true;
    boolean that_present_ruleReference = true;
    if (this_present_ruleReference || that_present_ruleReference) {
      if (!(this_present_ruleReference && that_present_ruleReference))
        return false;
      if (this.ruleReference != that.ruleReference)
        return false;
    }

    boolean this_present_exceptionMin = true;
    boolean that_present_exceptionMin = true;
    if (this_present_exceptionMin || that_present_exceptionMin) {
      if (!(this_present_exceptionMin && that_present_exceptionMin))
        return false;
      if (this.exceptionMin != that.exceptionMin)
        return false;
    }

    boolean this_present_exceptionMax = true;
    boolean that_present_exceptionMax = true;
    if (this_present_exceptionMax || that_present_exceptionMax) {
      if (!(this_present_exceptionMax && that_present_exceptionMax))
        return false;
      if (this.exceptionMax != that.exceptionMax)
        return false;
    }

    boolean this_present_exceptionDev = true;
    boolean that_present_exceptionDev = true;
    if (this_present_exceptionDev || that_present_exceptionDev) {
      if (!(this_present_exceptionDev && that_present_exceptionDev))
        return false;
      if (this.exceptionDev != that.exceptionDev)
        return false;
    }

    boolean this_present_alarmType = true;
    boolean that_present_alarmType = true;
    if (this_present_alarmType || that_present_alarmType) {
      if (!(this_present_alarmType && that_present_alarmType))
        return false;
      if (this.alarmType != that.alarmType)
        return false;
    }

    boolean this_present_alarmState = true;
    boolean that_present_alarmState = true;
    if (this_present_alarmState || that_present_alarmState) {
      if (!(this_present_alarmState && that_present_alarmState))
        return false;
      if (this.alarmState != that.alarmState)
        return false;
    }

    boolean this_present_alarmHi = true;
    boolean that_present_alarmHi = true;
    if (this_present_alarmHi || that_present_alarmHi) {
      if (!(this_present_alarmHi && that_present_alarmHi))
        return false;
      if (this.alarmHi != that.alarmHi)
        return false;
    }

    boolean this_present_alarmLo = true;
    boolean that_present_alarmLo = true;
    if (this_present_alarmLo || that_present_alarmLo) {
      if (!(this_present_alarmLo && that_present_alarmLo))
        return false;
      if (this.alarmLo != that.alarmLo)
        return false;
    }

    boolean this_present_alarmHiHi = true;
    boolean that_present_alarmHiHi = true;
    if (this_present_alarmHiHi || that_present_alarmHiHi) {
      if (!(this_present_alarmHiHi && that_present_alarmHiHi))
        return false;
      if (this.alarmHiHi != that.alarmHiHi)
        return false;
    }

    boolean this_present_alarmLolo = true;
    boolean that_present_alarmLolo = true;
    if (this_present_alarmLolo || that_present_alarmLolo) {
      if (!(this_present_alarmLolo && that_present_alarmLolo))
        return false;
      if (this.alarmLolo != that.alarmLolo)
        return false;
    }

    boolean this_present_hiPriority = true;
    boolean that_present_hiPriority = true;
    if (this_present_hiPriority || that_present_hiPriority) {
      if (!(this_present_hiPriority && that_present_hiPriority))
        return false;
      if (this.hiPriority != that.hiPriority)
        return false;
    }

    boolean this_present_loPriority = true;
    boolean that_present_loPriority = true;
    if (this_present_loPriority || that_present_loPriority) {
      if (!(this_present_loPriority && that_present_loPriority))
        return false;
      if (this.loPriority != that.loPriority)
        return false;
    }

    boolean this_present_hihiPriority = true;
    boolean that_present_hihiPriority = true;
    if (this_present_hihiPriority || that_present_hihiPriority) {
      if (!(this_present_hihiPriority && that_present_hihiPriority))
        return false;
      if (this.hihiPriority != that.hihiPriority)
        return false;
    }

    boolean this_present_loloPriority = true;
    boolean that_present_loloPriority = true;
    if (this_present_loloPriority || that_present_loloPriority) {
      if (!(this_present_loloPriority && that_present_loloPriority))
        return false;
      if (this.loloPriority != that.loloPriority)
        return false;
    }

    boolean this_present_isArchived = true;
    boolean that_present_isArchived = true;
    if (this_present_isArchived || that_present_isArchived) {
      if (!(this_present_isArchived && that_present_isArchived))
        return false;
      if (this.isArchived != that.isArchived)
        return false;
    }

    boolean this_present_isCompressed = true;
    boolean that_present_isCompressed = true;
    if (this_present_isCompressed || that_present_isCompressed) {
      if (!(this_present_isCompressed && that_present_isCompressed))
        return false;
      if (this.isCompressed != that.isCompressed)
        return false;
    }

    boolean this_present_interMethod = true;
    boolean that_present_interMethod = true;
    if (this_present_interMethod || that_present_interMethod) {
      if (!(this_present_interMethod && that_present_interMethod))
        return false;
      if (this.interMethod != that.interMethod)
        return false;
    }

    boolean this_present_hisIndex = true;
    boolean that_present_hisIndex = true;
    if (this_present_hisIndex || that_present_hisIndex) {
      if (!(this_present_hisIndex && that_present_hisIndex))
        return false;
      if (this.hisIndex != that.hisIndex)
        return false;
    }

    boolean this_present_compressMin = true;
    boolean that_present_compressMin = true;
    if (this_present_compressMin || that_present_compressMin) {
      if (!(this_present_compressMin && that_present_compressMin))
        return false;
      if (this.compressMin != that.compressMin)
        return false;
    }

    boolean this_present_compressMax = true;
    boolean that_present_compressMax = true;
    if (this_present_compressMax || that_present_compressMax) {
      if (!(this_present_compressMax && that_present_compressMax))
        return false;
      if (this.compressMax != that.compressMax)
        return false;
    }

    boolean this_present_lastValue = true;
    boolean that_present_lastValue = true;
    if (this_present_lastValue || that_present_lastValue) {
      if (!(this_present_lastValue && that_present_lastValue))
        return false;
      if (this.lastValue != that.lastValue)
        return false;
    }

    boolean this_present_creationDate = true;
    boolean that_present_creationDate = true;
    if (this_present_creationDate || that_present_creationDate) {
      if (!(this_present_creationDate && that_present_creationDate))
        return false;
      if (this.creationDate != that.creationDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_engUnit = true && (isSetEngUnit());
    list.add(present_engUnit);
    if (present_engUnit)
      list.add(engUnit);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_IOState = true;
    list.add(present_IOState);
    if (present_IOState)
      list.add(IOState);

    boolean present_typicalVal = true;
    list.add(present_typicalVal);
    if (present_typicalVal)
      list.add(typicalVal);

    boolean present_value = true && (isSetValue());
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_enumDesc = true && (isSetEnumDesc());
    list.add(present_enumDesc);
    if (present_enumDesc)
      list.add(enumDesc);

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_deviceName = true && (isSetDeviceName());
    list.add(present_deviceName);
    if (present_deviceName)
      list.add(deviceName);

    boolean present_groupName = true && (isSetGroupName());
    list.add(present_groupName);
    if (present_groupName)
      list.add(groupName);

    boolean present_sourceTag = true && (isSetSourceTag());
    list.add(present_sourceTag);
    if (present_sourceTag)
      list.add(sourceTag);

    boolean present_upperLimit = true;
    list.add(present_upperLimit);
    if (present_upperLimit)
      list.add(upperLimit);

    boolean present_lowerLimit = true;
    list.add(present_lowerLimit);
    if (present_lowerLimit)
      list.add(lowerLimit);

    boolean present_pushreference = true;
    list.add(present_pushreference);
    if (present_pushreference)
      list.add(pushreference);

    boolean present_ruleReference = true;
    list.add(present_ruleReference);
    if (present_ruleReference)
      list.add(ruleReference);

    boolean present_exceptionMin = true;
    list.add(present_exceptionMin);
    if (present_exceptionMin)
      list.add(exceptionMin);

    boolean present_exceptionMax = true;
    list.add(present_exceptionMax);
    if (present_exceptionMax)
      list.add(exceptionMax);

    boolean present_exceptionDev = true;
    list.add(present_exceptionDev);
    if (present_exceptionDev)
      list.add(exceptionDev);

    boolean present_alarmType = true;
    list.add(present_alarmType);
    if (present_alarmType)
      list.add(alarmType);

    boolean present_alarmState = true;
    list.add(present_alarmState);
    if (present_alarmState)
      list.add(alarmState);

    boolean present_alarmHi = true;
    list.add(present_alarmHi);
    if (present_alarmHi)
      list.add(alarmHi);

    boolean present_alarmLo = true;
    list.add(present_alarmLo);
    if (present_alarmLo)
      list.add(alarmLo);

    boolean present_alarmHiHi = true;
    list.add(present_alarmHiHi);
    if (present_alarmHiHi)
      list.add(alarmHiHi);

    boolean present_alarmLolo = true;
    list.add(present_alarmLolo);
    if (present_alarmLolo)
      list.add(alarmLolo);

    boolean present_hiPriority = true;
    list.add(present_hiPriority);
    if (present_hiPriority)
      list.add(hiPriority);

    boolean present_loPriority = true;
    list.add(present_loPriority);
    if (present_loPriority)
      list.add(loPriority);

    boolean present_hihiPriority = true;
    list.add(present_hihiPriority);
    if (present_hihiPriority)
      list.add(hihiPriority);

    boolean present_loloPriority = true;
    list.add(present_loloPriority);
    if (present_loloPriority)
      list.add(loloPriority);

    boolean present_isArchived = true;
    list.add(present_isArchived);
    if (present_isArchived)
      list.add(isArchived);

    boolean present_isCompressed = true;
    list.add(present_isCompressed);
    if (present_isCompressed)
      list.add(isCompressed);

    boolean present_interMethod = true;
    list.add(present_interMethod);
    if (present_interMethod)
      list.add(interMethod);

    boolean present_hisIndex = true;
    list.add(present_hisIndex);
    if (present_hisIndex)
      list.add(hisIndex);

    boolean present_compressMin = true;
    list.add(present_compressMin);
    if (present_compressMin)
      list.add(compressMin);

    boolean present_compressMax = true;
    list.add(present_compressMax);
    if (present_compressMax)
      list.add(compressMax);

    boolean present_lastValue = true;
    list.add(present_lastValue);
    if (present_lastValue)
      list.add(lastValue);

    boolean present_creationDate = true;
    list.add(present_creationDate);
    if (present_creationDate)
      list.add(creationDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAGNODE other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngUnit()).compareTo(other.isSetEngUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engUnit, other.engUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIOState()).compareTo(other.isSetIOState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIOState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IOState, other.IOState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypicalVal()).compareTo(other.isSetTypicalVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypicalVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typicalVal, other.typicalVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnumDesc()).compareTo(other.isSetEnumDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumDesc, other.enumDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceTag()).compareTo(other.isSetSourceTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceTag, other.sourceTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpperLimit()).compareTo(other.isSetUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperLimit, other.upperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowerLimit()).compareTo(other.isSetLowerLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowerLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerLimit, other.lowerLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushreference()).compareTo(other.isSetPushreference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushreference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushreference, other.pushreference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuleReference()).compareTo(other.isSetRuleReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleReference, other.ruleReference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionMin()).compareTo(other.isSetExceptionMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionMin, other.exceptionMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionMax()).compareTo(other.isSetExceptionMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionMax, other.exceptionMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionDev()).compareTo(other.isSetExceptionDev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionDev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionDev, other.exceptionDev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmType()).compareTo(other.isSetAlarmType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmType, other.alarmType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmState()).compareTo(other.isSetAlarmState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmState, other.alarmState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmHi()).compareTo(other.isSetAlarmHi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmHi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmHi, other.alarmHi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmLo()).compareTo(other.isSetAlarmLo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmLo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmLo, other.alarmLo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmHiHi()).compareTo(other.isSetAlarmHiHi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmHiHi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmHiHi, other.alarmHiHi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmLolo()).compareTo(other.isSetAlarmLolo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmLolo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmLolo, other.alarmLolo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHiPriority()).compareTo(other.isSetHiPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHiPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hiPriority, other.hiPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoPriority()).compareTo(other.isSetLoPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loPriority, other.loPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHihiPriority()).compareTo(other.isSetHihiPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHihiPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hihiPriority, other.hihiPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoloPriority()).compareTo(other.isSetLoloPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoloPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loloPriority, other.loloPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArchived()).compareTo(other.isSetIsArchived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArchived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArchived, other.isArchived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCompressed()).compareTo(other.isSetIsCompressed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCompressed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCompressed, other.isCompressed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterMethod()).compareTo(other.isSetInterMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interMethod, other.interMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisIndex()).compareTo(other.isSetHisIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisIndex, other.hisIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressMin()).compareTo(other.isSetCompressMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressMin, other.compressMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressMax()).compareTo(other.isSetCompressMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressMax, other.compressMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastValue()).compareTo(other.isSetLastValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastValue, other.lastValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationDate()).compareTo(other.isSetCreationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationDate, other.creationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAGNODE(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engUnit:");
    if (this.engUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.engUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IOState:");
    sb.append(this.IOState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typicalVal:");
    sb.append(this.typicalVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enumDesc:");
    if (this.enumDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.enumDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceTag:");
    if (this.sourceTag == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("upperLimit:");
    sb.append(this.upperLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lowerLimit:");
    sb.append(this.lowerLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushreference:");
    sb.append(this.pushreference);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruleReference:");
    sb.append(this.ruleReference);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionMin:");
    sb.append(this.exceptionMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionMax:");
    sb.append(this.exceptionMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionDev:");
    sb.append(this.exceptionDev);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmType:");
    sb.append(this.alarmType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmState:");
    sb.append(this.alarmState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmHi:");
    sb.append(this.alarmHi);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmLo:");
    sb.append(this.alarmLo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmHiHi:");
    sb.append(this.alarmHiHi);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmLolo:");
    sb.append(this.alarmLolo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hiPriority:");
    sb.append(this.hiPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loPriority:");
    sb.append(this.loPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hihiPriority:");
    sb.append(this.hihiPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loloPriority:");
    sb.append(this.loloPriority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArchived:");
    sb.append(this.isArchived);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCompressed:");
    sb.append(this.isCompressed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interMethod:");
    sb.append(this.interMethod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisIndex:");
    sb.append(this.hisIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compressMin:");
    sb.append(this.compressMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compressMax:");
    sb.append(this.compressMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastValue:");
    sb.append(this.lastValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationDate:");
    sb.append(this.creationDate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAGNODEStandardSchemeFactory implements SchemeFactory {
    public TAGNODEStandardScheme getScheme() {
      return new TAGNODEStandardScheme();
    }
  }

  private static class TAGNODEStandardScheme extends StandardScheme<TAGNODE> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAGNODE struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENG_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engUnit = iprot.readString();
              struct.setEngUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IOSTATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.IOState = iprot.readByte();
              struct.setIOStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPICAL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.typicalVal = iprot.readDouble();
              struct.setTypicalValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENUM_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enumDesc = iprot.readString();
              struct.setEnumDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timestamp = iprot.readI32();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SOURCE_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceTag = iprot.readString();
              struct.setSourceTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.upperLimit = iprot.readDouble();
              struct.setUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOWER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lowerLimit = iprot.readDouble();
              struct.setLowerLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PUSHREFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.pushreference = iprot.readI16();
              struct.setPushreferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RULE_REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ruleReference = iprot.readI16();
              struct.setRuleReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // EXCEPTION_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exceptionMin = iprot.readI32();
              struct.setExceptionMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXCEPTION_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exceptionMax = iprot.readI32();
              struct.setExceptionMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXCEPTION_DEV
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exceptionDev = iprot.readDouble();
              struct.setExceptionDevIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ALARM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.alarmType = iprot.readI16();
              struct.setAlarmTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ALARM_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.alarmState = iprot.readI16();
              struct.setAlarmStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALARM_HI
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alarmHi = iprot.readDouble();
              struct.setAlarmHiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ALARM_LO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alarmLo = iprot.readDouble();
              struct.setAlarmLoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ALARM_HI_HI
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alarmHiHi = iprot.readDouble();
              struct.setAlarmHiHiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ALARM_LOLO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alarmLolo = iprot.readDouble();
              struct.setAlarmLoloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // HI_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.hiPriority = iprot.readI16();
              struct.setHiPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LO_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.loPriority = iprot.readI16();
              struct.setLoPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // HIHI_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.hihiPriority = iprot.readI16();
              struct.setHihiPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOLO_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.loloPriority = iprot.readI16();
              struct.setLoloPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IS_ARCHIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isArchived = iprot.readBool();
              struct.setIsArchivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // IS_COMPRESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCompressed = iprot.readBool();
              struct.setIsCompressedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // INTER_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.interMethod = iprot.readByte();
              struct.setInterMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // HIS_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hisIndex = iprot.readI32();
              struct.setHisIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // COMPRESS_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compressMin = iprot.readI32();
              struct.setCompressMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // COMPRESS_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compressMax = iprot.readI32();
              struct.setCompressMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // LAST_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastValue = iprot.readDouble();
              struct.setLastValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // CREATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creationDate = iprot.readI32();
              struct.setCreationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAGNODE struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.engUnit != null) {
        oprot.writeFieldBegin(ENG_UNIT_FIELD_DESC);
        oprot.writeString(struct.engUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IOSTATE_FIELD_DESC);
      oprot.writeByte(struct.IOState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPICAL_VAL_FIELD_DESC);
      oprot.writeDouble(struct.typicalVal);
      oprot.writeFieldEnd();
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.enumDesc != null) {
        oprot.writeFieldBegin(ENUM_DESC_FIELD_DESC);
        oprot.writeString(struct.enumDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI32(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.sourceTag != null) {
        oprot.writeFieldBegin(SOURCE_TAG_FIELD_DESC);
        oprot.writeString(struct.sourceTag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPPER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.upperLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOWER_LIMIT_FIELD_DESC);
      oprot.writeDouble(struct.lowerLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUSHREFERENCE_FIELD_DESC);
      oprot.writeI16(struct.pushreference);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RULE_REFERENCE_FIELD_DESC);
      oprot.writeI16(struct.ruleReference);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_MIN_FIELD_DESC);
      oprot.writeI32(struct.exceptionMin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_MAX_FIELD_DESC);
      oprot.writeI32(struct.exceptionMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCEPTION_DEV_FIELD_DESC);
      oprot.writeDouble(struct.exceptionDev);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_TYPE_FIELD_DESC);
      oprot.writeI16(struct.alarmType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_STATE_FIELD_DESC);
      oprot.writeI16(struct.alarmState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_HI_FIELD_DESC);
      oprot.writeDouble(struct.alarmHi);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_LO_FIELD_DESC);
      oprot.writeDouble(struct.alarmLo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_HI_HI_FIELD_DESC);
      oprot.writeDouble(struct.alarmHiHi);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_LOLO_FIELD_DESC);
      oprot.writeDouble(struct.alarmLolo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HI_PRIORITY_FIELD_DESC);
      oprot.writeI16(struct.hiPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LO_PRIORITY_FIELD_DESC);
      oprot.writeI16(struct.loPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIHI_PRIORITY_FIELD_DESC);
      oprot.writeI16(struct.hihiPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOLO_PRIORITY_FIELD_DESC);
      oprot.writeI16(struct.loloPriority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARCHIVED_FIELD_DESC);
      oprot.writeBool(struct.isArchived);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_COMPRESSED_FIELD_DESC);
      oprot.writeBool(struct.isCompressed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTER_METHOD_FIELD_DESC);
      oprot.writeByte(struct.interMethod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIS_INDEX_FIELD_DESC);
      oprot.writeI32(struct.hisIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPRESS_MIN_FIELD_DESC);
      oprot.writeI32(struct.compressMin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPRESS_MAX_FIELD_DESC);
      oprot.writeI32(struct.compressMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.lastValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATION_DATE_FIELD_DESC);
      oprot.writeI32(struct.creationDate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAGNODETupleSchemeFactory implements SchemeFactory {
    public TAGNODETupleScheme getScheme() {
      return new TAGNODETupleScheme();
    }
  }

  private static class TAGNODETupleScheme extends TupleScheme<TAGNODE> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAGNODE struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDesc()) {
        optionals.set(1);
      }
      if (struct.isSetEngUnit()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetIOState()) {
        optionals.set(5);
      }
      if (struct.isSetTypicalVal()) {
        optionals.set(6);
      }
      if (struct.isSetValue()) {
        optionals.set(7);
      }
      if (struct.isSetEnumDesc()) {
        optionals.set(8);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetState()) {
        optionals.set(10);
      }
      if (struct.isSetDeviceName()) {
        optionals.set(11);
      }
      if (struct.isSetGroupName()) {
        optionals.set(12);
      }
      if (struct.isSetSourceTag()) {
        optionals.set(13);
      }
      if (struct.isSetUpperLimit()) {
        optionals.set(14);
      }
      if (struct.isSetLowerLimit()) {
        optionals.set(15);
      }
      if (struct.isSetPushreference()) {
        optionals.set(16);
      }
      if (struct.isSetRuleReference()) {
        optionals.set(17);
      }
      if (struct.isSetExceptionMin()) {
        optionals.set(18);
      }
      if (struct.isSetExceptionMax()) {
        optionals.set(19);
      }
      if (struct.isSetExceptionDev()) {
        optionals.set(20);
      }
      if (struct.isSetAlarmType()) {
        optionals.set(21);
      }
      if (struct.isSetAlarmState()) {
        optionals.set(22);
      }
      if (struct.isSetAlarmHi()) {
        optionals.set(23);
      }
      if (struct.isSetAlarmLo()) {
        optionals.set(24);
      }
      if (struct.isSetAlarmHiHi()) {
        optionals.set(25);
      }
      if (struct.isSetAlarmLolo()) {
        optionals.set(26);
      }
      if (struct.isSetHiPriority()) {
        optionals.set(27);
      }
      if (struct.isSetLoPriority()) {
        optionals.set(28);
      }
      if (struct.isSetHihiPriority()) {
        optionals.set(29);
      }
      if (struct.isSetLoloPriority()) {
        optionals.set(30);
      }
      if (struct.isSetIsArchived()) {
        optionals.set(31);
      }
      if (struct.isSetIsCompressed()) {
        optionals.set(32);
      }
      if (struct.isSetInterMethod()) {
        optionals.set(33);
      }
      if (struct.isSetHisIndex()) {
        optionals.set(34);
      }
      if (struct.isSetCompressMin()) {
        optionals.set(35);
      }
      if (struct.isSetCompressMax()) {
        optionals.set(36);
      }
      if (struct.isSetLastValue()) {
        optionals.set(37);
      }
      if (struct.isSetCreationDate()) {
        optionals.set(38);
      }
      oprot.writeBitSet(optionals, 39);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetEngUnit()) {
        oprot.writeString(struct.engUnit);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetIOState()) {
        oprot.writeByte(struct.IOState);
      }
      if (struct.isSetTypicalVal()) {
        oprot.writeDouble(struct.typicalVal);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetEnumDesc()) {
        oprot.writeString(struct.enumDesc);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI32(struct.timestamp);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetSourceTag()) {
        oprot.writeString(struct.sourceTag);
      }
      if (struct.isSetUpperLimit()) {
        oprot.writeDouble(struct.upperLimit);
      }
      if (struct.isSetLowerLimit()) {
        oprot.writeDouble(struct.lowerLimit);
      }
      if (struct.isSetPushreference()) {
        oprot.writeI16(struct.pushreference);
      }
      if (struct.isSetRuleReference()) {
        oprot.writeI16(struct.ruleReference);
      }
      if (struct.isSetExceptionMin()) {
        oprot.writeI32(struct.exceptionMin);
      }
      if (struct.isSetExceptionMax()) {
        oprot.writeI32(struct.exceptionMax);
      }
      if (struct.isSetExceptionDev()) {
        oprot.writeDouble(struct.exceptionDev);
      }
      if (struct.isSetAlarmType()) {
        oprot.writeI16(struct.alarmType);
      }
      if (struct.isSetAlarmState()) {
        oprot.writeI16(struct.alarmState);
      }
      if (struct.isSetAlarmHi()) {
        oprot.writeDouble(struct.alarmHi);
      }
      if (struct.isSetAlarmLo()) {
        oprot.writeDouble(struct.alarmLo);
      }
      if (struct.isSetAlarmHiHi()) {
        oprot.writeDouble(struct.alarmHiHi);
      }
      if (struct.isSetAlarmLolo()) {
        oprot.writeDouble(struct.alarmLolo);
      }
      if (struct.isSetHiPriority()) {
        oprot.writeI16(struct.hiPriority);
      }
      if (struct.isSetLoPriority()) {
        oprot.writeI16(struct.loPriority);
      }
      if (struct.isSetHihiPriority()) {
        oprot.writeI16(struct.hihiPriority);
      }
      if (struct.isSetLoloPriority()) {
        oprot.writeI16(struct.loloPriority);
      }
      if (struct.isSetIsArchived()) {
        oprot.writeBool(struct.isArchived);
      }
      if (struct.isSetIsCompressed()) {
        oprot.writeBool(struct.isCompressed);
      }
      if (struct.isSetInterMethod()) {
        oprot.writeByte(struct.interMethod);
      }
      if (struct.isSetHisIndex()) {
        oprot.writeI32(struct.hisIndex);
      }
      if (struct.isSetCompressMin()) {
        oprot.writeI32(struct.compressMin);
      }
      if (struct.isSetCompressMax()) {
        oprot.writeI32(struct.compressMax);
      }
      if (struct.isSetLastValue()) {
        oprot.writeDouble(struct.lastValue);
      }
      if (struct.isSetCreationDate()) {
        oprot.writeI32(struct.creationDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAGNODE struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(39);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.engUnit = iprot.readString();
        struct.setEngUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.IOState = iprot.readByte();
        struct.setIOStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.typicalVal = iprot.readDouble();
        struct.setTypicalValIsSet(true);
      }
      if (incoming.get(7)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.enumDesc = iprot.readString();
        struct.setEnumDescIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timestamp = iprot.readI32();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sourceTag = iprot.readString();
        struct.setSourceTagIsSet(true);
      }
      if (incoming.get(14)) {
        struct.upperLimit = iprot.readDouble();
        struct.setUpperLimitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lowerLimit = iprot.readDouble();
        struct.setLowerLimitIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pushreference = iprot.readI16();
        struct.setPushreferenceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ruleReference = iprot.readI16();
        struct.setRuleReferenceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.exceptionMin = iprot.readI32();
        struct.setExceptionMinIsSet(true);
      }
      if (incoming.get(19)) {
        struct.exceptionMax = iprot.readI32();
        struct.setExceptionMaxIsSet(true);
      }
      if (incoming.get(20)) {
        struct.exceptionDev = iprot.readDouble();
        struct.setExceptionDevIsSet(true);
      }
      if (incoming.get(21)) {
        struct.alarmType = iprot.readI16();
        struct.setAlarmTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.alarmState = iprot.readI16();
        struct.setAlarmStateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.alarmHi = iprot.readDouble();
        struct.setAlarmHiIsSet(true);
      }
      if (incoming.get(24)) {
        struct.alarmLo = iprot.readDouble();
        struct.setAlarmLoIsSet(true);
      }
      if (incoming.get(25)) {
        struct.alarmHiHi = iprot.readDouble();
        struct.setAlarmHiHiIsSet(true);
      }
      if (incoming.get(26)) {
        struct.alarmLolo = iprot.readDouble();
        struct.setAlarmLoloIsSet(true);
      }
      if (incoming.get(27)) {
        struct.hiPriority = iprot.readI16();
        struct.setHiPriorityIsSet(true);
      }
      if (incoming.get(28)) {
        struct.loPriority = iprot.readI16();
        struct.setLoPriorityIsSet(true);
      }
      if (incoming.get(29)) {
        struct.hihiPriority = iprot.readI16();
        struct.setHihiPriorityIsSet(true);
      }
      if (incoming.get(30)) {
        struct.loloPriority = iprot.readI16();
        struct.setLoloPriorityIsSet(true);
      }
      if (incoming.get(31)) {
        struct.isArchived = iprot.readBool();
        struct.setIsArchivedIsSet(true);
      }
      if (incoming.get(32)) {
        struct.isCompressed = iprot.readBool();
        struct.setIsCompressedIsSet(true);
      }
      if (incoming.get(33)) {
        struct.interMethod = iprot.readByte();
        struct.setInterMethodIsSet(true);
      }
      if (incoming.get(34)) {
        struct.hisIndex = iprot.readI32();
        struct.setHisIndexIsSet(true);
      }
      if (incoming.get(35)) {
        struct.compressMin = iprot.readI32();
        struct.setCompressMinIsSet(true);
      }
      if (incoming.get(36)) {
        struct.compressMax = iprot.readI32();
        struct.setCompressMaxIsSet(true);
      }
      if (incoming.get(37)) {
        struct.lastValue = iprot.readDouble();
        struct.setLastValueIsSet(true);
      }
      if (incoming.get(38)) {
        struct.creationDate = iprot.readI32();
        struct.setCreationDateIsSet(true);
      }
    }
  }

}

