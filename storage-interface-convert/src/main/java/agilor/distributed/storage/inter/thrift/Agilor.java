package agilor.distributed.storage.inter.thrift; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-28")
public class Agilor {

  public interface Iface {

    public void ping() throws TException;

    public void AddDevice(DEVICE device) throws DeviceIsExistException, DeviceMaxException, DeviceInsertException, ParamErrorException, TException;

    public void DeleteDevice(String deviceName) throws DeviceNotFoundException, TException;

    public boolean ModifyDevice(DEVICE device) throws TException;

    public int QueryDeviceInfo() throws TException;

    public DEVICE EnumDeviceInfo(int hRecordset) throws HandleErrorException, TException;

    public List<DEVICE> GetAllDevices() throws TException;

    public int TagCountByDevice(String deviceName) throws DeviceIsExistException, TException;

    public int QuerySnapshots(String tagNames, int tagCount) throws TException;

    public TAGVAL GetNextTagValue(int hRecordset, boolean isRemoved) throws HandleErrorException, TException;

    public int QueryTagHistory(String tagName, int startTime, int endTime, int step) throws TException;

    public TAGVAL GetAggregateValue(int hRecordset, AGGREGATE ag, boolean isRemoved) throws TException;

    public int QueryTagsbyDevice(String deviceName) throws DeviceNotFoundException, TException;

    public String EnumTagName(int hRecordset) throws HandleErrorException, TException;

    public String GetTagNamebyId(int tagId) throws TException;

    public void SetValue(TAGVAL value) throws WriteValueException, TException;

    public void SetValues(List<TAGVAL> values) throws WriteValueException, TException;

    public void RemoveTag(int tagId) throws TException;

    public TAGNODE GetTagInfo(String tagName) throws TException;

    public void AddNewTag(TAGNODE node, boolean isOverwrite) throws WriteValueException, TargetInsertException, DeviceNotFoundException, ParamErrorException, TException;

    public TAGNODE EnumNextTag(int hwnd) throws HandleErrorException, TException;

    public int SubscribeTags(String tagNames, short count) throws TException;

    public TAGVAL GetSubTagValue() throws TException;

    public int UnSubscribeTags(String tagNames, short count) throws TException;

    public int UnSubscribeAll() throws TException;

  }

  public interface AsyncIface {

    public void ping(AsyncMethodCallback resultHandler) throws TException;

    public void AddDevice(DEVICE device, AsyncMethodCallback resultHandler) throws TException;

    public void DeleteDevice(String deviceName, AsyncMethodCallback resultHandler) throws TException;

    public void ModifyDevice(DEVICE device, AsyncMethodCallback resultHandler) throws TException;

    public void QueryDeviceInfo(AsyncMethodCallback resultHandler) throws TException;

    public void EnumDeviceInfo(int hRecordset, AsyncMethodCallback resultHandler) throws TException;

    public void GetAllDevices(AsyncMethodCallback resultHandler) throws TException;

    public void TagCountByDevice(String deviceName, AsyncMethodCallback resultHandler) throws TException;

    public void QuerySnapshots(String tagNames, int tagCount, AsyncMethodCallback resultHandler) throws TException;

    public void GetNextTagValue(int hRecordset, boolean isRemoved, AsyncMethodCallback resultHandler) throws TException;

    public void QueryTagHistory(String tagName, int startTime, int endTime, int step, AsyncMethodCallback resultHandler) throws TException;

    public void GetAggregateValue(int hRecordset, AGGREGATE ag, boolean isRemoved, AsyncMethodCallback resultHandler) throws TException;

    public void QueryTagsbyDevice(String deviceName, AsyncMethodCallback resultHandler) throws TException;

    public void EnumTagName(int hRecordset, AsyncMethodCallback resultHandler) throws TException;

    public void GetTagNamebyId(int tagId, AsyncMethodCallback resultHandler) throws TException;

    public void SetValue(TAGVAL value, AsyncMethodCallback resultHandler) throws TException;

    public void SetValues(List<TAGVAL> values, AsyncMethodCallback resultHandler) throws TException;

    public void RemoveTag(int tagId, AsyncMethodCallback resultHandler) throws TException;

    public void GetTagInfo(String tagName, AsyncMethodCallback resultHandler) throws TException;

    public void AddNewTag(TAGNODE node, boolean isOverwrite, AsyncMethodCallback resultHandler) throws TException;

    public void EnumNextTag(int hwnd, AsyncMethodCallback resultHandler) throws TException;

    public void SubscribeTags(String tagNames, short count, AsyncMethodCallback resultHandler) throws TException;

    public void GetSubTagValue(AsyncMethodCallback resultHandler) throws TException;

    public void UnSubscribeTags(String tagNames, short count, AsyncMethodCallback resultHandler) throws TException;

    public void UnSubscribeAll(AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public void AddDevice(DEVICE device) throws DeviceIsExistException, DeviceMaxException, DeviceInsertException, ParamErrorException, TException
    {
      send_AddDevice(device);
      recv_AddDevice();
    }

    public void send_AddDevice(DEVICE device) throws TException
    {
      AddDevice_args args = new AddDevice_args();
      args.setDevice(device);
      sendBase("AddDevice", args);
    }

    public void recv_AddDevice() throws DeviceIsExistException, DeviceMaxException, DeviceInsertException, ParamErrorException, TException
    {
      AddDevice_result result = new AddDevice_result();
      receiveBase(result, "AddDevice");
      if (result.a != null) {
        throw result.a;
      }
      if (result.b != null) {
        throw result.b;
      }
      if (result.c != null) {
        throw result.c;
      }
      if (result.d != null) {
        throw result.d;
      }
      return;
    }

    public void DeleteDevice(String deviceName) throws DeviceNotFoundException, TException
    {
      send_DeleteDevice(deviceName);
      recv_DeleteDevice();
    }

    public void send_DeleteDevice(String deviceName) throws TException
    {
      DeleteDevice_args args = new DeleteDevice_args();
      args.setDeviceName(deviceName);
      sendBase("DeleteDevice", args);
    }

    public void recv_DeleteDevice() throws DeviceNotFoundException, TException
    {
      DeleteDevice_result result = new DeleteDevice_result();
      receiveBase(result, "DeleteDevice");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public boolean ModifyDevice(DEVICE device) throws TException
    {
      send_ModifyDevice(device);
      return recv_ModifyDevice();
    }

    public void send_ModifyDevice(DEVICE device) throws TException
    {
      ModifyDevice_args args = new ModifyDevice_args();
      args.setDevice(device);
      sendBase("ModifyDevice", args);
    }

    public boolean recv_ModifyDevice() throws TException
    {
      ModifyDevice_result result = new ModifyDevice_result();
      receiveBase(result, "ModifyDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ModifyDevice failed: unknown result");
    }

    public int QueryDeviceInfo() throws TException
    {
      send_QueryDeviceInfo();
      return recv_QueryDeviceInfo();
    }

    public void send_QueryDeviceInfo() throws TException
    {
      QueryDeviceInfo_args args = new QueryDeviceInfo_args();
      sendBase("QueryDeviceInfo", args);
    }

    public int recv_QueryDeviceInfo() throws TException
    {
      QueryDeviceInfo_result result = new QueryDeviceInfo_result();
      receiveBase(result, "QueryDeviceInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QueryDeviceInfo failed: unknown result");
    }

    public DEVICE EnumDeviceInfo(int hRecordset) throws HandleErrorException, TException
    {
      send_EnumDeviceInfo(hRecordset);
      return recv_EnumDeviceInfo();
    }

    public void send_EnumDeviceInfo(int hRecordset) throws TException
    {
      EnumDeviceInfo_args args = new EnumDeviceInfo_args();
      args.setHRecordset(hRecordset);
      sendBase("EnumDeviceInfo", args);
    }

    public DEVICE recv_EnumDeviceInfo() throws HandleErrorException, TException
    {
      EnumDeviceInfo_result result = new EnumDeviceInfo_result();
      receiveBase(result, "EnumDeviceInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EnumDeviceInfo failed: unknown result");
    }

    public List<DEVICE> GetAllDevices() throws TException
    {
      send_GetAllDevices();
      return recv_GetAllDevices();
    }

    public void send_GetAllDevices() throws TException
    {
      GetAllDevices_args args = new GetAllDevices_args();
      sendBase("GetAllDevices", args);
    }

    public List<DEVICE> recv_GetAllDevices() throws TException
    {
      GetAllDevices_result result = new GetAllDevices_result();
      receiveBase(result, "GetAllDevices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllDevices failed: unknown result");
    }

    public int TagCountByDevice(String deviceName) throws DeviceIsExistException, TException
    {
      send_TagCountByDevice(deviceName);
      return recv_TagCountByDevice();
    }

    public void send_TagCountByDevice(String deviceName) throws TException
    {
      TagCountByDevice_args args = new TagCountByDevice_args();
      args.setDeviceName(deviceName);
      sendBase("TagCountByDevice", args);
    }

    public int recv_TagCountByDevice() throws DeviceIsExistException, TException
    {
      TagCountByDevice_result result = new TagCountByDevice_result();
      receiveBase(result, "TagCountByDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TagCountByDevice failed: unknown result");
    }

    public int QuerySnapshots(String tagNames, int tagCount) throws TException
    {
      send_QuerySnapshots(tagNames, tagCount);
      return recv_QuerySnapshots();
    }

    public void send_QuerySnapshots(String tagNames, int tagCount) throws TException
    {
      QuerySnapshots_args args = new QuerySnapshots_args();
      args.setTagNames(tagNames);
      args.setTagCount(tagCount);
      sendBase("QuerySnapshots", args);
    }

    public int recv_QuerySnapshots() throws TException
    {
      QuerySnapshots_result result = new QuerySnapshots_result();
      receiveBase(result, "QuerySnapshots");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QuerySnapshots failed: unknown result");
    }

    public TAGVAL GetNextTagValue(int hRecordset, boolean isRemoved) throws HandleErrorException, TException
    {
      send_GetNextTagValue(hRecordset, isRemoved);
      return recv_GetNextTagValue();
    }

    public void send_GetNextTagValue(int hRecordset, boolean isRemoved) throws TException
    {
      GetNextTagValue_args args = new GetNextTagValue_args();
      args.setHRecordset(hRecordset);
      args.setIsRemoved(isRemoved);
      sendBase("GetNextTagValue", args);
    }

    public TAGVAL recv_GetNextTagValue() throws HandleErrorException, TException
    {
      GetNextTagValue_result result = new GetNextTagValue_result();
      receiveBase(result, "GetNextTagValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNextTagValue failed: unknown result");
    }

    public int QueryTagHistory(String tagName, int startTime, int endTime, int step) throws TException
    {
      send_QueryTagHistory(tagName, startTime, endTime, step);
      return recv_QueryTagHistory();
    }

    public void send_QueryTagHistory(String tagName, int startTime, int endTime, int step) throws TException
    {
      QueryTagHistory_args args = new QueryTagHistory_args();
      args.setTagName(tagName);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setStep(step);
      sendBase("QueryTagHistory", args);
    }

    public int recv_QueryTagHistory() throws TException
    {
      QueryTagHistory_result result = new QueryTagHistory_result();
      receiveBase(result, "QueryTagHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QueryTagHistory failed: unknown result");
    }

    public TAGVAL GetAggregateValue(int hRecordset, AGGREGATE ag, boolean isRemoved) throws TException
    {
      send_GetAggregateValue(hRecordset, ag, isRemoved);
      return recv_GetAggregateValue();
    }

    public void send_GetAggregateValue(int hRecordset, AGGREGATE ag, boolean isRemoved) throws TException
    {
      GetAggregateValue_args args = new GetAggregateValue_args();
      args.setHRecordset(hRecordset);
      args.setAg(ag);
      args.setIsRemoved(isRemoved);
      sendBase("GetAggregateValue", args);
    }

    public TAGVAL recv_GetAggregateValue() throws TException
    {
      GetAggregateValue_result result = new GetAggregateValue_result();
      receiveBase(result, "GetAggregateValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAggregateValue failed: unknown result");
    }

    public int QueryTagsbyDevice(String deviceName) throws DeviceNotFoundException, TException
    {
      send_QueryTagsbyDevice(deviceName);
      return recv_QueryTagsbyDevice();
    }

    public void send_QueryTagsbyDevice(String deviceName) throws TException
    {
      QueryTagsbyDevice_args args = new QueryTagsbyDevice_args();
      args.setDeviceName(deviceName);
      sendBase("QueryTagsbyDevice", args);
    }

    public int recv_QueryTagsbyDevice() throws DeviceNotFoundException, TException
    {
      QueryTagsbyDevice_result result = new QueryTagsbyDevice_result();
      receiveBase(result, "QueryTagsbyDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QueryTagsbyDevice failed: unknown result");
    }

    public String EnumTagName(int hRecordset) throws HandleErrorException, TException
    {
      send_EnumTagName(hRecordset);
      return recv_EnumTagName();
    }

    public void send_EnumTagName(int hRecordset) throws TException
    {
      EnumTagName_args args = new EnumTagName_args();
      args.setHRecordset(hRecordset);
      sendBase("EnumTagName", args);
    }

    public String recv_EnumTagName() throws HandleErrorException, TException
    {
      EnumTagName_result result = new EnumTagName_result();
      receiveBase(result, "EnumTagName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EnumTagName failed: unknown result");
    }

    public String GetTagNamebyId(int tagId) throws TException
    {
      send_GetTagNamebyId(tagId);
      return recv_GetTagNamebyId();
    }

    public void send_GetTagNamebyId(int tagId) throws TException
    {
      GetTagNamebyId_args args = new GetTagNamebyId_args();
      args.setTagId(tagId);
      sendBase("GetTagNamebyId", args);
    }

    public String recv_GetTagNamebyId() throws TException
    {
      GetTagNamebyId_result result = new GetTagNamebyId_result();
      receiveBase(result, "GetTagNamebyId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetTagNamebyId failed: unknown result");
    }

    public void SetValue(TAGVAL value) throws WriteValueException, TException
    {
      send_SetValue(value);
      recv_SetValue();
    }

    public void send_SetValue(TAGVAL value) throws TException
    {
      SetValue_args args = new SetValue_args();
      args.setValue(value);
      sendBase("SetValue", args);
    }

    public void recv_SetValue() throws WriteValueException, TException
    {
      SetValue_result result = new SetValue_result();
      receiveBase(result, "SetValue");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void SetValues(List<TAGVAL> values) throws WriteValueException, TException
    {
      send_SetValues(values);
      recv_SetValues();
    }

    public void send_SetValues(List<TAGVAL> values) throws TException
    {
      SetValues_args args = new SetValues_args();
      args.setValues(values);
      sendBase("SetValues", args);
    }

    public void recv_SetValues() throws WriteValueException, TException
    {
      SetValues_result result = new SetValues_result();
      receiveBase(result, "SetValues");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void RemoveTag(int tagId) throws TException
    {
      send_RemoveTag(tagId);
      recv_RemoveTag();
    }

    public void send_RemoveTag(int tagId) throws TException
    {
      RemoveTag_args args = new RemoveTag_args();
      args.setTagId(tagId);
      sendBase("RemoveTag", args);
    }

    public void recv_RemoveTag() throws TException
    {
      RemoveTag_result result = new RemoveTag_result();
      receiveBase(result, "RemoveTag");
      return;
    }

    public TAGNODE GetTagInfo(String tagName) throws TException
    {
      send_GetTagInfo(tagName);
      return recv_GetTagInfo();
    }

    public void send_GetTagInfo(String tagName) throws TException
    {
      GetTagInfo_args args = new GetTagInfo_args();
      args.setTagName(tagName);
      sendBase("GetTagInfo", args);
    }

    public TAGNODE recv_GetTagInfo() throws TException
    {
      GetTagInfo_result result = new GetTagInfo_result();
      receiveBase(result, "GetTagInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetTagInfo failed: unknown result");
    }

    public void AddNewTag(TAGNODE node, boolean isOverwrite) throws WriteValueException, TargetInsertException, DeviceNotFoundException, ParamErrorException, TException
    {
      send_AddNewTag(node, isOverwrite);
      recv_AddNewTag();
    }

    public void send_AddNewTag(TAGNODE node, boolean isOverwrite) throws TException
    {
      AddNewTag_args args = new AddNewTag_args();
      args.setNode(node);
      args.setIsOverwrite(isOverwrite);
      sendBase("AddNewTag", args);
    }

    public void recv_AddNewTag() throws WriteValueException, TargetInsertException, DeviceNotFoundException, ParamErrorException, TException
    {
      AddNewTag_result result = new AddNewTag_result();
      receiveBase(result, "AddNewTag");
      if (result.a != null) {
        throw result.a;
      }
      if (result.b != null) {
        throw result.b;
      }
      if (result.c != null) {
        throw result.c;
      }
      if (result.d != null) {
        throw result.d;
      }
      return;
    }

    public TAGNODE EnumNextTag(int hwnd) throws HandleErrorException, TException
    {
      send_EnumNextTag(hwnd);
      return recv_EnumNextTag();
    }

    public void send_EnumNextTag(int hwnd) throws TException
    {
      EnumNextTag_args args = new EnumNextTag_args();
      args.setHwnd(hwnd);
      sendBase("EnumNextTag", args);
    }

    public TAGNODE recv_EnumNextTag() throws HandleErrorException, TException
    {
      EnumNextTag_result result = new EnumNextTag_result();
      receiveBase(result, "EnumNextTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EnumNextTag failed: unknown result");
    }

    public int SubscribeTags(String tagNames, short count) throws TException
    {
      send_SubscribeTags(tagNames, count);
      return recv_SubscribeTags();
    }

    public void send_SubscribeTags(String tagNames, short count) throws TException
    {
      SubscribeTags_args args = new SubscribeTags_args();
      args.setTagNames(tagNames);
      args.setCount(count);
      sendBase("SubscribeTags", args);
    }

    public int recv_SubscribeTags() throws TException
    {
      SubscribeTags_result result = new SubscribeTags_result();
      receiveBase(result, "SubscribeTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SubscribeTags failed: unknown result");
    }

    public TAGVAL GetSubTagValue() throws TException
    {
      send_GetSubTagValue();
      return recv_GetSubTagValue();
    }

    public void send_GetSubTagValue() throws TException
    {
      GetSubTagValue_args args = new GetSubTagValue_args();
      sendBase("GetSubTagValue", args);
    }

    public TAGVAL recv_GetSubTagValue() throws TException
    {
      GetSubTagValue_result result = new GetSubTagValue_result();
      receiveBase(result, "GetSubTagValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSubTagValue failed: unknown result");
    }

    public int UnSubscribeTags(String tagNames, short count) throws TException
    {
      send_UnSubscribeTags(tagNames, count);
      return recv_UnSubscribeTags();
    }

    public void send_UnSubscribeTags(String tagNames, short count) throws TException
    {
      UnSubscribeTags_args args = new UnSubscribeTags_args();
      args.setTagNames(tagNames);
      args.setCount(count);
      sendBase("UnSubscribeTags", args);
    }

    public int recv_UnSubscribeTags() throws TException
    {
      UnSubscribeTags_result result = new UnSubscribeTags_result();
      receiveBase(result, "UnSubscribeTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UnSubscribeTags failed: unknown result");
    }

    public int UnSubscribeAll() throws TException
    {
      send_UnSubscribeAll();
      return recv_UnSubscribeAll();
    }

    public void send_UnSubscribeAll() throws TException
    {
      UnSubscribeAll_args args = new UnSubscribeAll_args();
      sendBase("UnSubscribeAll", args);
    }

    public int recv_UnSubscribeAll() throws TException
    {
      UnSubscribeAll_result result = new UnSubscribeAll_result();
      receiveBase(result, "UnSubscribeAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UnSubscribeAll failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void AddDevice(DEVICE device, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      AddDevice_call method_call = new AddDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DEVICE device;
      public AddDevice_call(DEVICE device, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddDevice_args args = new AddDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeviceIsExistException, DeviceMaxException, DeviceInsertException, ParamErrorException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_AddDevice();
      }
    }

    public void DeleteDevice(String deviceName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      DeleteDevice_call method_call = new DeleteDevice_call(deviceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceName;
      public DeleteDevice_call(String deviceName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceName = deviceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteDevice_args args = new DeleteDevice_args();
        args.setDeviceName(deviceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeviceNotFoundException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteDevice();
      }
    }

    public void ModifyDevice(DEVICE device, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      ModifyDevice_call method_call = new ModifyDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ModifyDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DEVICE device;
      public ModifyDevice_call(DEVICE device, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ModifyDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ModifyDevice_args args = new ModifyDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ModifyDevice();
      }
    }

    public void QueryDeviceInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      QueryDeviceInfo_call method_call = new QueryDeviceInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryDeviceInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public QueryDeviceInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryDeviceInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QueryDeviceInfo_args args = new QueryDeviceInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QueryDeviceInfo();
      }
    }

    public void EnumDeviceInfo(int hRecordset, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      EnumDeviceInfo_call method_call = new EnumDeviceInfo_call(hRecordset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EnumDeviceInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hRecordset;
      public EnumDeviceInfo_call(int hRecordset, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hRecordset = hRecordset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EnumDeviceInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EnumDeviceInfo_args args = new EnumDeviceInfo_args();
        args.setHRecordset(hRecordset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DEVICE getResult() throws HandleErrorException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EnumDeviceInfo();
      }
    }

    public void GetAllDevices(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetAllDevices_call method_call = new GetAllDevices_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllDevices_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAllDevices_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllDevices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllDevices_args args = new GetAllDevices_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DEVICE> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllDevices();
      }
    }

    public void TagCountByDevice(String deviceName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      TagCountByDevice_call method_call = new TagCountByDevice_call(deviceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TagCountByDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceName;
      public TagCountByDevice_call(String deviceName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceName = deviceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TagCountByDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TagCountByDevice_args args = new TagCountByDevice_args();
        args.setDeviceName(deviceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws DeviceIsExistException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TagCountByDevice();
      }
    }

    public void QuerySnapshots(String tagNames, int tagCount, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      QuerySnapshots_call method_call = new QuerySnapshots_call(tagNames, tagCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QuerySnapshots_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagNames;
      private int tagCount;
      public QuerySnapshots_call(String tagNames, int tagCount, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagNames = tagNames;
        this.tagCount = tagCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QuerySnapshots", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QuerySnapshots_args args = new QuerySnapshots_args();
        args.setTagNames(tagNames);
        args.setTagCount(tagCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QuerySnapshots();
      }
    }

    public void GetNextTagValue(int hRecordset, boolean isRemoved, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetNextTagValue_call method_call = new GetNextTagValue_call(hRecordset, isRemoved, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNextTagValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hRecordset;
      private boolean isRemoved;
      public GetNextTagValue_call(int hRecordset, boolean isRemoved, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hRecordset = hRecordset;
        this.isRemoved = isRemoved;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNextTagValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNextTagValue_args args = new GetNextTagValue_args();
        args.setHRecordset(hRecordset);
        args.setIsRemoved(isRemoved);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAGVAL getResult() throws HandleErrorException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNextTagValue();
      }
    }

    public void QueryTagHistory(String tagName, int startTime, int endTime, int step, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      QueryTagHistory_call method_call = new QueryTagHistory_call(tagName, startTime, endTime, step, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryTagHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagName;
      private int startTime;
      private int endTime;
      private int step;
      public QueryTagHistory_call(String tagName, int startTime, int endTime, int step, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagName = tagName;
        this.startTime = startTime;
        this.endTime = endTime;
        this.step = step;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryTagHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QueryTagHistory_args args = new QueryTagHistory_args();
        args.setTagName(tagName);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setStep(step);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QueryTagHistory();
      }
    }

    public void GetAggregateValue(int hRecordset, AGGREGATE ag, boolean isRemoved, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetAggregateValue_call method_call = new GetAggregateValue_call(hRecordset, ag, isRemoved, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAggregateValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hRecordset;
      private AGGREGATE ag;
      private boolean isRemoved;
      public GetAggregateValue_call(int hRecordset, AGGREGATE ag, boolean isRemoved, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hRecordset = hRecordset;
        this.ag = ag;
        this.isRemoved = isRemoved;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAggregateValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAggregateValue_args args = new GetAggregateValue_args();
        args.setHRecordset(hRecordset);
        args.setAg(ag);
        args.setIsRemoved(isRemoved);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAGVAL getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAggregateValue();
      }
    }

    public void QueryTagsbyDevice(String deviceName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      QueryTagsbyDevice_call method_call = new QueryTagsbyDevice_call(deviceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryTagsbyDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceName;
      public QueryTagsbyDevice_call(String deviceName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceName = deviceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryTagsbyDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QueryTagsbyDevice_args args = new QueryTagsbyDevice_args();
        args.setDeviceName(deviceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws DeviceNotFoundException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QueryTagsbyDevice();
      }
    }

    public void EnumTagName(int hRecordset, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      EnumTagName_call method_call = new EnumTagName_call(hRecordset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EnumTagName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hRecordset;
      public EnumTagName_call(int hRecordset, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hRecordset = hRecordset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EnumTagName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EnumTagName_args args = new EnumTagName_args();
        args.setHRecordset(hRecordset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HandleErrorException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EnumTagName();
      }
    }

    public void GetTagNamebyId(int tagId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetTagNamebyId_call method_call = new GetTagNamebyId_call(tagId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetTagNamebyId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tagId;
      public GetTagNamebyId_call(int tagId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagId = tagId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTagNamebyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetTagNamebyId_args args = new GetTagNamebyId_args();
        args.setTagId(tagId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetTagNamebyId();
      }
    }

    public void SetValue(TAGVAL value, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      SetValue_call method_call = new SetValue_call(value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAGVAL value;
      public SetValue_call(TAGVAL value, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_args args = new SetValue_args();
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws WriteValueException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetValue();
      }
    }

    public void SetValues(List<TAGVAL> values, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      SetValues_call method_call = new SetValues_call(values, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TAGVAL> values;
      public SetValues_call(List<TAGVAL> values, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.values = values;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValues_args args = new SetValues_args();
        args.setValues(values);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws WriteValueException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetValues();
      }
    }

    public void RemoveTag(int tagId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      RemoveTag_call method_call = new RemoveTag_call(tagId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tagId;
      public RemoveTag_call(int tagId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagId = tagId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveTag_args args = new RemoveTag_args();
        args.setTagId(tagId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RemoveTag();
      }
    }

    public void GetTagInfo(String tagName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetTagInfo_call method_call = new GetTagInfo_call(tagName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetTagInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagName;
      public GetTagInfo_call(String tagName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagName = tagName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTagInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetTagInfo_args args = new GetTagInfo_args();
        args.setTagName(tagName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAGNODE getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetTagInfo();
      }
    }

    public void AddNewTag(TAGNODE node, boolean isOverwrite, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      AddNewTag_call method_call = new AddNewTag_call(node, isOverwrite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddNewTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAGNODE node;
      private boolean isOverwrite;
      public AddNewTag_call(TAGNODE node, boolean isOverwrite, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.node = node;
        this.isOverwrite = isOverwrite;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddNewTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddNewTag_args args = new AddNewTag_args();
        args.setNode(node);
        args.setIsOverwrite(isOverwrite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws WriteValueException, TargetInsertException, DeviceNotFoundException, ParamErrorException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_AddNewTag();
      }
    }

    public void EnumNextTag(int hwnd, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      EnumNextTag_call method_call = new EnumNextTag_call(hwnd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EnumNextTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hwnd;
      public EnumNextTag_call(int hwnd, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hwnd = hwnd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EnumNextTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EnumNextTag_args args = new EnumNextTag_args();
        args.setHwnd(hwnd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAGNODE getResult() throws HandleErrorException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EnumNextTag();
      }
    }

    public void SubscribeTags(String tagNames, short count, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      SubscribeTags_call method_call = new SubscribeTags_call(tagNames, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SubscribeTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagNames;
      private short count;
      public SubscribeTags_call(String tagNames, short count, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagNames = tagNames;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SubscribeTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SubscribeTags_args args = new SubscribeTags_args();
        args.setTagNames(tagNames);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SubscribeTags();
      }
    }

    public void GetSubTagValue(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetSubTagValue_call method_call = new GetSubTagValue_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSubTagValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetSubTagValue_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSubTagValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSubTagValue_args args = new GetSubTagValue_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAGVAL getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSubTagValue();
      }
    }

    public void UnSubscribeTags(String tagNames, short count, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      UnSubscribeTags_call method_call = new UnSubscribeTags_call(tagNames, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UnSubscribeTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagNames;
      private short count;
      public UnSubscribeTags_call(String tagNames, short count, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagNames = tagNames;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnSubscribeTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UnSubscribeTags_args args = new UnSubscribeTags_args();
        args.setTagNames(tagNames);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UnSubscribeTags();
      }
    }

    public void UnSubscribeAll(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      UnSubscribeAll_call method_call = new UnSubscribeAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UnSubscribeAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      public UnSubscribeAll_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnSubscribeAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UnSubscribeAll_args args = new UnSubscribeAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UnSubscribeAll();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("AddDevice", new AddDevice());
      processMap.put("DeleteDevice", new DeleteDevice());
      processMap.put("ModifyDevice", new ModifyDevice());
      processMap.put("QueryDeviceInfo", new QueryDeviceInfo());
      processMap.put("EnumDeviceInfo", new EnumDeviceInfo());
      processMap.put("GetAllDevices", new GetAllDevices());
      processMap.put("TagCountByDevice", new TagCountByDevice());
      processMap.put("QuerySnapshots", new QuerySnapshots());
      processMap.put("GetNextTagValue", new GetNextTagValue());
      processMap.put("QueryTagHistory", new QueryTagHistory());
      processMap.put("GetAggregateValue", new GetAggregateValue());
      processMap.put("QueryTagsbyDevice", new QueryTagsbyDevice());
      processMap.put("EnumTagName", new EnumTagName());
      processMap.put("GetTagNamebyId", new GetTagNamebyId());
      processMap.put("SetValue", new SetValue());
      processMap.put("SetValues", new SetValues());
      processMap.put("RemoveTag", new RemoveTag());
      processMap.put("GetTagInfo", new GetTagInfo());
      processMap.put("AddNewTag", new AddNewTag());
      processMap.put("EnumNextTag", new EnumNextTag());
      processMap.put("SubscribeTags", new SubscribeTags());
      processMap.put("GetSubTagValue", new GetSubTagValue());
      processMap.put("UnSubscribeTags", new UnSubscribeTags());
      processMap.put("UnSubscribeAll", new UnSubscribeAll());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class AddDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddDevice_args> {
      public AddDevice() {
        super("AddDevice");
      }

      public AddDevice_args getEmptyArgsInstance() {
        return new AddDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddDevice_result getResult(I iface, AddDevice_args args) throws TException {
        AddDevice_result result = new AddDevice_result();
        try {
          iface.AddDevice(args.device);
        } catch (DeviceIsExistException a) {
          result.a = a;
        } catch (DeviceMaxException b) {
          result.b = b;
        } catch (DeviceInsertException c) {
          result.c = c;
        } catch (ParamErrorException d) {
          result.d = d;
        }
        return result;
      }
    }

    public static class DeleteDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteDevice_args> {
      public DeleteDevice() {
        super("DeleteDevice");
      }

      public DeleteDevice_args getEmptyArgsInstance() {
        return new DeleteDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteDevice_result getResult(I iface, DeleteDevice_args args) throws TException {
        DeleteDevice_result result = new DeleteDevice_result();
        try {
          iface.DeleteDevice(args.deviceName);
        } catch (DeviceNotFoundException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ModifyDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ModifyDevice_args> {
      public ModifyDevice() {
        super("ModifyDevice");
      }

      public ModifyDevice_args getEmptyArgsInstance() {
        return new ModifyDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ModifyDevice_result getResult(I iface, ModifyDevice_args args) throws TException {
        ModifyDevice_result result = new ModifyDevice_result();
        result.success = iface.ModifyDevice(args.device);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class QueryDeviceInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryDeviceInfo_args> {
      public QueryDeviceInfo() {
        super("QueryDeviceInfo");
      }

      public QueryDeviceInfo_args getEmptyArgsInstance() {
        return new QueryDeviceInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QueryDeviceInfo_result getResult(I iface, QueryDeviceInfo_args args) throws TException {
        QueryDeviceInfo_result result = new QueryDeviceInfo_result();
        result.success = iface.QueryDeviceInfo();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class EnumDeviceInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EnumDeviceInfo_args> {
      public EnumDeviceInfo() {
        super("EnumDeviceInfo");
      }

      public EnumDeviceInfo_args getEmptyArgsInstance() {
        return new EnumDeviceInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public EnumDeviceInfo_result getResult(I iface, EnumDeviceInfo_args args) throws TException {
        EnumDeviceInfo_result result = new EnumDeviceInfo_result();
        try {
          result.success = iface.EnumDeviceInfo(args.hRecordset);
        } catch (HandleErrorException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetAllDevices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllDevices_args> {
      public GetAllDevices() {
        super("GetAllDevices");
      }

      public GetAllDevices_args getEmptyArgsInstance() {
        return new GetAllDevices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAllDevices_result getResult(I iface, GetAllDevices_args args) throws TException {
        GetAllDevices_result result = new GetAllDevices_result();
        result.success = iface.GetAllDevices();
        return result;
      }
    }

    public static class TagCountByDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TagCountByDevice_args> {
      public TagCountByDevice() {
        super("TagCountByDevice");
      }

      public TagCountByDevice_args getEmptyArgsInstance() {
        return new TagCountByDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public TagCountByDevice_result getResult(I iface, TagCountByDevice_args args) throws TException {
        TagCountByDevice_result result = new TagCountByDevice_result();
        try {
          result.success = iface.TagCountByDevice(args.deviceName);
          result.setSuccessIsSet(true);
        } catch (DeviceIsExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class QuerySnapshots<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QuerySnapshots_args> {
      public QuerySnapshots() {
        super("QuerySnapshots");
      }

      public QuerySnapshots_args getEmptyArgsInstance() {
        return new QuerySnapshots_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QuerySnapshots_result getResult(I iface, QuerySnapshots_args args) throws TException {
        QuerySnapshots_result result = new QuerySnapshots_result();
        result.success = iface.QuerySnapshots(args.tagNames, args.tagCount);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class GetNextTagValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNextTagValue_args> {
      public GetNextTagValue() {
        super("GetNextTagValue");
      }

      public GetNextTagValue_args getEmptyArgsInstance() {
        return new GetNextTagValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetNextTagValue_result getResult(I iface, GetNextTagValue_args args) throws TException {
        GetNextTagValue_result result = new GetNextTagValue_result();
        try {
          result.success = iface.GetNextTagValue(args.hRecordset, args.isRemoved);
        } catch (HandleErrorException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class QueryTagHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryTagHistory_args> {
      public QueryTagHistory() {
        super("QueryTagHistory");
      }

      public QueryTagHistory_args getEmptyArgsInstance() {
        return new QueryTagHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QueryTagHistory_result getResult(I iface, QueryTagHistory_args args) throws TException {
        QueryTagHistory_result result = new QueryTagHistory_result();
        result.success = iface.QueryTagHistory(args.tagName, args.startTime, args.endTime, args.step);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class GetAggregateValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAggregateValue_args> {
      public GetAggregateValue() {
        super("GetAggregateValue");
      }

      public GetAggregateValue_args getEmptyArgsInstance() {
        return new GetAggregateValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAggregateValue_result getResult(I iface, GetAggregateValue_args args) throws TException {
        GetAggregateValue_result result = new GetAggregateValue_result();
        result.success = iface.GetAggregateValue(args.hRecordset, args.ag, args.isRemoved);
        return result;
      }
    }

    public static class QueryTagsbyDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryTagsbyDevice_args> {
      public QueryTagsbyDevice() {
        super("QueryTagsbyDevice");
      }

      public QueryTagsbyDevice_args getEmptyArgsInstance() {
        return new QueryTagsbyDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QueryTagsbyDevice_result getResult(I iface, QueryTagsbyDevice_args args) throws TException {
        QueryTagsbyDevice_result result = new QueryTagsbyDevice_result();
        try {
          result.success = iface.QueryTagsbyDevice(args.deviceName);
          result.setSuccessIsSet(true);
        } catch (DeviceNotFoundException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class EnumTagName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EnumTagName_args> {
      public EnumTagName() {
        super("EnumTagName");
      }

      public EnumTagName_args getEmptyArgsInstance() {
        return new EnumTagName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public EnumTagName_result getResult(I iface, EnumTagName_args args) throws TException {
        EnumTagName_result result = new EnumTagName_result();
        try {
          result.success = iface.EnumTagName(args.hRecordset);
        } catch (HandleErrorException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetTagNamebyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetTagNamebyId_args> {
      public GetTagNamebyId() {
        super("GetTagNamebyId");
      }

      public GetTagNamebyId_args getEmptyArgsInstance() {
        return new GetTagNamebyId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetTagNamebyId_result getResult(I iface, GetTagNamebyId_args args) throws TException {
        GetTagNamebyId_result result = new GetTagNamebyId_result();
        result.success = iface.GetTagNamebyId(args.tagId);
        return result;
      }
    }

    public static class SetValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_args> {
      public SetValue() {
        super("SetValue");
      }

      public SetValue_args getEmptyArgsInstance() {
        return new SetValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SetValue_result getResult(I iface, SetValue_args args) throws TException {
        SetValue_result result = new SetValue_result();
        try {
          iface.SetValue(args.value);
        } catch (WriteValueException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class SetValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValues_args> {
      public SetValues() {
        super("SetValues");
      }

      public SetValues_args getEmptyArgsInstance() {
        return new SetValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SetValues_result getResult(I iface, SetValues_args args) throws TException {
        SetValues_result result = new SetValues_result();
        try {
          iface.SetValues(args.values);
        } catch (WriteValueException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class RemoveTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveTag_args> {
      public RemoveTag() {
        super("RemoveTag");
      }

      public RemoveTag_args getEmptyArgsInstance() {
        return new RemoveTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RemoveTag_result getResult(I iface, RemoveTag_args args) throws TException {
        RemoveTag_result result = new RemoveTag_result();
        iface.RemoveTag(args.tagId);
        return result;
      }
    }

    public static class GetTagInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetTagInfo_args> {
      public GetTagInfo() {
        super("GetTagInfo");
      }

      public GetTagInfo_args getEmptyArgsInstance() {
        return new GetTagInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetTagInfo_result getResult(I iface, GetTagInfo_args args) throws TException {
        GetTagInfo_result result = new GetTagInfo_result();
        result.success = iface.GetTagInfo(args.tagName);
        return result;
      }
    }

    public static class AddNewTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddNewTag_args> {
      public AddNewTag() {
        super("AddNewTag");
      }

      public AddNewTag_args getEmptyArgsInstance() {
        return new AddNewTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddNewTag_result getResult(I iface, AddNewTag_args args) throws TException {
        AddNewTag_result result = new AddNewTag_result();
        try {
          iface.AddNewTag(args.node, args.isOverwrite);
        } catch (WriteValueException a) {
          result.a = a;
        } catch (TargetInsertException b) {
          result.b = b;
        } catch (DeviceNotFoundException c) {
          result.c = c;
        } catch (ParamErrorException d) {
          result.d = d;
        }
        return result;
      }
    }

    public static class EnumNextTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EnumNextTag_args> {
      public EnumNextTag() {
        super("EnumNextTag");
      }

      public EnumNextTag_args getEmptyArgsInstance() {
        return new EnumNextTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public EnumNextTag_result getResult(I iface, EnumNextTag_args args) throws TException {
        EnumNextTag_result result = new EnumNextTag_result();
        try {
          result.success = iface.EnumNextTag(args.hwnd);
        } catch (HandleErrorException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class SubscribeTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SubscribeTags_args> {
      public SubscribeTags() {
        super("SubscribeTags");
      }

      public SubscribeTags_args getEmptyArgsInstance() {
        return new SubscribeTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SubscribeTags_result getResult(I iface, SubscribeTags_args args) throws TException {
        SubscribeTags_result result = new SubscribeTags_result();
        result.success = iface.SubscribeTags(args.tagNames, args.count);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class GetSubTagValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSubTagValue_args> {
      public GetSubTagValue() {
        super("GetSubTagValue");
      }

      public GetSubTagValue_args getEmptyArgsInstance() {
        return new GetSubTagValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSubTagValue_result getResult(I iface, GetSubTagValue_args args) throws TException {
        GetSubTagValue_result result = new GetSubTagValue_result();
        result.success = iface.GetSubTagValue();
        return result;
      }
    }

    public static class UnSubscribeTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UnSubscribeTags_args> {
      public UnSubscribeTags() {
        super("UnSubscribeTags");
      }

      public UnSubscribeTags_args getEmptyArgsInstance() {
        return new UnSubscribeTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UnSubscribeTags_result getResult(I iface, UnSubscribeTags_args args) throws TException {
        UnSubscribeTags_result result = new UnSubscribeTags_result();
        result.success = iface.UnSubscribeTags(args.tagNames, args.count);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UnSubscribeAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UnSubscribeAll_args> {
      public UnSubscribeAll() {
        super("UnSubscribeAll");
      }

      public UnSubscribeAll_args getEmptyArgsInstance() {
        return new UnSubscribeAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UnSubscribeAll_result getResult(I iface, UnSubscribeAll_args args) throws TException {
        UnSubscribeAll_result result = new UnSubscribeAll_result();
        result.success = iface.UnSubscribeAll();
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("AddDevice", new AddDevice());
      processMap.put("DeleteDevice", new DeleteDevice());
      processMap.put("ModifyDevice", new ModifyDevice());
      processMap.put("QueryDeviceInfo", new QueryDeviceInfo());
      processMap.put("EnumDeviceInfo", new EnumDeviceInfo());
      processMap.put("GetAllDevices", new GetAllDevices());
      processMap.put("TagCountByDevice", new TagCountByDevice());
      processMap.put("QuerySnapshots", new QuerySnapshots());
      processMap.put("GetNextTagValue", new GetNextTagValue());
      processMap.put("QueryTagHistory", new QueryTagHistory());
      processMap.put("GetAggregateValue", new GetAggregateValue());
      processMap.put("QueryTagsbyDevice", new QueryTagsbyDevice());
      processMap.put("EnumTagName", new EnumTagName());
      processMap.put("GetTagNamebyId", new GetTagNamebyId());
      processMap.put("SetValue", new SetValue());
      processMap.put("SetValues", new SetValues());
      processMap.put("RemoveTag", new RemoveTag());
      processMap.put("GetTagInfo", new GetTagInfo());
      processMap.put("AddNewTag", new AddNewTag());
      processMap.put("EnumNextTag", new EnumNextTag());
      processMap.put("SubscribeTags", new SubscribeTags());
      processMap.put("GetSubTagValue", new GetSubTagValue());
      processMap.put("UnSubscribeTags", new UnSubscribeTags());
      processMap.put("UnSubscribeAll", new UnSubscribeAll());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class AddDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddDevice_args, Void> {
      public AddDevice() {
        super("AddDevice");
      }

      public AddDevice_args getEmptyArgsInstance() {
        return new AddDevice_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            AddDevice_result result = new AddDevice_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AddDevice_result result = new AddDevice_result();
            if (e instanceof DeviceIsExistException) {
                        result.a = (DeviceIsExistException) e;
                        result.setAIsSet(true);
                        msg = result;
            }
            else             if (e instanceof DeviceMaxException) {
                        result.b = (DeviceMaxException) e;
                        result.setBIsSet(true);
                        msg = result;
            }
            else             if (e instanceof DeviceInsertException) {
                        result.c = (DeviceInsertException) e;
                        result.setCIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ParamErrorException) {
                        result.d = (ParamErrorException) e;
                        result.setDIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddDevice_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.AddDevice(args.device,resultHandler);
      }
    }

    public static class DeleteDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteDevice_args, Void> {
      public DeleteDevice() {
        super("DeleteDevice");
      }

      public DeleteDevice_args getEmptyArgsInstance() {
        return new DeleteDevice_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteDevice_result result = new DeleteDevice_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteDevice_result result = new DeleteDevice_result();
            if (e instanceof DeviceNotFoundException) {
                        result.e = (DeviceNotFoundException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteDevice_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteDevice(args.deviceName,resultHandler);
      }
    }

    public static class ModifyDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ModifyDevice_args, Boolean> {
      public ModifyDevice() {
        super("ModifyDevice");
      }

      public ModifyDevice_args getEmptyArgsInstance() {
        return new ModifyDevice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ModifyDevice_result result = new ModifyDevice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ModifyDevice_result result = new ModifyDevice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ModifyDevice_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ModifyDevice(args.device,resultHandler);
      }
    }

    public static class QueryDeviceInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryDeviceInfo_args, Integer> {
      public QueryDeviceInfo() {
        super("QueryDeviceInfo");
      }

      public QueryDeviceInfo_args getEmptyArgsInstance() {
        return new QueryDeviceInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            QueryDeviceInfo_result result = new QueryDeviceInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            QueryDeviceInfo_result result = new QueryDeviceInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QueryDeviceInfo_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.QueryDeviceInfo(resultHandler);
      }
    }

    public static class EnumDeviceInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, EnumDeviceInfo_args, DEVICE> {
      public EnumDeviceInfo() {
        super("EnumDeviceInfo");
      }

      public EnumDeviceInfo_args getEmptyArgsInstance() {
        return new EnumDeviceInfo_args();
      }

      public AsyncMethodCallback<DEVICE> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DEVICE>() { 
          public void onComplete(DEVICE o) {
            EnumDeviceInfo_result result = new EnumDeviceInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            EnumDeviceInfo_result result = new EnumDeviceInfo_result();
            if (e instanceof HandleErrorException) {
                        result.e = (HandleErrorException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, EnumDeviceInfo_args args, AsyncMethodCallback<DEVICE> resultHandler) throws TException {
        iface.EnumDeviceInfo(args.hRecordset,resultHandler);
      }
    }

    public static class GetAllDevices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAllDevices_args, List<DEVICE>> {
      public GetAllDevices() {
        super("GetAllDevices");
      }

      public GetAllDevices_args getEmptyArgsInstance() {
        return new GetAllDevices_args();
      }

      public AsyncMethodCallback<List<DEVICE>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DEVICE>>() { 
          public void onComplete(List<DEVICE> o) {
            GetAllDevices_result result = new GetAllDevices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAllDevices_result result = new GetAllDevices_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAllDevices_args args, AsyncMethodCallback<List<DEVICE>> resultHandler) throws TException {
        iface.GetAllDevices(resultHandler);
      }
    }

    public static class TagCountByDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TagCountByDevice_args, Integer> {
      public TagCountByDevice() {
        super("TagCountByDevice");
      }

      public TagCountByDevice_args getEmptyArgsInstance() {
        return new TagCountByDevice_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            TagCountByDevice_result result = new TagCountByDevice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            TagCountByDevice_result result = new TagCountByDevice_result();
            if (e instanceof DeviceIsExistException) {
                        result.e = (DeviceIsExistException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TagCountByDevice_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.TagCountByDevice(args.deviceName,resultHandler);
      }
    }

    public static class QuerySnapshots<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QuerySnapshots_args, Integer> {
      public QuerySnapshots() {
        super("QuerySnapshots");
      }

      public QuerySnapshots_args getEmptyArgsInstance() {
        return new QuerySnapshots_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            QuerySnapshots_result result = new QuerySnapshots_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            QuerySnapshots_result result = new QuerySnapshots_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QuerySnapshots_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.QuerySnapshots(args.tagNames, args.tagCount,resultHandler);
      }
    }

    public static class GetNextTagValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetNextTagValue_args, TAGVAL> {
      public GetNextTagValue() {
        super("GetNextTagValue");
      }

      public GetNextTagValue_args getEmptyArgsInstance() {
        return new GetNextTagValue_args();
      }

      public AsyncMethodCallback<TAGVAL> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TAGVAL>() { 
          public void onComplete(TAGVAL o) {
            GetNextTagValue_result result = new GetNextTagValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetNextTagValue_result result = new GetNextTagValue_result();
            if (e instanceof HandleErrorException) {
                        result.e = (HandleErrorException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetNextTagValue_args args, AsyncMethodCallback<TAGVAL> resultHandler) throws TException {
        iface.GetNextTagValue(args.hRecordset, args.isRemoved,resultHandler);
      }
    }

    public static class QueryTagHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryTagHistory_args, Integer> {
      public QueryTagHistory() {
        super("QueryTagHistory");
      }

      public QueryTagHistory_args getEmptyArgsInstance() {
        return new QueryTagHistory_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            QueryTagHistory_result result = new QueryTagHistory_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            QueryTagHistory_result result = new QueryTagHistory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QueryTagHistory_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.QueryTagHistory(args.tagName, args.startTime, args.endTime, args.step,resultHandler);
      }
    }

    public static class GetAggregateValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAggregateValue_args, TAGVAL> {
      public GetAggregateValue() {
        super("GetAggregateValue");
      }

      public GetAggregateValue_args getEmptyArgsInstance() {
        return new GetAggregateValue_args();
      }

      public AsyncMethodCallback<TAGVAL> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TAGVAL>() { 
          public void onComplete(TAGVAL o) {
            GetAggregateValue_result result = new GetAggregateValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAggregateValue_result result = new GetAggregateValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAggregateValue_args args, AsyncMethodCallback<TAGVAL> resultHandler) throws TException {
        iface.GetAggregateValue(args.hRecordset, args.ag, args.isRemoved,resultHandler);
      }
    }

    public static class QueryTagsbyDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryTagsbyDevice_args, Integer> {
      public QueryTagsbyDevice() {
        super("QueryTagsbyDevice");
      }

      public QueryTagsbyDevice_args getEmptyArgsInstance() {
        return new QueryTagsbyDevice_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            QueryTagsbyDevice_result result = new QueryTagsbyDevice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            QueryTagsbyDevice_result result = new QueryTagsbyDevice_result();
            if (e instanceof DeviceNotFoundException) {
                        result.e = (DeviceNotFoundException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QueryTagsbyDevice_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.QueryTagsbyDevice(args.deviceName,resultHandler);
      }
    }

    public static class EnumTagName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, EnumTagName_args, String> {
      public EnumTagName() {
        super("EnumTagName");
      }

      public EnumTagName_args getEmptyArgsInstance() {
        return new EnumTagName_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            EnumTagName_result result = new EnumTagName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            EnumTagName_result result = new EnumTagName_result();
            if (e instanceof HandleErrorException) {
                        result.e = (HandleErrorException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, EnumTagName_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.EnumTagName(args.hRecordset,resultHandler);
      }
    }

    public static class GetTagNamebyId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetTagNamebyId_args, String> {
      public GetTagNamebyId() {
        super("GetTagNamebyId");
      }

      public GetTagNamebyId_args getEmptyArgsInstance() {
        return new GetTagNamebyId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            GetTagNamebyId_result result = new GetTagNamebyId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetTagNamebyId_result result = new GetTagNamebyId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetTagNamebyId_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.GetTagNamebyId(args.tagId,resultHandler);
      }
    }

    public static class SetValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetValue_args, Void> {
      public SetValue() {
        super("SetValue");
      }

      public SetValue_args getEmptyArgsInstance() {
        return new SetValue_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetValue_result result = new SetValue_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SetValue_result result = new SetValue_result();
            if (e instanceof WriteValueException) {
                        result.e = (WriteValueException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetValue_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SetValue(args.value,resultHandler);
      }
    }

    public static class SetValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetValues_args, Void> {
      public SetValues() {
        super("SetValues");
      }

      public SetValues_args getEmptyArgsInstance() {
        return new SetValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetValues_result result = new SetValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SetValues_result result = new SetValues_result();
            if (e instanceof WriteValueException) {
                        result.e = (WriteValueException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetValues_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SetValues(args.values,resultHandler);
      }
    }

    public static class RemoveTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RemoveTag_args, Void> {
      public RemoveTag() {
        super("RemoveTag");
      }

      public RemoveTag_args getEmptyArgsInstance() {
        return new RemoveTag_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            RemoveTag_result result = new RemoveTag_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RemoveTag_result result = new RemoveTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RemoveTag_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RemoveTag(args.tagId,resultHandler);
      }
    }

    public static class GetTagInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetTagInfo_args, TAGNODE> {
      public GetTagInfo() {
        super("GetTagInfo");
      }

      public GetTagInfo_args getEmptyArgsInstance() {
        return new GetTagInfo_args();
      }

      public AsyncMethodCallback<TAGNODE> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TAGNODE>() { 
          public void onComplete(TAGNODE o) {
            GetTagInfo_result result = new GetTagInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetTagInfo_result result = new GetTagInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetTagInfo_args args, AsyncMethodCallback<TAGNODE> resultHandler) throws TException {
        iface.GetTagInfo(args.tagName,resultHandler);
      }
    }

    public static class AddNewTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddNewTag_args, Void> {
      public AddNewTag() {
        super("AddNewTag");
      }

      public AddNewTag_args getEmptyArgsInstance() {
        return new AddNewTag_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            AddNewTag_result result = new AddNewTag_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AddNewTag_result result = new AddNewTag_result();
            if (e instanceof WriteValueException) {
                        result.a = (WriteValueException) e;
                        result.setAIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TargetInsertException) {
                        result.b = (TargetInsertException) e;
                        result.setBIsSet(true);
                        msg = result;
            }
            else             if (e instanceof DeviceNotFoundException) {
                        result.c = (DeviceNotFoundException) e;
                        result.setCIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ParamErrorException) {
                        result.d = (ParamErrorException) e;
                        result.setDIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddNewTag_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.AddNewTag(args.node, args.isOverwrite,resultHandler);
      }
    }

    public static class EnumNextTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, EnumNextTag_args, TAGNODE> {
      public EnumNextTag() {
        super("EnumNextTag");
      }

      public EnumNextTag_args getEmptyArgsInstance() {
        return new EnumNextTag_args();
      }

      public AsyncMethodCallback<TAGNODE> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TAGNODE>() { 
          public void onComplete(TAGNODE o) {
            EnumNextTag_result result = new EnumNextTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            EnumNextTag_result result = new EnumNextTag_result();
            if (e instanceof HandleErrorException) {
                        result.e = (HandleErrorException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, EnumNextTag_args args, AsyncMethodCallback<TAGNODE> resultHandler) throws TException {
        iface.EnumNextTag(args.hwnd,resultHandler);
      }
    }

    public static class SubscribeTags<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SubscribeTags_args, Integer> {
      public SubscribeTags() {
        super("SubscribeTags");
      }

      public SubscribeTags_args getEmptyArgsInstance() {
        return new SubscribeTags_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            SubscribeTags_result result = new SubscribeTags_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SubscribeTags_result result = new SubscribeTags_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SubscribeTags_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.SubscribeTags(args.tagNames, args.count,resultHandler);
      }
    }

    public static class GetSubTagValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSubTagValue_args, TAGVAL> {
      public GetSubTagValue() {
        super("GetSubTagValue");
      }

      public GetSubTagValue_args getEmptyArgsInstance() {
        return new GetSubTagValue_args();
      }

      public AsyncMethodCallback<TAGVAL> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TAGVAL>() { 
          public void onComplete(TAGVAL o) {
            GetSubTagValue_result result = new GetSubTagValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSubTagValue_result result = new GetSubTagValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSubTagValue_args args, AsyncMethodCallback<TAGVAL> resultHandler) throws TException {
        iface.GetSubTagValue(resultHandler);
      }
    }

    public static class UnSubscribeTags<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UnSubscribeTags_args, Integer> {
      public UnSubscribeTags() {
        super("UnSubscribeTags");
      }

      public UnSubscribeTags_args getEmptyArgsInstance() {
        return new UnSubscribeTags_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            UnSubscribeTags_result result = new UnSubscribeTags_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UnSubscribeTags_result result = new UnSubscribeTags_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UnSubscribeTags_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.UnSubscribeTags(args.tagNames, args.count,resultHandler);
      }
    }

    public static class UnSubscribeAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UnSubscribeAll_args, Integer> {
      public UnSubscribeAll() {
        super("UnSubscribeAll");
      }

      public UnSubscribeAll_args getEmptyArgsInstance() {
        return new UnSubscribeAll_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            UnSubscribeAll_result result = new UnSubscribeAll_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UnSubscribeAll_result result = new UnSubscribeAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UnSubscribeAll_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.UnSubscribeAll(resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class AddDevice_args implements org.apache.thrift.TBase<AddDevice_args, AddDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddDevice_argsTupleSchemeFactory());
    }

    public DEVICE device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DEVICE.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddDevice_args.class, metaDataMap);
    }

    public AddDevice_args() {
    }

    public AddDevice_args(
      DEVICE device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddDevice_args(AddDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new DEVICE(other.device);
      }
    }

    public AddDevice_args deepCopy() {
      return new AddDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public DEVICE getDevice() {
      return this.device;
    }

    public AddDevice_args setDevice(DEVICE device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((DEVICE)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddDevice_args)
        return this.equals((AddDevice_args)that);
      return false;
    }

    public boolean equals(AddDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device = true && (isSetDevice());
      list.add(present_device);
      if (present_device)
        list.add(device);

      return list.hashCode();
    }

    @Override
    public int compareTo(AddDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (device != null) {
        device.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddDevice_argsStandardSchemeFactory implements SchemeFactory {
      public AddDevice_argsStandardScheme getScheme() {
        return new AddDevice_argsStandardScheme();
      }
    }

    private static class AddDevice_argsStandardScheme extends StandardScheme<AddDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddDevice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new DEVICE();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddDevice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddDevice_argsTupleSchemeFactory implements SchemeFactory {
      public AddDevice_argsTupleScheme getScheme() {
        return new AddDevice_argsTupleScheme();
      }
    }

    private static class AddDevice_argsTupleScheme extends TupleScheme<AddDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddDevice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddDevice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new DEVICE();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class AddDevice_result implements org.apache.thrift.TBase<AddDevice_result, AddDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddDevice_result");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddDevice_resultTupleSchemeFactory());
    }

    public DeviceIsExistException a; // required
    public DeviceMaxException b; // required
    public DeviceInsertException c; // required
    public ParamErrorException d; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a"),
      B((short)2, "b"),
      C((short)3, "c"),
      D((short)4, "d");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          case 2: // B
            return B;
          case 3: // C
            return C;
          case 4: // D
            return D;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddDevice_result.class, metaDataMap);
    }

    public AddDevice_result() {
    }

    public AddDevice_result(
      DeviceIsExistException a,
      DeviceMaxException b,
      DeviceInsertException c,
      ParamErrorException d)
    {
      this();
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddDevice_result(AddDevice_result other) {
      if (other.isSetA()) {
        this.a = new DeviceIsExistException(other.a);
      }
      if (other.isSetB()) {
        this.b = new DeviceMaxException(other.b);
      }
      if (other.isSetC()) {
        this.c = new DeviceInsertException(other.c);
      }
      if (other.isSetD()) {
        this.d = new ParamErrorException(other.d);
      }
    }

    public AddDevice_result deepCopy() {
      return new AddDevice_result(this);
    }

    @Override
    public void clear() {
      this.a = null;
      this.b = null;
      this.c = null;
      this.d = null;
    }

    public DeviceIsExistException getA() {
      return this.a;
    }

    public AddDevice_result setA(DeviceIsExistException a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public DeviceMaxException getB() {
      return this.b;
    }

    public AddDevice_result setB(DeviceMaxException b) {
      this.b = b;
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public DeviceInsertException getC() {
      return this.c;
    }

    public AddDevice_result setC(DeviceInsertException c) {
      this.c = c;
      return this;
    }

    public void unsetC() {
      this.c = null;
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
      return this.c != null;
    }

    public void setCIsSet(boolean value) {
      if (!value) {
        this.c = null;
      }
    }

    public ParamErrorException getD() {
      return this.d;
    }

    public AddDevice_result setD(ParamErrorException d) {
      this.d = d;
      return this;
    }

    public void unsetD() {
      this.d = null;
    }

    /** Returns true if field d is set (has been assigned a value) and false otherwise */
    public boolean isSetD() {
      return this.d != null;
    }

    public void setDIsSet(boolean value) {
      if (!value) {
        this.d = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((DeviceIsExistException)value);
        }
        break;

      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((DeviceMaxException)value);
        }
        break;

      case C:
        if (value == null) {
          unsetC();
        } else {
          setC((DeviceInsertException)value);
        }
        break;

      case D:
        if (value == null) {
          unsetD();
        } else {
          setD((ParamErrorException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      case B:
        return getB();

      case C:
        return getC();

      case D:
        return getD();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      case B:
        return isSetB();
      case C:
        return isSetC();
      case D:
        return isSetD();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddDevice_result)
        return this.equals((AddDevice_result)that);
      return false;
    }

    public boolean equals(AddDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      boolean this_present_c = true && this.isSetC();
      boolean that_present_c = true && that.isSetC();
      if (this_present_c || that_present_c) {
        if (!(this_present_c && that_present_c))
          return false;
        if (!this.c.equals(that.c))
          return false;
      }

      boolean this_present_d = true && this.isSetD();
      boolean that_present_d = true && that.isSetD();
      if (this_present_d || that_present_d) {
        if (!(this_present_d && that_present_d))
          return false;
        if (!this.d.equals(that.d))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_a = true && (isSetA());
      list.add(present_a);
      if (present_a)
        list.add(a);

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      boolean present_c = true && (isSetC());
      list.add(present_c);
      if (present_c)
        list.add(c);

      boolean present_d = true && (isSetD());
      list.add(present_d);
      if (present_d)
        list.add(d);

      return list.hashCode();
    }

    @Override
    public int compareTo(AddDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddDevice_result(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c:");
      if (this.c == null) {
        sb.append("null");
      } else {
        sb.append(this.c);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d:");
      if (this.d == null) {
        sb.append("null");
      } else {
        sb.append(this.d);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddDevice_resultStandardSchemeFactory implements SchemeFactory {
      public AddDevice_resultStandardScheme getScheme() {
        return new AddDevice_resultStandardScheme();
      }
    }

    private static class AddDevice_resultStandardScheme extends StandardScheme<AddDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddDevice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.a = new DeviceIsExistException();
                struct.a.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.b = new DeviceMaxException();
                struct.b.read(iprot);
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.c = new DeviceInsertException();
                struct.c.read(iprot);
                struct.setCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.d = new ParamErrorException();
                struct.d.read(iprot);
                struct.setDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddDevice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.a.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          struct.b.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.c != null) {
          oprot.writeFieldBegin(C_FIELD_DESC);
          struct.c.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.d != null) {
          oprot.writeFieldBegin(D_FIELD_DESC);
          struct.d.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddDevice_resultTupleSchemeFactory implements SchemeFactory {
      public AddDevice_resultTupleScheme getScheme() {
        return new AddDevice_resultTupleScheme();
      }
    }

    private static class AddDevice_resultTupleScheme extends TupleScheme<AddDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddDevice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        if (struct.isSetB()) {
          optionals.set(1);
        }
        if (struct.isSetC()) {
          optionals.set(2);
        }
        if (struct.isSetD()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetA()) {
          struct.a.write(oprot);
        }
        if (struct.isSetB()) {
          struct.b.write(oprot);
        }
        if (struct.isSetC()) {
          struct.c.write(oprot);
        }
        if (struct.isSetD()) {
          struct.d.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddDevice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.a = new DeviceIsExistException();
          struct.a.read(iprot);
          struct.setAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.b = new DeviceMaxException();
          struct.b.read(iprot);
          struct.setBIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c = new DeviceInsertException();
          struct.c.read(iprot);
          struct.setCIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d = new ParamErrorException();
          struct.d.read(iprot);
          struct.setDIsSet(true);
        }
      }
    }

  }

  public static class DeleteDevice_args implements org.apache.thrift.TBase<DeleteDevice_args, DeleteDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteDevice_argsTupleSchemeFactory());
    }

    public String deviceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_NAME((short)1, "deviceName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_NAME
            return DEVICE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDevice_args.class, metaDataMap);
    }

    public DeleteDevice_args() {
    }

    public DeleteDevice_args(
      String deviceName)
    {
      this();
      this.deviceName = deviceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDevice_args(DeleteDevice_args other) {
      if (other.isSetDeviceName()) {
        this.deviceName = other.deviceName;
      }
    }

    public DeleteDevice_args deepCopy() {
      return new DeleteDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceName = null;
    }

    public String getDeviceName() {
      return this.deviceName;
    }

    public DeleteDevice_args setDeviceName(String deviceName) {
      this.deviceName = deviceName;
      return this;
    }

    public void unsetDeviceName() {
      this.deviceName = null;
    }

    /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceName() {
      return this.deviceName != null;
    }

    public void setDeviceNameIsSet(boolean value) {
      if (!value) {
        this.deviceName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_NAME:
        if (value == null) {
          unsetDeviceName();
        } else {
          setDeviceName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_NAME:
        return getDeviceName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_NAME:
        return isSetDeviceName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDevice_args)
        return this.equals((DeleteDevice_args)that);
      return false;
    }

    public boolean equals(DeleteDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceName = true && this.isSetDeviceName();
      boolean that_present_deviceName = true && that.isSetDeviceName();
      if (this_present_deviceName || that_present_deviceName) {
        if (!(this_present_deviceName && that_present_deviceName))
          return false;
        if (!this.deviceName.equals(that.deviceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deviceName = true && (isSetDeviceName());
      list.add(present_deviceName);
      if (present_deviceName)
        list.add(deviceName);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteDevice_args(");
      boolean first = true;

      sb.append("deviceName:");
      if (this.deviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDevice_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteDevice_argsStandardScheme getScheme() {
        return new DeleteDevice_argsStandardScheme();
      }
    }

    private static class DeleteDevice_argsStandardScheme extends StandardScheme<DeleteDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDevice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceName = iprot.readString();
                struct.setDeviceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDevice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceName != null) {
          oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.deviceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDevice_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteDevice_argsTupleScheme getScheme() {
        return new DeleteDevice_argsTupleScheme();
      }
    }

    private static class DeleteDevice_argsTupleScheme extends TupleScheme<DeleteDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDevice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceName()) {
          oprot.writeString(struct.deviceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDevice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceName = iprot.readString();
          struct.setDeviceNameIsSet(true);
        }
      }
    }

  }

  public static class DeleteDevice_result implements org.apache.thrift.TBase<DeleteDevice_result, DeleteDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDevice_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteDevice_resultTupleSchemeFactory());
    }

    public DeviceNotFoundException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDevice_result.class, metaDataMap);
    }

    public DeleteDevice_result() {
    }

    public DeleteDevice_result(
      DeviceNotFoundException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDevice_result(DeleteDevice_result other) {
      if (other.isSetE()) {
        this.e = new DeviceNotFoundException(other.e);
      }
    }

    public DeleteDevice_result deepCopy() {
      return new DeleteDevice_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DeviceNotFoundException getE() {
      return this.e;
    }

    public DeleteDevice_result setE(DeviceNotFoundException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DeviceNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDevice_result)
        return this.equals((DeleteDevice_result)that);
      return false;
    }

    public boolean equals(DeleteDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteDevice_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDevice_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteDevice_resultStandardScheme getScheme() {
        return new DeleteDevice_resultStandardScheme();
      }
    }

    private static class DeleteDevice_resultStandardScheme extends StandardScheme<DeleteDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDevice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DeviceNotFoundException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDevice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDevice_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteDevice_resultTupleScheme getScheme() {
        return new DeleteDevice_resultTupleScheme();
      }
    }

    private static class DeleteDevice_resultTupleScheme extends TupleScheme<DeleteDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDevice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDevice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DeviceNotFoundException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class ModifyDevice_args implements org.apache.thrift.TBase<ModifyDevice_args, ModifyDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ModifyDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ModifyDevice_argsTupleSchemeFactory());
    }

    public DEVICE device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DEVICE.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyDevice_args.class, metaDataMap);
    }

    public ModifyDevice_args() {
    }

    public ModifyDevice_args(
      DEVICE device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyDevice_args(ModifyDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new DEVICE(other.device);
      }
    }

    public ModifyDevice_args deepCopy() {
      return new ModifyDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public DEVICE getDevice() {
      return this.device;
    }

    public ModifyDevice_args setDevice(DEVICE device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((DEVICE)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyDevice_args)
        return this.equals((ModifyDevice_args)that);
      return false;
    }

    public boolean equals(ModifyDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device = true && (isSetDevice());
      list.add(present_device);
      if (present_device)
        list.add(device);

      return list.hashCode();
    }

    @Override
    public int compareTo(ModifyDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ModifyDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (device != null) {
        device.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyDevice_argsStandardSchemeFactory implements SchemeFactory {
      public ModifyDevice_argsStandardScheme getScheme() {
        return new ModifyDevice_argsStandardScheme();
      }
    }

    private static class ModifyDevice_argsStandardScheme extends StandardScheme<ModifyDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyDevice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new DEVICE();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyDevice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyDevice_argsTupleSchemeFactory implements SchemeFactory {
      public ModifyDevice_argsTupleScheme getScheme() {
        return new ModifyDevice_argsTupleScheme();
      }
    }

    private static class ModifyDevice_argsTupleScheme extends TupleScheme<ModifyDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyDevice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyDevice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new DEVICE();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class ModifyDevice_result implements org.apache.thrift.TBase<ModifyDevice_result, ModifyDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ModifyDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ModifyDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyDevice_result.class, metaDataMap);
    }

    public ModifyDevice_result() {
    }

    public ModifyDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyDevice_result(ModifyDevice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ModifyDevice_result deepCopy() {
      return new ModifyDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ModifyDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyDevice_result)
        return this.equals((ModifyDevice_result)that);
      return false;
    }

    public boolean equals(ModifyDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ModifyDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ModifyDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyDevice_resultStandardSchemeFactory implements SchemeFactory {
      public ModifyDevice_resultStandardScheme getScheme() {
        return new ModifyDevice_resultStandardScheme();
      }
    }

    private static class ModifyDevice_resultStandardScheme extends StandardScheme<ModifyDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyDevice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyDevice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyDevice_resultTupleSchemeFactory implements SchemeFactory {
      public ModifyDevice_resultTupleScheme getScheme() {
        return new ModifyDevice_resultTupleScheme();
      }
    }

    private static class ModifyDevice_resultTupleScheme extends TupleScheme<ModifyDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyDevice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyDevice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class QueryDeviceInfo_args implements org.apache.thrift.TBase<QueryDeviceInfo_args, QueryDeviceInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryDeviceInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryDeviceInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryDeviceInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryDeviceInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryDeviceInfo_args.class, metaDataMap);
    }

    public QueryDeviceInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryDeviceInfo_args(QueryDeviceInfo_args other) {
    }

    public QueryDeviceInfo_args deepCopy() {
      return new QueryDeviceInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryDeviceInfo_args)
        return this.equals((QueryDeviceInfo_args)that);
      return false;
    }

    public boolean equals(QueryDeviceInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryDeviceInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryDeviceInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryDeviceInfo_argsStandardSchemeFactory implements SchemeFactory {
      public QueryDeviceInfo_argsStandardScheme getScheme() {
        return new QueryDeviceInfo_argsStandardScheme();
      }
    }

    private static class QueryDeviceInfo_argsStandardScheme extends StandardScheme<QueryDeviceInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryDeviceInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryDeviceInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryDeviceInfo_argsTupleSchemeFactory implements SchemeFactory {
      public QueryDeviceInfo_argsTupleScheme getScheme() {
        return new QueryDeviceInfo_argsTupleScheme();
      }
    }

    private static class QueryDeviceInfo_argsTupleScheme extends TupleScheme<QueryDeviceInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryDeviceInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryDeviceInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class QueryDeviceInfo_result implements org.apache.thrift.TBase<QueryDeviceInfo_result, QueryDeviceInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<QueryDeviceInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryDeviceInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryDeviceInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryDeviceInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryDeviceInfo_result.class, metaDataMap);
    }

    public QueryDeviceInfo_result() {
    }

    public QueryDeviceInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryDeviceInfo_result(QueryDeviceInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public QueryDeviceInfo_result deepCopy() {
      return new QueryDeviceInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public QueryDeviceInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryDeviceInfo_result)
        return this.equals((QueryDeviceInfo_result)that);
      return false;
    }

    public boolean equals(QueryDeviceInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryDeviceInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryDeviceInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryDeviceInfo_resultStandardSchemeFactory implements SchemeFactory {
      public QueryDeviceInfo_resultStandardScheme getScheme() {
        return new QueryDeviceInfo_resultStandardScheme();
      }
    }

    private static class QueryDeviceInfo_resultStandardScheme extends StandardScheme<QueryDeviceInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryDeviceInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryDeviceInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryDeviceInfo_resultTupleSchemeFactory implements SchemeFactory {
      public QueryDeviceInfo_resultTupleScheme getScheme() {
        return new QueryDeviceInfo_resultTupleScheme();
      }
    }

    private static class QueryDeviceInfo_resultTupleScheme extends TupleScheme<QueryDeviceInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryDeviceInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryDeviceInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class EnumDeviceInfo_args implements org.apache.thrift.TBase<EnumDeviceInfo_args, EnumDeviceInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<EnumDeviceInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnumDeviceInfo_args");

    private static final org.apache.thrift.protocol.TField H_RECORDSET_FIELD_DESC = new org.apache.thrift.protocol.TField("hRecordset", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnumDeviceInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnumDeviceInfo_argsTupleSchemeFactory());
    }

    public int hRecordset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      H_RECORDSET((short)1, "hRecordset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // H_RECORDSET
            return H_RECORDSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRECORDSET_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.H_RECORDSET, new org.apache.thrift.meta_data.FieldMetaData("hRecordset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnumDeviceInfo_args.class, metaDataMap);
    }

    public EnumDeviceInfo_args() {
    }

    public EnumDeviceInfo_args(
      int hRecordset)
    {
      this();
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnumDeviceInfo_args(EnumDeviceInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hRecordset = other.hRecordset;
    }

    public EnumDeviceInfo_args deepCopy() {
      return new EnumDeviceInfo_args(this);
    }

    @Override
    public void clear() {
      setHRecordsetIsSet(false);
      this.hRecordset = 0;
    }

    public int getHRecordset() {
      return this.hRecordset;
    }

    public EnumDeviceInfo_args setHRecordset(int hRecordset) {
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
      return this;
    }

    public void unsetHRecordset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    /** Returns true if field hRecordset is set (has been assigned a value) and false otherwise */
    public boolean isSetHRecordset() {
      return EncodingUtils.testBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    public void setHRecordsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRECORDSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case H_RECORDSET:
        if (value == null) {
          unsetHRecordset();
        } else {
          setHRecordset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case H_RECORDSET:
        return Integer.valueOf(getHRecordset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case H_RECORDSET:
        return isSetHRecordset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnumDeviceInfo_args)
        return this.equals((EnumDeviceInfo_args)that);
      return false;
    }

    public boolean equals(EnumDeviceInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_hRecordset = true;
      boolean that_present_hRecordset = true;
      if (this_present_hRecordset || that_present_hRecordset) {
        if (!(this_present_hRecordset && that_present_hRecordset))
          return false;
        if (this.hRecordset != that.hRecordset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hRecordset = true;
      list.add(present_hRecordset);
      if (present_hRecordset)
        list.add(hRecordset);

      return list.hashCode();
    }

    @Override
    public int compareTo(EnumDeviceInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHRecordset()).compareTo(other.isSetHRecordset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHRecordset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hRecordset, other.hRecordset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnumDeviceInfo_args(");
      boolean first = true;

      sb.append("hRecordset:");
      sb.append(this.hRecordset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnumDeviceInfo_argsStandardSchemeFactory implements SchemeFactory {
      public EnumDeviceInfo_argsStandardScheme getScheme() {
        return new EnumDeviceInfo_argsStandardScheme();
      }
    }

    private static class EnumDeviceInfo_argsStandardScheme extends StandardScheme<EnumDeviceInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnumDeviceInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // H_RECORDSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hRecordset = iprot.readI32();
                struct.setHRecordsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnumDeviceInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(H_RECORDSET_FIELD_DESC);
        oprot.writeI32(struct.hRecordset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnumDeviceInfo_argsTupleSchemeFactory implements SchemeFactory {
      public EnumDeviceInfo_argsTupleScheme getScheme() {
        return new EnumDeviceInfo_argsTupleScheme();
      }
    }

    private static class EnumDeviceInfo_argsTupleScheme extends TupleScheme<EnumDeviceInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnumDeviceInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHRecordset()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHRecordset()) {
          oprot.writeI32(struct.hRecordset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnumDeviceInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hRecordset = iprot.readI32();
          struct.setHRecordsetIsSet(true);
        }
      }
    }

  }

  public static class EnumDeviceInfo_result implements org.apache.thrift.TBase<EnumDeviceInfo_result, EnumDeviceInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<EnumDeviceInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnumDeviceInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnumDeviceInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnumDeviceInfo_resultTupleSchemeFactory());
    }

    public DEVICE success; // required
    public HandleErrorException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DEVICE.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnumDeviceInfo_result.class, metaDataMap);
    }

    public EnumDeviceInfo_result() {
    }

    public EnumDeviceInfo_result(
      DEVICE success,
      HandleErrorException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnumDeviceInfo_result(EnumDeviceInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new DEVICE(other.success);
      }
      if (other.isSetE()) {
        this.e = new HandleErrorException(other.e);
      }
    }

    public EnumDeviceInfo_result deepCopy() {
      return new EnumDeviceInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public DEVICE getSuccess() {
      return this.success;
    }

    public EnumDeviceInfo_result setSuccess(DEVICE success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HandleErrorException getE() {
      return this.e;
    }

    public EnumDeviceInfo_result setE(HandleErrorException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DEVICE)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((HandleErrorException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnumDeviceInfo_result)
        return this.equals((EnumDeviceInfo_result)that);
      return false;
    }

    public boolean equals(EnumDeviceInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(EnumDeviceInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnumDeviceInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnumDeviceInfo_resultStandardSchemeFactory implements SchemeFactory {
      public EnumDeviceInfo_resultStandardScheme getScheme() {
        return new EnumDeviceInfo_resultStandardScheme();
      }
    }

    private static class EnumDeviceInfo_resultStandardScheme extends StandardScheme<EnumDeviceInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnumDeviceInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DEVICE();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new HandleErrorException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnumDeviceInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnumDeviceInfo_resultTupleSchemeFactory implements SchemeFactory {
      public EnumDeviceInfo_resultTupleScheme getScheme() {
        return new EnumDeviceInfo_resultTupleScheme();
      }
    }

    private static class EnumDeviceInfo_resultTupleScheme extends TupleScheme<EnumDeviceInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnumDeviceInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnumDeviceInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DEVICE();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new HandleErrorException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetAllDevices_args implements org.apache.thrift.TBase<GetAllDevices_args, GetAllDevices_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllDevices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllDevices_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllDevices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllDevices_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllDevices_args.class, metaDataMap);
    }

    public GetAllDevices_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllDevices_args(GetAllDevices_args other) {
    }

    public GetAllDevices_args deepCopy() {
      return new GetAllDevices_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllDevices_args)
        return this.equals((GetAllDevices_args)that);
      return false;
    }

    public boolean equals(GetAllDevices_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAllDevices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllDevices_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllDevices_argsStandardSchemeFactory implements SchemeFactory {
      public GetAllDevices_argsStandardScheme getScheme() {
        return new GetAllDevices_argsStandardScheme();
      }
    }

    private static class GetAllDevices_argsStandardScheme extends StandardScheme<GetAllDevices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllDevices_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllDevices_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllDevices_argsTupleSchemeFactory implements SchemeFactory {
      public GetAllDevices_argsTupleScheme getScheme() {
        return new GetAllDevices_argsTupleScheme();
      }
    }

    private static class GetAllDevices_argsTupleScheme extends TupleScheme<GetAllDevices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllDevices_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllDevices_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAllDevices_result implements org.apache.thrift.TBase<GetAllDevices_result, GetAllDevices_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllDevices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllDevices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllDevices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllDevices_resultTupleSchemeFactory());
    }

    public List<DEVICE> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DEVICE.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllDevices_result.class, metaDataMap);
    }

    public GetAllDevices_result() {
    }

    public GetAllDevices_result(
      List<DEVICE> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllDevices_result(GetAllDevices_result other) {
      if (other.isSetSuccess()) {
        List<DEVICE> __this__success = new ArrayList<DEVICE>(other.success.size());
        for (DEVICE other_element : other.success) {
          __this__success.add(new DEVICE(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetAllDevices_result deepCopy() {
      return new GetAllDevices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DEVICE> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DEVICE elem) {
      if (this.success == null) {
        this.success = new ArrayList<DEVICE>();
      }
      this.success.add(elem);
    }

    public List<DEVICE> getSuccess() {
      return this.success;
    }

    public GetAllDevices_result setSuccess(List<DEVICE> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DEVICE>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllDevices_result)
        return this.equals((GetAllDevices_result)that);
      return false;
    }

    public boolean equals(GetAllDevices_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAllDevices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllDevices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllDevices_resultStandardSchemeFactory implements SchemeFactory {
      public GetAllDevices_resultStandardScheme getScheme() {
        return new GetAllDevices_resultStandardScheme();
      }
    }

    private static class GetAllDevices_resultStandardScheme extends StandardScheme<GetAllDevices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllDevices_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<DEVICE>(_list0.size);
                  DEVICE _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new DEVICE();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllDevices_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DEVICE _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllDevices_resultTupleSchemeFactory implements SchemeFactory {
      public GetAllDevices_resultTupleScheme getScheme() {
        return new GetAllDevices_resultTupleScheme();
      }
    }

    private static class GetAllDevices_resultTupleScheme extends TupleScheme<GetAllDevices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllDevices_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DEVICE _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllDevices_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DEVICE>(_list5.size);
            DEVICE _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new DEVICE();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class TagCountByDevice_args implements org.apache.thrift.TBase<TagCountByDevice_args, TagCountByDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<TagCountByDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagCountByDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TagCountByDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TagCountByDevice_argsTupleSchemeFactory());
    }

    public String deviceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_NAME((short)1, "deviceName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_NAME
            return DEVICE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagCountByDevice_args.class, metaDataMap);
    }

    public TagCountByDevice_args() {
    }

    public TagCountByDevice_args(
      String deviceName)
    {
      this();
      this.deviceName = deviceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TagCountByDevice_args(TagCountByDevice_args other) {
      if (other.isSetDeviceName()) {
        this.deviceName = other.deviceName;
      }
    }

    public TagCountByDevice_args deepCopy() {
      return new TagCountByDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceName = null;
    }

    public String getDeviceName() {
      return this.deviceName;
    }

    public TagCountByDevice_args setDeviceName(String deviceName) {
      this.deviceName = deviceName;
      return this;
    }

    public void unsetDeviceName() {
      this.deviceName = null;
    }

    /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceName() {
      return this.deviceName != null;
    }

    public void setDeviceNameIsSet(boolean value) {
      if (!value) {
        this.deviceName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_NAME:
        if (value == null) {
          unsetDeviceName();
        } else {
          setDeviceName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_NAME:
        return getDeviceName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_NAME:
        return isSetDeviceName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TagCountByDevice_args)
        return this.equals((TagCountByDevice_args)that);
      return false;
    }

    public boolean equals(TagCountByDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceName = true && this.isSetDeviceName();
      boolean that_present_deviceName = true && that.isSetDeviceName();
      if (this_present_deviceName || that_present_deviceName) {
        if (!(this_present_deviceName && that_present_deviceName))
          return false;
        if (!this.deviceName.equals(that.deviceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deviceName = true && (isSetDeviceName());
      list.add(present_deviceName);
      if (present_deviceName)
        list.add(deviceName);

      return list.hashCode();
    }

    @Override
    public int compareTo(TagCountByDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TagCountByDevice_args(");
      boolean first = true;

      sb.append("deviceName:");
      if (this.deviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TagCountByDevice_argsStandardSchemeFactory implements SchemeFactory {
      public TagCountByDevice_argsStandardScheme getScheme() {
        return new TagCountByDevice_argsStandardScheme();
      }
    }

    private static class TagCountByDevice_argsStandardScheme extends StandardScheme<TagCountByDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TagCountByDevice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceName = iprot.readString();
                struct.setDeviceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TagCountByDevice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceName != null) {
          oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.deviceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TagCountByDevice_argsTupleSchemeFactory implements SchemeFactory {
      public TagCountByDevice_argsTupleScheme getScheme() {
        return new TagCountByDevice_argsTupleScheme();
      }
    }

    private static class TagCountByDevice_argsTupleScheme extends TupleScheme<TagCountByDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TagCountByDevice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceName()) {
          oprot.writeString(struct.deviceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TagCountByDevice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceName = iprot.readString();
          struct.setDeviceNameIsSet(true);
        }
      }
    }

  }

  public static class TagCountByDevice_result implements org.apache.thrift.TBase<TagCountByDevice_result, TagCountByDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<TagCountByDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagCountByDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TagCountByDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TagCountByDevice_resultTupleSchemeFactory());
    }

    public int success; // required
    public DeviceIsExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagCountByDevice_result.class, metaDataMap);
    }

    public TagCountByDevice_result() {
    }

    public TagCountByDevice_result(
      int success,
      DeviceIsExistException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TagCountByDevice_result(TagCountByDevice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new DeviceIsExistException(other.e);
      }
    }

    public TagCountByDevice_result deepCopy() {
      return new TagCountByDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public TagCountByDevice_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public DeviceIsExistException getE() {
      return this.e;
    }

    public TagCountByDevice_result setE(DeviceIsExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DeviceIsExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TagCountByDevice_result)
        return this.equals((TagCountByDevice_result)that);
      return false;
    }

    public boolean equals(TagCountByDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(TagCountByDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TagCountByDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TagCountByDevice_resultStandardSchemeFactory implements SchemeFactory {
      public TagCountByDevice_resultStandardScheme getScheme() {
        return new TagCountByDevice_resultStandardScheme();
      }
    }

    private static class TagCountByDevice_resultStandardScheme extends StandardScheme<TagCountByDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TagCountByDevice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DeviceIsExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TagCountByDevice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TagCountByDevice_resultTupleSchemeFactory implements SchemeFactory {
      public TagCountByDevice_resultTupleScheme getScheme() {
        return new TagCountByDevice_resultTupleScheme();
      }
    }

    private static class TagCountByDevice_resultTupleScheme extends TupleScheme<TagCountByDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TagCountByDevice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TagCountByDevice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DeviceIsExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class QuerySnapshots_args implements org.apache.thrift.TBase<QuerySnapshots_args, QuerySnapshots_args._Fields>, java.io.Serializable, Cloneable, Comparable<QuerySnapshots_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuerySnapshots_args");

    private static final org.apache.thrift.protocol.TField TAG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tagNames", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("tagCount", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QuerySnapshots_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QuerySnapshots_argsTupleSchemeFactory());
    }

    public String tagNames; // required
    public int tagCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAMES((short)1, "tagNames"),
      TAG_COUNT((short)2, "tagCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAMES
            return TAG_NAMES;
          case 2: // TAG_COUNT
            return TAG_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGCOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tagNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_COUNT, new org.apache.thrift.meta_data.FieldMetaData("tagCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuerySnapshots_args.class, metaDataMap);
    }

    public QuerySnapshots_args() {
    }

    public QuerySnapshots_args(
      String tagNames,
      int tagCount)
    {
      this();
      this.tagNames = tagNames;
      this.tagCount = tagCount;
      setTagCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuerySnapshots_args(QuerySnapshots_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTagNames()) {
        this.tagNames = other.tagNames;
      }
      this.tagCount = other.tagCount;
    }

    public QuerySnapshots_args deepCopy() {
      return new QuerySnapshots_args(this);
    }

    @Override
    public void clear() {
      this.tagNames = null;
      setTagCountIsSet(false);
      this.tagCount = 0;
    }

    public String getTagNames() {
      return this.tagNames;
    }

    public QuerySnapshots_args setTagNames(String tagNames) {
      this.tagNames = tagNames;
      return this;
    }

    public void unsetTagNames() {
      this.tagNames = null;
    }

    /** Returns true if field tagNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTagNames() {
      return this.tagNames != null;
    }

    public void setTagNamesIsSet(boolean value) {
      if (!value) {
        this.tagNames = null;
      }
    }

    public int getTagCount() {
      return this.tagCount;
    }

    public QuerySnapshots_args setTagCount(int tagCount) {
      this.tagCount = tagCount;
      setTagCountIsSet(true);
      return this;
    }

    public void unsetTagCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGCOUNT_ISSET_ID);
    }

    /** Returns true if field tagCount is set (has been assigned a value) and false otherwise */
    public boolean isSetTagCount() {
      return EncodingUtils.testBit(__isset_bitfield, __TAGCOUNT_ISSET_ID);
    }

    public void setTagCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_NAMES:
        if (value == null) {
          unsetTagNames();
        } else {
          setTagNames((String)value);
        }
        break;

      case TAG_COUNT:
        if (value == null) {
          unsetTagCount();
        } else {
          setTagCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAMES:
        return getTagNames();

      case TAG_COUNT:
        return Integer.valueOf(getTagCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAMES:
        return isSetTagNames();
      case TAG_COUNT:
        return isSetTagCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QuerySnapshots_args)
        return this.equals((QuerySnapshots_args)that);
      return false;
    }

    public boolean equals(QuerySnapshots_args that) {
      if (that == null)
        return false;

      boolean this_present_tagNames = true && this.isSetTagNames();
      boolean that_present_tagNames = true && that.isSetTagNames();
      if (this_present_tagNames || that_present_tagNames) {
        if (!(this_present_tagNames && that_present_tagNames))
          return false;
        if (!this.tagNames.equals(that.tagNames))
          return false;
      }

      boolean this_present_tagCount = true;
      boolean that_present_tagCount = true;
      if (this_present_tagCount || that_present_tagCount) {
        if (!(this_present_tagCount && that_present_tagCount))
          return false;
        if (this.tagCount != that.tagCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagNames = true && (isSetTagNames());
      list.add(present_tagNames);
      if (present_tagNames)
        list.add(tagNames);

      boolean present_tagCount = true;
      list.add(present_tagCount);
      if (present_tagCount)
        list.add(tagCount);

      return list.hashCode();
    }

    @Override
    public int compareTo(QuerySnapshots_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagNames()).compareTo(other.isSetTagNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagNames, other.tagNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTagCount()).compareTo(other.isSetTagCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagCount, other.tagCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QuerySnapshots_args(");
      boolean first = true;

      sb.append("tagNames:");
      if (this.tagNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tagNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tagCount:");
      sb.append(this.tagCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuerySnapshots_argsStandardSchemeFactory implements SchemeFactory {
      public QuerySnapshots_argsStandardScheme getScheme() {
        return new QuerySnapshots_argsStandardScheme();
      }
    }

    private static class QuerySnapshots_argsStandardScheme extends StandardScheme<QuerySnapshots_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuerySnapshots_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagNames = iprot.readString();
                struct.setTagNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TAG_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tagCount = iprot.readI32();
                struct.setTagCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuerySnapshots_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagNames != null) {
          oprot.writeFieldBegin(TAG_NAMES_FIELD_DESC);
          oprot.writeString(struct.tagNames);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TAG_COUNT_FIELD_DESC);
        oprot.writeI32(struct.tagCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuerySnapshots_argsTupleSchemeFactory implements SchemeFactory {
      public QuerySnapshots_argsTupleScheme getScheme() {
        return new QuerySnapshots_argsTupleScheme();
      }
    }

    private static class QuerySnapshots_argsTupleScheme extends TupleScheme<QuerySnapshots_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuerySnapshots_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagNames()) {
          optionals.set(0);
        }
        if (struct.isSetTagCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTagNames()) {
          oprot.writeString(struct.tagNames);
        }
        if (struct.isSetTagCount()) {
          oprot.writeI32(struct.tagCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuerySnapshots_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tagNames = iprot.readString();
          struct.setTagNamesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tagCount = iprot.readI32();
          struct.setTagCountIsSet(true);
        }
      }
    }

  }

  public static class QuerySnapshots_result implements org.apache.thrift.TBase<QuerySnapshots_result, QuerySnapshots_result._Fields>, java.io.Serializable, Cloneable, Comparable<QuerySnapshots_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuerySnapshots_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QuerySnapshots_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QuerySnapshots_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuerySnapshots_result.class, metaDataMap);
    }

    public QuerySnapshots_result() {
    }

    public QuerySnapshots_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuerySnapshots_result(QuerySnapshots_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public QuerySnapshots_result deepCopy() {
      return new QuerySnapshots_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public QuerySnapshots_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QuerySnapshots_result)
        return this.equals((QuerySnapshots_result)that);
      return false;
    }

    public boolean equals(QuerySnapshots_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(QuerySnapshots_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QuerySnapshots_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuerySnapshots_resultStandardSchemeFactory implements SchemeFactory {
      public QuerySnapshots_resultStandardScheme getScheme() {
        return new QuerySnapshots_resultStandardScheme();
      }
    }

    private static class QuerySnapshots_resultStandardScheme extends StandardScheme<QuerySnapshots_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuerySnapshots_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuerySnapshots_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuerySnapshots_resultTupleSchemeFactory implements SchemeFactory {
      public QuerySnapshots_resultTupleScheme getScheme() {
        return new QuerySnapshots_resultTupleScheme();
      }
    }

    private static class QuerySnapshots_resultTupleScheme extends TupleScheme<QuerySnapshots_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuerySnapshots_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuerySnapshots_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNextTagValue_args implements org.apache.thrift.TBase<GetNextTagValue_args, GetNextTagValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetNextTagValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNextTagValue_args");

    private static final org.apache.thrift.protocol.TField H_RECORDSET_FIELD_DESC = new org.apache.thrift.protocol.TField("hRecordset", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField IS_REMOVED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRemoved", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNextTagValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNextTagValue_argsTupleSchemeFactory());
    }

    public int hRecordset; // required
    public boolean isRemoved; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      H_RECORDSET((short)1, "hRecordset"),
      IS_REMOVED((short)2, "isRemoved");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // H_RECORDSET
            return H_RECORDSET;
          case 2: // IS_REMOVED
            return IS_REMOVED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRECORDSET_ISSET_ID = 0;
    private static final int __ISREMOVED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.H_RECORDSET, new org.apache.thrift.meta_data.FieldMetaData("hRecordset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_REMOVED, new org.apache.thrift.meta_data.FieldMetaData("isRemoved", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNextTagValue_args.class, metaDataMap);
    }

    public GetNextTagValue_args() {
    }

    public GetNextTagValue_args(
      int hRecordset,
      boolean isRemoved)
    {
      this();
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
      this.isRemoved = isRemoved;
      setIsRemovedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNextTagValue_args(GetNextTagValue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hRecordset = other.hRecordset;
      this.isRemoved = other.isRemoved;
    }

    public GetNextTagValue_args deepCopy() {
      return new GetNextTagValue_args(this);
    }

    @Override
    public void clear() {
      setHRecordsetIsSet(false);
      this.hRecordset = 0;
      setIsRemovedIsSet(false);
      this.isRemoved = false;
    }

    public int getHRecordset() {
      return this.hRecordset;
    }

    public GetNextTagValue_args setHRecordset(int hRecordset) {
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
      return this;
    }

    public void unsetHRecordset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    /** Returns true if field hRecordset is set (has been assigned a value) and false otherwise */
    public boolean isSetHRecordset() {
      return EncodingUtils.testBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    public void setHRecordsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRECORDSET_ISSET_ID, value);
    }

    public boolean isIsRemoved() {
      return this.isRemoved;
    }

    public GetNextTagValue_args setIsRemoved(boolean isRemoved) {
      this.isRemoved = isRemoved;
      setIsRemovedIsSet(true);
      return this;
    }

    public void unsetIsRemoved() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREMOVED_ISSET_ID);
    }

    /** Returns true if field isRemoved is set (has been assigned a value) and false otherwise */
    public boolean isSetIsRemoved() {
      return EncodingUtils.testBit(__isset_bitfield, __ISREMOVED_ISSET_ID);
    }

    public void setIsRemovedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREMOVED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case H_RECORDSET:
        if (value == null) {
          unsetHRecordset();
        } else {
          setHRecordset((Integer)value);
        }
        break;

      case IS_REMOVED:
        if (value == null) {
          unsetIsRemoved();
        } else {
          setIsRemoved((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case H_RECORDSET:
        return Integer.valueOf(getHRecordset());

      case IS_REMOVED:
        return Boolean.valueOf(isIsRemoved());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case H_RECORDSET:
        return isSetHRecordset();
      case IS_REMOVED:
        return isSetIsRemoved();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNextTagValue_args)
        return this.equals((GetNextTagValue_args)that);
      return false;
    }

    public boolean equals(GetNextTagValue_args that) {
      if (that == null)
        return false;

      boolean this_present_hRecordset = true;
      boolean that_present_hRecordset = true;
      if (this_present_hRecordset || that_present_hRecordset) {
        if (!(this_present_hRecordset && that_present_hRecordset))
          return false;
        if (this.hRecordset != that.hRecordset)
          return false;
      }

      boolean this_present_isRemoved = true;
      boolean that_present_isRemoved = true;
      if (this_present_isRemoved || that_present_isRemoved) {
        if (!(this_present_isRemoved && that_present_isRemoved))
          return false;
        if (this.isRemoved != that.isRemoved)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hRecordset = true;
      list.add(present_hRecordset);
      if (present_hRecordset)
        list.add(hRecordset);

      boolean present_isRemoved = true;
      list.add(present_isRemoved);
      if (present_isRemoved)
        list.add(isRemoved);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetNextTagValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHRecordset()).compareTo(other.isSetHRecordset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHRecordset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hRecordset, other.hRecordset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsRemoved()).compareTo(other.isSetIsRemoved());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsRemoved()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemoved, other.isRemoved);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNextTagValue_args(");
      boolean first = true;

      sb.append("hRecordset:");
      sb.append(this.hRecordset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isRemoved:");
      sb.append(this.isRemoved);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNextTagValue_argsStandardSchemeFactory implements SchemeFactory {
      public GetNextTagValue_argsStandardScheme getScheme() {
        return new GetNextTagValue_argsStandardScheme();
      }
    }

    private static class GetNextTagValue_argsStandardScheme extends StandardScheme<GetNextTagValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNextTagValue_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // H_RECORDSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hRecordset = iprot.readI32();
                struct.setHRecordsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_REMOVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isRemoved = iprot.readBool();
                struct.setIsRemovedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNextTagValue_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(H_RECORDSET_FIELD_DESC);
        oprot.writeI32(struct.hRecordset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_REMOVED_FIELD_DESC);
        oprot.writeBool(struct.isRemoved);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNextTagValue_argsTupleSchemeFactory implements SchemeFactory {
      public GetNextTagValue_argsTupleScheme getScheme() {
        return new GetNextTagValue_argsTupleScheme();
      }
    }

    private static class GetNextTagValue_argsTupleScheme extends TupleScheme<GetNextTagValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNextTagValue_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHRecordset()) {
          optionals.set(0);
        }
        if (struct.isSetIsRemoved()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHRecordset()) {
          oprot.writeI32(struct.hRecordset);
        }
        if (struct.isSetIsRemoved()) {
          oprot.writeBool(struct.isRemoved);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNextTagValue_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hRecordset = iprot.readI32();
          struct.setHRecordsetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isRemoved = iprot.readBool();
          struct.setIsRemovedIsSet(true);
        }
      }
    }

  }

  public static class GetNextTagValue_result implements org.apache.thrift.TBase<GetNextTagValue_result, GetNextTagValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetNextTagValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNextTagValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNextTagValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNextTagValue_resultTupleSchemeFactory());
    }

    public TAGVAL success; // required
    public HandleErrorException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGVAL.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNextTagValue_result.class, metaDataMap);
    }

    public GetNextTagValue_result() {
    }

    public GetNextTagValue_result(
      TAGVAL success,
      HandleErrorException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNextTagValue_result(GetNextTagValue_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAGVAL(other.success);
      }
      if (other.isSetE()) {
        this.e = new HandleErrorException(other.e);
      }
    }

    public GetNextTagValue_result deepCopy() {
      return new GetNextTagValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TAGVAL getSuccess() {
      return this.success;
    }

    public GetNextTagValue_result setSuccess(TAGVAL success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HandleErrorException getE() {
      return this.e;
    }

    public GetNextTagValue_result setE(HandleErrorException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAGVAL)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((HandleErrorException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNextTagValue_result)
        return this.equals((GetNextTagValue_result)that);
      return false;
    }

    public boolean equals(GetNextTagValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetNextTagValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNextTagValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNextTagValue_resultStandardSchemeFactory implements SchemeFactory {
      public GetNextTagValue_resultStandardScheme getScheme() {
        return new GetNextTagValue_resultStandardScheme();
      }
    }

    private static class GetNextTagValue_resultStandardScheme extends StandardScheme<GetNextTagValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNextTagValue_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAGVAL();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new HandleErrorException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNextTagValue_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNextTagValue_resultTupleSchemeFactory implements SchemeFactory {
      public GetNextTagValue_resultTupleScheme getScheme() {
        return new GetNextTagValue_resultTupleScheme();
      }
    }

    private static class GetNextTagValue_resultTupleScheme extends TupleScheme<GetNextTagValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNextTagValue_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNextTagValue_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TAGVAL();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new HandleErrorException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class QueryTagHistory_args implements org.apache.thrift.TBase<QueryTagHistory_args, QueryTagHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTagHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryTagHistory_args");

    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryTagHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryTagHistory_argsTupleSchemeFactory());
    }

    public String tagName; // required
    public int startTime; // required
    public int endTime; // required
    public int step; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAME((short)1, "tagName"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime"),
      STEP((short)4, "step");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAME
            return TAG_NAME;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          case 4: // STEP
            return STEP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private static final int __STEP_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTagHistory_args.class, metaDataMap);
    }

    public QueryTagHistory_args() {
    }

    public QueryTagHistory_args(
      String tagName,
      int startTime,
      int endTime,
      int step)
    {
      this();
      this.tagName = tagName;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.step = step;
      setStepIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryTagHistory_args(QueryTagHistory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTagName()) {
        this.tagName = other.tagName;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      this.step = other.step;
    }

    public QueryTagHistory_args deepCopy() {
      return new QueryTagHistory_args(this);
    }

    @Override
    public void clear() {
      this.tagName = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      setStepIsSet(false);
      this.step = 0;
    }

    public String getTagName() {
      return this.tagName;
    }

    public QueryTagHistory_args setTagName(String tagName) {
      this.tagName = tagName;
      return this;
    }

    public void unsetTagName() {
      this.tagName = null;
    }

    /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
    public boolean isSetTagName() {
      return this.tagName != null;
    }

    public void setTagNameIsSet(boolean value) {
      if (!value) {
        this.tagName = null;
      }
    }

    public int getStartTime() {
      return this.startTime;
    }

    public QueryTagHistory_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public QueryTagHistory_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public int getStep() {
      return this.step;
    }

    public QueryTagHistory_args setStep(int step) {
      this.step = step;
      setStepIsSet(true);
      return this;
    }

    public void unsetStep() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEP_ISSET_ID);
    }

    /** Returns true if field step is set (has been assigned a value) and false otherwise */
    public boolean isSetStep() {
      return EncodingUtils.testBit(__isset_bitfield, __STEP_ISSET_ID);
    }

    public void setStepIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_NAME:
        if (value == null) {
          unsetTagName();
        } else {
          setTagName((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case STEP:
        if (value == null) {
          unsetStep();
        } else {
          setStep((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAME:
        return getTagName();

      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case STEP:
        return Integer.valueOf(getStep());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAME:
        return isSetTagName();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case STEP:
        return isSetStep();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryTagHistory_args)
        return this.equals((QueryTagHistory_args)that);
      return false;
    }

    public boolean equals(QueryTagHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_tagName = true && this.isSetTagName();
      boolean that_present_tagName = true && that.isSetTagName();
      if (this_present_tagName || that_present_tagName) {
        if (!(this_present_tagName && that_present_tagName))
          return false;
        if (!this.tagName.equals(that.tagName))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_step = true;
      boolean that_present_step = true;
      if (this_present_step || that_present_step) {
        if (!(this_present_step && that_present_step))
          return false;
        if (this.step != that.step)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagName = true && (isSetTagName());
      list.add(present_tagName);
      if (present_tagName)
        list.add(tagName);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_step = true;
      list.add(present_step);
      if (present_step)
        list.add(step);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryTagHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagName()).compareTo(other.isSetTagName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, other.tagName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStep()).compareTo(other.isSetStep());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStep()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryTagHistory_args(");
      boolean first = true;

      sb.append("tagName:");
      if (this.tagName == null) {
        sb.append("null");
      } else {
        sb.append(this.tagName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("step:");
      sb.append(this.step);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryTagHistory_argsStandardSchemeFactory implements SchemeFactory {
      public QueryTagHistory_argsStandardScheme getScheme() {
        return new QueryTagHistory_argsStandardScheme();
      }
    }

    private static class QueryTagHistory_argsStandardScheme extends StandardScheme<QueryTagHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTagHistory_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagName = iprot.readString();
                struct.setTagNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STEP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.step = iprot.readI32();
                struct.setStepIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTagHistory_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagName != null) {
          oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.tagName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STEP_FIELD_DESC);
        oprot.writeI32(struct.step);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryTagHistory_argsTupleSchemeFactory implements SchemeFactory {
      public QueryTagHistory_argsTupleScheme getScheme() {
        return new QueryTagHistory_argsTupleScheme();
      }
    }

    private static class QueryTagHistory_argsTupleScheme extends TupleScheme<QueryTagHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryTagHistory_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagName()) {
          optionals.set(0);
        }
        if (struct.isSetStartTime()) {
          optionals.set(1);
        }
        if (struct.isSetEndTime()) {
          optionals.set(2);
        }
        if (struct.isSetStep()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTagName()) {
          oprot.writeString(struct.tagName);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetStep()) {
          oprot.writeI32(struct.step);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryTagHistory_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.tagName = iprot.readString();
          struct.setTagNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.step = iprot.readI32();
          struct.setStepIsSet(true);
        }
      }
    }

  }

  public static class QueryTagHistory_result implements org.apache.thrift.TBase<QueryTagHistory_result, QueryTagHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTagHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryTagHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryTagHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryTagHistory_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTagHistory_result.class, metaDataMap);
    }

    public QueryTagHistory_result() {
    }

    public QueryTagHistory_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryTagHistory_result(QueryTagHistory_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public QueryTagHistory_result deepCopy() {
      return new QueryTagHistory_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public QueryTagHistory_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryTagHistory_result)
        return this.equals((QueryTagHistory_result)that);
      return false;
    }

    public boolean equals(QueryTagHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryTagHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryTagHistory_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryTagHistory_resultStandardSchemeFactory implements SchemeFactory {
      public QueryTagHistory_resultStandardScheme getScheme() {
        return new QueryTagHistory_resultStandardScheme();
      }
    }

    private static class QueryTagHistory_resultStandardScheme extends StandardScheme<QueryTagHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTagHistory_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTagHistory_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryTagHistory_resultTupleSchemeFactory implements SchemeFactory {
      public QueryTagHistory_resultTupleScheme getScheme() {
        return new QueryTagHistory_resultTupleScheme();
      }
    }

    private static class QueryTagHistory_resultTupleScheme extends TupleScheme<QueryTagHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryTagHistory_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryTagHistory_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAggregateValue_args implements org.apache.thrift.TBase<GetAggregateValue_args, GetAggregateValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAggregateValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAggregateValue_args");

    private static final org.apache.thrift.protocol.TField H_RECORDSET_FIELD_DESC = new org.apache.thrift.protocol.TField("hRecordset", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AG_FIELD_DESC = new org.apache.thrift.protocol.TField("ag", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField IS_REMOVED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRemoved", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAggregateValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAggregateValue_argsTupleSchemeFactory());
    }

    public int hRecordset; // required
    /**
     * 
     * @see AGGREGATE
     */
    public AGGREGATE ag; // required
    public boolean isRemoved; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      H_RECORDSET((short)1, "hRecordset"),
      /**
       * 
       * @see AGGREGATE
       */
      AG((short)2, "ag"),
      IS_REMOVED((short)3, "isRemoved");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // H_RECORDSET
            return H_RECORDSET;
          case 2: // AG
            return AG;
          case 3: // IS_REMOVED
            return IS_REMOVED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRECORDSET_ISSET_ID = 0;
    private static final int __ISREMOVED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.H_RECORDSET, new org.apache.thrift.meta_data.FieldMetaData("hRecordset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AG, new org.apache.thrift.meta_data.FieldMetaData("ag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AGGREGATE.class)));
      tmpMap.put(_Fields.IS_REMOVED, new org.apache.thrift.meta_data.FieldMetaData("isRemoved", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAggregateValue_args.class, metaDataMap);
    }

    public GetAggregateValue_args() {
    }

    public GetAggregateValue_args(
      int hRecordset,
      AGGREGATE ag,
      boolean isRemoved)
    {
      this();
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
      this.ag = ag;
      this.isRemoved = isRemoved;
      setIsRemovedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAggregateValue_args(GetAggregateValue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hRecordset = other.hRecordset;
      if (other.isSetAg()) {
        this.ag = other.ag;
      }
      this.isRemoved = other.isRemoved;
    }

    public GetAggregateValue_args deepCopy() {
      return new GetAggregateValue_args(this);
    }

    @Override
    public void clear() {
      setHRecordsetIsSet(false);
      this.hRecordset = 0;
      this.ag = null;
      setIsRemovedIsSet(false);
      this.isRemoved = false;
    }

    public int getHRecordset() {
      return this.hRecordset;
    }

    public GetAggregateValue_args setHRecordset(int hRecordset) {
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
      return this;
    }

    public void unsetHRecordset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    /** Returns true if field hRecordset is set (has been assigned a value) and false otherwise */
    public boolean isSetHRecordset() {
      return EncodingUtils.testBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    public void setHRecordsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRECORDSET_ISSET_ID, value);
    }

    /**
     * 
     * @see AGGREGATE
     */
    public AGGREGATE getAg() {
      return this.ag;
    }

    /**
     * 
     * @see AGGREGATE
     */
    public GetAggregateValue_args setAg(AGGREGATE ag) {
      this.ag = ag;
      return this;
    }

    public void unsetAg() {
      this.ag = null;
    }

    /** Returns true if field ag is set (has been assigned a value) and false otherwise */
    public boolean isSetAg() {
      return this.ag != null;
    }

    public void setAgIsSet(boolean value) {
      if (!value) {
        this.ag = null;
      }
    }

    public boolean isIsRemoved() {
      return this.isRemoved;
    }

    public GetAggregateValue_args setIsRemoved(boolean isRemoved) {
      this.isRemoved = isRemoved;
      setIsRemovedIsSet(true);
      return this;
    }

    public void unsetIsRemoved() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREMOVED_ISSET_ID);
    }

    /** Returns true if field isRemoved is set (has been assigned a value) and false otherwise */
    public boolean isSetIsRemoved() {
      return EncodingUtils.testBit(__isset_bitfield, __ISREMOVED_ISSET_ID);
    }

    public void setIsRemovedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREMOVED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case H_RECORDSET:
        if (value == null) {
          unsetHRecordset();
        } else {
          setHRecordset((Integer)value);
        }
        break;

      case AG:
        if (value == null) {
          unsetAg();
        } else {
          setAg((AGGREGATE)value);
        }
        break;

      case IS_REMOVED:
        if (value == null) {
          unsetIsRemoved();
        } else {
          setIsRemoved((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case H_RECORDSET:
        return Integer.valueOf(getHRecordset());

      case AG:
        return getAg();

      case IS_REMOVED:
        return Boolean.valueOf(isIsRemoved());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case H_RECORDSET:
        return isSetHRecordset();
      case AG:
        return isSetAg();
      case IS_REMOVED:
        return isSetIsRemoved();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAggregateValue_args)
        return this.equals((GetAggregateValue_args)that);
      return false;
    }

    public boolean equals(GetAggregateValue_args that) {
      if (that == null)
        return false;

      boolean this_present_hRecordset = true;
      boolean that_present_hRecordset = true;
      if (this_present_hRecordset || that_present_hRecordset) {
        if (!(this_present_hRecordset && that_present_hRecordset))
          return false;
        if (this.hRecordset != that.hRecordset)
          return false;
      }

      boolean this_present_ag = true && this.isSetAg();
      boolean that_present_ag = true && that.isSetAg();
      if (this_present_ag || that_present_ag) {
        if (!(this_present_ag && that_present_ag))
          return false;
        if (!this.ag.equals(that.ag))
          return false;
      }

      boolean this_present_isRemoved = true;
      boolean that_present_isRemoved = true;
      if (this_present_isRemoved || that_present_isRemoved) {
        if (!(this_present_isRemoved && that_present_isRemoved))
          return false;
        if (this.isRemoved != that.isRemoved)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hRecordset = true;
      list.add(present_hRecordset);
      if (present_hRecordset)
        list.add(hRecordset);

      boolean present_ag = true && (isSetAg());
      list.add(present_ag);
      if (present_ag)
        list.add(ag.getValue());

      boolean present_isRemoved = true;
      list.add(present_isRemoved);
      if (present_isRemoved)
        list.add(isRemoved);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAggregateValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHRecordset()).compareTo(other.isSetHRecordset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHRecordset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hRecordset, other.hRecordset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAg()).compareTo(other.isSetAg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ag, other.ag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsRemoved()).compareTo(other.isSetIsRemoved());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsRemoved()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemoved, other.isRemoved);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAggregateValue_args(");
      boolean first = true;

      sb.append("hRecordset:");
      sb.append(this.hRecordset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ag:");
      if (this.ag == null) {
        sb.append("null");
      } else {
        sb.append(this.ag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isRemoved:");
      sb.append(this.isRemoved);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAggregateValue_argsStandardSchemeFactory implements SchemeFactory {
      public GetAggregateValue_argsStandardScheme getScheme() {
        return new GetAggregateValue_argsStandardScheme();
      }
    }

    private static class GetAggregateValue_argsStandardScheme extends StandardScheme<GetAggregateValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAggregateValue_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // H_RECORDSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hRecordset = iprot.readI32();
                struct.setHRecordsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ag = AGGREGATE.findByValue(iprot.readI32());
                struct.setAgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_REMOVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isRemoved = iprot.readBool();
                struct.setIsRemovedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAggregateValue_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(H_RECORDSET_FIELD_DESC);
        oprot.writeI32(struct.hRecordset);
        oprot.writeFieldEnd();
        if (struct.ag != null) {
          oprot.writeFieldBegin(AG_FIELD_DESC);
          oprot.writeI32(struct.ag.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_REMOVED_FIELD_DESC);
        oprot.writeBool(struct.isRemoved);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAggregateValue_argsTupleSchemeFactory implements SchemeFactory {
      public GetAggregateValue_argsTupleScheme getScheme() {
        return new GetAggregateValue_argsTupleScheme();
      }
    }

    private static class GetAggregateValue_argsTupleScheme extends TupleScheme<GetAggregateValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAggregateValue_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHRecordset()) {
          optionals.set(0);
        }
        if (struct.isSetAg()) {
          optionals.set(1);
        }
        if (struct.isSetIsRemoved()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHRecordset()) {
          oprot.writeI32(struct.hRecordset);
        }
        if (struct.isSetAg()) {
          oprot.writeI32(struct.ag.getValue());
        }
        if (struct.isSetIsRemoved()) {
          oprot.writeBool(struct.isRemoved);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAggregateValue_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hRecordset = iprot.readI32();
          struct.setHRecordsetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ag = AGGREGATE.findByValue(iprot.readI32());
          struct.setAgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isRemoved = iprot.readBool();
          struct.setIsRemovedIsSet(true);
        }
      }
    }

  }

  public static class GetAggregateValue_result implements org.apache.thrift.TBase<GetAggregateValue_result, GetAggregateValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAggregateValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAggregateValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAggregateValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAggregateValue_resultTupleSchemeFactory());
    }

    public TAGVAL success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGVAL.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAggregateValue_result.class, metaDataMap);
    }

    public GetAggregateValue_result() {
    }

    public GetAggregateValue_result(
      TAGVAL success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAggregateValue_result(GetAggregateValue_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAGVAL(other.success);
      }
    }

    public GetAggregateValue_result deepCopy() {
      return new GetAggregateValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAGVAL getSuccess() {
      return this.success;
    }

    public GetAggregateValue_result setSuccess(TAGVAL success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAGVAL)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAggregateValue_result)
        return this.equals((GetAggregateValue_result)that);
      return false;
    }

    public boolean equals(GetAggregateValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAggregateValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAggregateValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAggregateValue_resultStandardSchemeFactory implements SchemeFactory {
      public GetAggregateValue_resultStandardScheme getScheme() {
        return new GetAggregateValue_resultStandardScheme();
      }
    }

    private static class GetAggregateValue_resultStandardScheme extends StandardScheme<GetAggregateValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAggregateValue_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAGVAL();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAggregateValue_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAggregateValue_resultTupleSchemeFactory implements SchemeFactory {
      public GetAggregateValue_resultTupleScheme getScheme() {
        return new GetAggregateValue_resultTupleScheme();
      }
    }

    private static class GetAggregateValue_resultTupleScheme extends TupleScheme<GetAggregateValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAggregateValue_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAggregateValue_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAGVAL();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class QueryTagsbyDevice_args implements org.apache.thrift.TBase<QueryTagsbyDevice_args, QueryTagsbyDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTagsbyDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryTagsbyDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryTagsbyDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryTagsbyDevice_argsTupleSchemeFactory());
    }

    public String deviceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_NAME((short)1, "deviceName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_NAME
            return DEVICE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTagsbyDevice_args.class, metaDataMap);
    }

    public QueryTagsbyDevice_args() {
    }

    public QueryTagsbyDevice_args(
      String deviceName)
    {
      this();
      this.deviceName = deviceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryTagsbyDevice_args(QueryTagsbyDevice_args other) {
      if (other.isSetDeviceName()) {
        this.deviceName = other.deviceName;
      }
    }

    public QueryTagsbyDevice_args deepCopy() {
      return new QueryTagsbyDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceName = null;
    }

    public String getDeviceName() {
      return this.deviceName;
    }

    public QueryTagsbyDevice_args setDeviceName(String deviceName) {
      this.deviceName = deviceName;
      return this;
    }

    public void unsetDeviceName() {
      this.deviceName = null;
    }

    /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceName() {
      return this.deviceName != null;
    }

    public void setDeviceNameIsSet(boolean value) {
      if (!value) {
        this.deviceName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_NAME:
        if (value == null) {
          unsetDeviceName();
        } else {
          setDeviceName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_NAME:
        return getDeviceName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_NAME:
        return isSetDeviceName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryTagsbyDevice_args)
        return this.equals((QueryTagsbyDevice_args)that);
      return false;
    }

    public boolean equals(QueryTagsbyDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceName = true && this.isSetDeviceName();
      boolean that_present_deviceName = true && that.isSetDeviceName();
      if (this_present_deviceName || that_present_deviceName) {
        if (!(this_present_deviceName && that_present_deviceName))
          return false;
        if (!this.deviceName.equals(that.deviceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deviceName = true && (isSetDeviceName());
      list.add(present_deviceName);
      if (present_deviceName)
        list.add(deviceName);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryTagsbyDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryTagsbyDevice_args(");
      boolean first = true;

      sb.append("deviceName:");
      if (this.deviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryTagsbyDevice_argsStandardSchemeFactory implements SchemeFactory {
      public QueryTagsbyDevice_argsStandardScheme getScheme() {
        return new QueryTagsbyDevice_argsStandardScheme();
      }
    }

    private static class QueryTagsbyDevice_argsStandardScheme extends StandardScheme<QueryTagsbyDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTagsbyDevice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceName = iprot.readString();
                struct.setDeviceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTagsbyDevice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceName != null) {
          oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.deviceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryTagsbyDevice_argsTupleSchemeFactory implements SchemeFactory {
      public QueryTagsbyDevice_argsTupleScheme getScheme() {
        return new QueryTagsbyDevice_argsTupleScheme();
      }
    }

    private static class QueryTagsbyDevice_argsTupleScheme extends TupleScheme<QueryTagsbyDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryTagsbyDevice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceName()) {
          oprot.writeString(struct.deviceName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryTagsbyDevice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceName = iprot.readString();
          struct.setDeviceNameIsSet(true);
        }
      }
    }

  }

  public static class QueryTagsbyDevice_result implements org.apache.thrift.TBase<QueryTagsbyDevice_result, QueryTagsbyDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTagsbyDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryTagsbyDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryTagsbyDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryTagsbyDevice_resultTupleSchemeFactory());
    }

    public int success; // required
    public DeviceNotFoundException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTagsbyDevice_result.class, metaDataMap);
    }

    public QueryTagsbyDevice_result() {
    }

    public QueryTagsbyDevice_result(
      int success,
      DeviceNotFoundException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryTagsbyDevice_result(QueryTagsbyDevice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new DeviceNotFoundException(other.e);
      }
    }

    public QueryTagsbyDevice_result deepCopy() {
      return new QueryTagsbyDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public QueryTagsbyDevice_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public DeviceNotFoundException getE() {
      return this.e;
    }

    public QueryTagsbyDevice_result setE(DeviceNotFoundException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DeviceNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryTagsbyDevice_result)
        return this.equals((QueryTagsbyDevice_result)that);
      return false;
    }

    public boolean equals(QueryTagsbyDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryTagsbyDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryTagsbyDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryTagsbyDevice_resultStandardSchemeFactory implements SchemeFactory {
      public QueryTagsbyDevice_resultStandardScheme getScheme() {
        return new QueryTagsbyDevice_resultStandardScheme();
      }
    }

    private static class QueryTagsbyDevice_resultStandardScheme extends StandardScheme<QueryTagsbyDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTagsbyDevice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DeviceNotFoundException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTagsbyDevice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryTagsbyDevice_resultTupleSchemeFactory implements SchemeFactory {
      public QueryTagsbyDevice_resultTupleScheme getScheme() {
        return new QueryTagsbyDevice_resultTupleScheme();
      }
    }

    private static class QueryTagsbyDevice_resultTupleScheme extends TupleScheme<QueryTagsbyDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryTagsbyDevice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryTagsbyDevice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DeviceNotFoundException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class EnumTagName_args implements org.apache.thrift.TBase<EnumTagName_args, EnumTagName_args._Fields>, java.io.Serializable, Cloneable, Comparable<EnumTagName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnumTagName_args");

    private static final org.apache.thrift.protocol.TField H_RECORDSET_FIELD_DESC = new org.apache.thrift.protocol.TField("hRecordset", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnumTagName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnumTagName_argsTupleSchemeFactory());
    }

    public int hRecordset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      H_RECORDSET((short)1, "hRecordset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // H_RECORDSET
            return H_RECORDSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRECORDSET_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.H_RECORDSET, new org.apache.thrift.meta_data.FieldMetaData("hRecordset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnumTagName_args.class, metaDataMap);
    }

    public EnumTagName_args() {
    }

    public EnumTagName_args(
      int hRecordset)
    {
      this();
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnumTagName_args(EnumTagName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hRecordset = other.hRecordset;
    }

    public EnumTagName_args deepCopy() {
      return new EnumTagName_args(this);
    }

    @Override
    public void clear() {
      setHRecordsetIsSet(false);
      this.hRecordset = 0;
    }

    public int getHRecordset() {
      return this.hRecordset;
    }

    public EnumTagName_args setHRecordset(int hRecordset) {
      this.hRecordset = hRecordset;
      setHRecordsetIsSet(true);
      return this;
    }

    public void unsetHRecordset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    /** Returns true if field hRecordset is set (has been assigned a value) and false otherwise */
    public boolean isSetHRecordset() {
      return EncodingUtils.testBit(__isset_bitfield, __HRECORDSET_ISSET_ID);
    }

    public void setHRecordsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRECORDSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case H_RECORDSET:
        if (value == null) {
          unsetHRecordset();
        } else {
          setHRecordset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case H_RECORDSET:
        return Integer.valueOf(getHRecordset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case H_RECORDSET:
        return isSetHRecordset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnumTagName_args)
        return this.equals((EnumTagName_args)that);
      return false;
    }

    public boolean equals(EnumTagName_args that) {
      if (that == null)
        return false;

      boolean this_present_hRecordset = true;
      boolean that_present_hRecordset = true;
      if (this_present_hRecordset || that_present_hRecordset) {
        if (!(this_present_hRecordset && that_present_hRecordset))
          return false;
        if (this.hRecordset != that.hRecordset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hRecordset = true;
      list.add(present_hRecordset);
      if (present_hRecordset)
        list.add(hRecordset);

      return list.hashCode();
    }

    @Override
    public int compareTo(EnumTagName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHRecordset()).compareTo(other.isSetHRecordset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHRecordset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hRecordset, other.hRecordset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnumTagName_args(");
      boolean first = true;

      sb.append("hRecordset:");
      sb.append(this.hRecordset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnumTagName_argsStandardSchemeFactory implements SchemeFactory {
      public EnumTagName_argsStandardScheme getScheme() {
        return new EnumTagName_argsStandardScheme();
      }
    }

    private static class EnumTagName_argsStandardScheme extends StandardScheme<EnumTagName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnumTagName_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // H_RECORDSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hRecordset = iprot.readI32();
                struct.setHRecordsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnumTagName_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(H_RECORDSET_FIELD_DESC);
        oprot.writeI32(struct.hRecordset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnumTagName_argsTupleSchemeFactory implements SchemeFactory {
      public EnumTagName_argsTupleScheme getScheme() {
        return new EnumTagName_argsTupleScheme();
      }
    }

    private static class EnumTagName_argsTupleScheme extends TupleScheme<EnumTagName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnumTagName_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHRecordset()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHRecordset()) {
          oprot.writeI32(struct.hRecordset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnumTagName_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hRecordset = iprot.readI32();
          struct.setHRecordsetIsSet(true);
        }
      }
    }

  }

  public static class EnumTagName_result implements org.apache.thrift.TBase<EnumTagName_result, EnumTagName_result._Fields>, java.io.Serializable, Cloneable, Comparable<EnumTagName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnumTagName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnumTagName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnumTagName_resultTupleSchemeFactory());
    }

    public String success; // required
    public HandleErrorException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnumTagName_result.class, metaDataMap);
    }

    public EnumTagName_result() {
    }

    public EnumTagName_result(
      String success,
      HandleErrorException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnumTagName_result(EnumTagName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new HandleErrorException(other.e);
      }
    }

    public EnumTagName_result deepCopy() {
      return new EnumTagName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public EnumTagName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HandleErrorException getE() {
      return this.e;
    }

    public EnumTagName_result setE(HandleErrorException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((HandleErrorException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnumTagName_result)
        return this.equals((EnumTagName_result)that);
      return false;
    }

    public boolean equals(EnumTagName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(EnumTagName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnumTagName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnumTagName_resultStandardSchemeFactory implements SchemeFactory {
      public EnumTagName_resultStandardScheme getScheme() {
        return new EnumTagName_resultStandardScheme();
      }
    }

    private static class EnumTagName_resultStandardScheme extends StandardScheme<EnumTagName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnumTagName_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new HandleErrorException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnumTagName_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnumTagName_resultTupleSchemeFactory implements SchemeFactory {
      public EnumTagName_resultTupleScheme getScheme() {
        return new EnumTagName_resultTupleScheme();
      }
    }

    private static class EnumTagName_resultTupleScheme extends TupleScheme<EnumTagName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnumTagName_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnumTagName_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new HandleErrorException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetTagNamebyId_args implements org.apache.thrift.TBase<GetTagNamebyId_args, GetTagNamebyId_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetTagNamebyId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTagNamebyId_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTagNamebyId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTagNamebyId_argsTupleSchemeFactory());
    }

    public int tagId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tagId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTagNamebyId_args.class, metaDataMap);
    }

    public GetTagNamebyId_args() {
    }

    public GetTagNamebyId_args(
      int tagId)
    {
      this();
      this.tagId = tagId;
      setTagIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTagNamebyId_args(GetTagNamebyId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tagId = other.tagId;
    }

    public GetTagNamebyId_args deepCopy() {
      return new GetTagNamebyId_args(this);
    }

    @Override
    public void clear() {
      setTagIdIsSet(false);
      this.tagId = 0;
    }

    public int getTagId() {
      return this.tagId;
    }

    public GetTagNamebyId_args setTagId(int tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return Integer.valueOf(getTagId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTagId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTagNamebyId_args)
        return this.equals((GetTagNamebyId_args)that);
      return false;
    }

    public boolean equals(GetTagNamebyId_args that) {
      if (that == null)
        return false;

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagId = true;
      list.add(present_tagId);
      if (present_tagId)
        list.add(tagId);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTagNamebyId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(other.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, other.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTagNamebyId_args(");
      boolean first = true;

      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTagNamebyId_argsStandardSchemeFactory implements SchemeFactory {
      public GetTagNamebyId_argsStandardScheme getScheme() {
        return new GetTagNamebyId_argsStandardScheme();
      }
    }

    private static class GetTagNamebyId_argsStandardScheme extends StandardScheme<GetTagNamebyId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTagNamebyId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tagId = iprot.readI32();
                struct.setTagIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTagNamebyId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI32(struct.tagId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTagNamebyId_argsTupleSchemeFactory implements SchemeFactory {
      public GetTagNamebyId_argsTupleScheme getScheme() {
        return new GetTagNamebyId_argsTupleScheme();
      }
    }

    private static class GetTagNamebyId_argsTupleScheme extends TupleScheme<GetTagNamebyId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTagNamebyId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagId()) {
          oprot.writeI32(struct.tagId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTagNamebyId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tagId = iprot.readI32();
          struct.setTagIdIsSet(true);
        }
      }
    }

  }

  public static class GetTagNamebyId_result implements org.apache.thrift.TBase<GetTagNamebyId_result, GetTagNamebyId_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetTagNamebyId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTagNamebyId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTagNamebyId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTagNamebyId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTagNamebyId_result.class, metaDataMap);
    }

    public GetTagNamebyId_result() {
    }

    public GetTagNamebyId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTagNamebyId_result(GetTagNamebyId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetTagNamebyId_result deepCopy() {
      return new GetTagNamebyId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetTagNamebyId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTagNamebyId_result)
        return this.equals((GetTagNamebyId_result)that);
      return false;
    }

    public boolean equals(GetTagNamebyId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTagNamebyId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTagNamebyId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTagNamebyId_resultStandardSchemeFactory implements SchemeFactory {
      public GetTagNamebyId_resultStandardScheme getScheme() {
        return new GetTagNamebyId_resultStandardScheme();
      }
    }

    private static class GetTagNamebyId_resultStandardScheme extends StandardScheme<GetTagNamebyId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTagNamebyId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTagNamebyId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTagNamebyId_resultTupleSchemeFactory implements SchemeFactory {
      public GetTagNamebyId_resultTupleScheme getScheme() {
        return new GetTagNamebyId_resultTupleScheme();
      }
    }

    private static class GetTagNamebyId_resultTupleScheme extends TupleScheme<GetTagNamebyId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTagNamebyId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTagNamebyId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_args implements org.apache.thrift.TBase<SetValue_args, SetValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_args");

    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_argsTupleSchemeFactory());
    }

    public TAGVAL value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALUE((short)1, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGVAL.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_args.class, metaDataMap);
    }

    public SetValue_args() {
    }

    public SetValue_args(
      TAGVAL value)
    {
      this();
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_args(SetValue_args other) {
      if (other.isSetValue()) {
        this.value = new TAGVAL(other.value);
      }
    }

    public SetValue_args deepCopy() {
      return new SetValue_args(this);
    }

    @Override
    public void clear() {
      this.value = null;
    }

    public TAGVAL getValue() {
      return this.value;
    }

    public SetValue_args setValue(TAGVAL value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((TAGVAL)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_args)
        return this.equals((SetValue_args)that);
      return false;
    }

    public boolean equals(SetValue_args that) {
      if (that == null)
        return false;

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_args(");
      boolean first = true;

      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (value != null) {
        value.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_argsStandardScheme getScheme() {
        return new SetValue_argsStandardScheme();
      }
    }

    private static class SetValue_argsStandardScheme extends StandardScheme<SetValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.value = new TAGVAL();
                struct.value.read(iprot);
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_argsTupleScheme getScheme() {
        return new SetValue_argsTupleScheme();
      }
    }

    private static class SetValue_argsTupleScheme extends TupleScheme<SetValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValue()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValue()) {
          struct.value.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.value = new TAGVAL();
          struct.value.read(iprot);
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_result implements org.apache.thrift.TBase<SetValue_result, SetValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_resultTupleSchemeFactory());
    }

    public WriteValueException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_result.class, metaDataMap);
    }

    public SetValue_result() {
    }

    public SetValue_result(
      WriteValueException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_result(SetValue_result other) {
      if (other.isSetE()) {
        this.e = new WriteValueException(other.e);
      }
    }

    public SetValue_result deepCopy() {
      return new SetValue_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public WriteValueException getE() {
      return this.e;
    }

    public SetValue_result setE(WriteValueException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((WriteValueException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_result)
        return this.equals((SetValue_result)that);
      return false;
    }

    public boolean equals(SetValue_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_resultStandardScheme getScheme() {
        return new SetValue_resultStandardScheme();
      }
    }

    private static class SetValue_resultStandardScheme extends StandardScheme<SetValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new WriteValueException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_resultTupleScheme getScheme() {
        return new SetValue_resultTupleScheme();
      }
    }

    private static class SetValue_resultTupleScheme extends TupleScheme<SetValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new WriteValueException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class SetValues_args implements org.apache.thrift.TBase<SetValues_args, SetValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValues_args");

    private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValues_argsTupleSchemeFactory());
    }

    public List<TAGVAL> values; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALUES((short)1, "values");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALUES
            return VALUES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGVAL.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValues_args.class, metaDataMap);
    }

    public SetValues_args() {
    }

    public SetValues_args(
      List<TAGVAL> values)
    {
      this();
      this.values = values;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValues_args(SetValues_args other) {
      if (other.isSetValues()) {
        List<TAGVAL> __this__values = new ArrayList<TAGVAL>(other.values.size());
        for (TAGVAL other_element : other.values) {
          __this__values.add(new TAGVAL(other_element));
        }
        this.values = __this__values;
      }
    }

    public SetValues_args deepCopy() {
      return new SetValues_args(this);
    }

    @Override
    public void clear() {
      this.values = null;
    }

    public int getValuesSize() {
      return (this.values == null) ? 0 : this.values.size();
    }

    public java.util.Iterator<TAGVAL> getValuesIterator() {
      return (this.values == null) ? null : this.values.iterator();
    }

    public void addToValues(TAGVAL elem) {
      if (this.values == null) {
        this.values = new ArrayList<TAGVAL>();
      }
      this.values.add(elem);
    }

    public List<TAGVAL> getValues() {
      return this.values;
    }

    public SetValues_args setValues(List<TAGVAL> values) {
      this.values = values;
      return this;
    }

    public void unsetValues() {
      this.values = null;
    }

    /** Returns true if field values is set (has been assigned a value) and false otherwise */
    public boolean isSetValues() {
      return this.values != null;
    }

    public void setValuesIsSet(boolean value) {
      if (!value) {
        this.values = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALUES:
        if (value == null) {
          unsetValues();
        } else {
          setValues((List<TAGVAL>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALUES:
        return getValues();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALUES:
        return isSetValues();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValues_args)
        return this.equals((SetValues_args)that);
      return false;
    }

    public boolean equals(SetValues_args that) {
      if (that == null)
        return false;

      boolean this_present_values = true && this.isSetValues();
      boolean that_present_values = true && that.isSetValues();
      if (this_present_values || that_present_values) {
        if (!(this_present_values && that_present_values))
          return false;
        if (!this.values.equals(that.values))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_values = true && (isSetValues());
      list.add(present_values);
      if (present_values)
        list.add(values);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValues_args(");
      boolean first = true;

      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValues_argsStandardSchemeFactory implements SchemeFactory {
      public SetValues_argsStandardScheme getScheme() {
        return new SetValues_argsStandardScheme();
      }
    }

    private static class SetValues_argsStandardScheme extends StandardScheme<SetValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValues_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.values = new ArrayList<TAGVAL>(_list8.size);
                  TAGVAL _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TAGVAL();
                    _elem9.read(iprot);
                    struct.values.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValues_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.values != null) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
            for (TAGVAL _iter11 : struct.values)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValues_argsTupleSchemeFactory implements SchemeFactory {
      public SetValues_argsTupleScheme getScheme() {
        return new SetValues_argsTupleScheme();
      }
    }

    private static class SetValues_argsTupleScheme extends TupleScheme<SetValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValues_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValues()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValues()) {
          {
            oprot.writeI32(struct.values.size());
            for (TAGVAL _iter12 : struct.values)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValues_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.values = new ArrayList<TAGVAL>(_list13.size);
            TAGVAL _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new TAGVAL();
              _elem14.read(iprot);
              struct.values.add(_elem14);
            }
          }
          struct.setValuesIsSet(true);
        }
      }
    }

  }

  public static class SetValues_result implements org.apache.thrift.TBase<SetValues_result, SetValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValues_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValues_resultTupleSchemeFactory());
    }

    public WriteValueException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValues_result.class, metaDataMap);
    }

    public SetValues_result() {
    }

    public SetValues_result(
      WriteValueException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValues_result(SetValues_result other) {
      if (other.isSetE()) {
        this.e = new WriteValueException(other.e);
      }
    }

    public SetValues_result deepCopy() {
      return new SetValues_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public WriteValueException getE() {
      return this.e;
    }

    public SetValues_result setE(WriteValueException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((WriteValueException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValues_result)
        return this.equals((SetValues_result)that);
      return false;
    }

    public boolean equals(SetValues_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValues_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValues_resultStandardSchemeFactory implements SchemeFactory {
      public SetValues_resultStandardScheme getScheme() {
        return new SetValues_resultStandardScheme();
      }
    }

    private static class SetValues_resultStandardScheme extends StandardScheme<SetValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValues_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new WriteValueException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValues_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValues_resultTupleSchemeFactory implements SchemeFactory {
      public SetValues_resultTupleScheme getScheme() {
        return new SetValues_resultTupleScheme();
      }
    }

    private static class SetValues_resultTupleScheme extends TupleScheme<SetValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValues_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValues_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new WriteValueException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class RemoveTag_args implements org.apache.thrift.TBase<RemoveTag_args, RemoveTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveTag_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveTag_argsTupleSchemeFactory());
    }

    public int tagId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tagId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveTag_args.class, metaDataMap);
    }

    public RemoveTag_args() {
    }

    public RemoveTag_args(
      int tagId)
    {
      this();
      this.tagId = tagId;
      setTagIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveTag_args(RemoveTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tagId = other.tagId;
    }

    public RemoveTag_args deepCopy() {
      return new RemoveTag_args(this);
    }

    @Override
    public void clear() {
      setTagIdIsSet(false);
      this.tagId = 0;
    }

    public int getTagId() {
      return this.tagId;
    }

    public RemoveTag_args setTagId(int tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
      return this;
    }

    public void unsetTagId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return Integer.valueOf(getTagId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTagId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveTag_args)
        return this.equals((RemoveTag_args)that);
      return false;
    }

    public boolean equals(RemoveTag_args that) {
      if (that == null)
        return false;

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagId = true;
      list.add(present_tagId);
      if (present_tagId)
        list.add(tagId);

      return list.hashCode();
    }

    @Override
    public int compareTo(RemoveTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(other.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, other.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveTag_args(");
      boolean first = true;

      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveTag_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveTag_argsStandardScheme getScheme() {
        return new RemoveTag_argsStandardScheme();
      }
    }

    private static class RemoveTag_argsStandardScheme extends StandardScheme<RemoveTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveTag_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tagId = iprot.readI32();
                struct.setTagIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveTag_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI32(struct.tagId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveTag_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveTag_argsTupleScheme getScheme() {
        return new RemoveTag_argsTupleScheme();
      }
    }

    private static class RemoveTag_argsTupleScheme extends TupleScheme<RemoveTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveTag_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagId()) {
          oprot.writeI32(struct.tagId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveTag_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tagId = iprot.readI32();
          struct.setTagIdIsSet(true);
        }
      }
    }

  }

  public static class RemoveTag_result implements org.apache.thrift.TBase<RemoveTag_result, RemoveTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<RemoveTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveTag_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveTag_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveTag_result.class, metaDataMap);
    }

    public RemoveTag_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveTag_result(RemoveTag_result other) {
    }

    public RemoveTag_result deepCopy() {
      return new RemoveTag_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveTag_result)
        return this.equals((RemoveTag_result)that);
      return false;
    }

    public boolean equals(RemoveTag_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(RemoveTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveTag_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveTag_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveTag_resultStandardScheme getScheme() {
        return new RemoveTag_resultStandardScheme();
      }
    }

    private static class RemoveTag_resultStandardScheme extends StandardScheme<RemoveTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveTag_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveTag_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveTag_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveTag_resultTupleScheme getScheme() {
        return new RemoveTag_resultTupleScheme();
      }
    }

    private static class RemoveTag_resultTupleScheme extends TupleScheme<RemoveTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveTag_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveTag_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetTagInfo_args implements org.apache.thrift.TBase<GetTagInfo_args, GetTagInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetTagInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTagInfo_args");

    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTagInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTagInfo_argsTupleSchemeFactory());
    }

    public String tagName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAME((short)1, "tagName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAME
            return TAG_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTagInfo_args.class, metaDataMap);
    }

    public GetTagInfo_args() {
    }

    public GetTagInfo_args(
      String tagName)
    {
      this();
      this.tagName = tagName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTagInfo_args(GetTagInfo_args other) {
      if (other.isSetTagName()) {
        this.tagName = other.tagName;
      }
    }

    public GetTagInfo_args deepCopy() {
      return new GetTagInfo_args(this);
    }

    @Override
    public void clear() {
      this.tagName = null;
    }

    public String getTagName() {
      return this.tagName;
    }

    public GetTagInfo_args setTagName(String tagName) {
      this.tagName = tagName;
      return this;
    }

    public void unsetTagName() {
      this.tagName = null;
    }

    /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
    public boolean isSetTagName() {
      return this.tagName != null;
    }

    public void setTagNameIsSet(boolean value) {
      if (!value) {
        this.tagName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_NAME:
        if (value == null) {
          unsetTagName();
        } else {
          setTagName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAME:
        return getTagName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAME:
        return isSetTagName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTagInfo_args)
        return this.equals((GetTagInfo_args)that);
      return false;
    }

    public boolean equals(GetTagInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_tagName = true && this.isSetTagName();
      boolean that_present_tagName = true && that.isSetTagName();
      if (this_present_tagName || that_present_tagName) {
        if (!(this_present_tagName && that_present_tagName))
          return false;
        if (!this.tagName.equals(that.tagName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagName = true && (isSetTagName());
      list.add(present_tagName);
      if (present_tagName)
        list.add(tagName);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTagInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagName()).compareTo(other.isSetTagName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, other.tagName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTagInfo_args(");
      boolean first = true;

      sb.append("tagName:");
      if (this.tagName == null) {
        sb.append("null");
      } else {
        sb.append(this.tagName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTagInfo_argsStandardSchemeFactory implements SchemeFactory {
      public GetTagInfo_argsStandardScheme getScheme() {
        return new GetTagInfo_argsStandardScheme();
      }
    }

    private static class GetTagInfo_argsStandardScheme extends StandardScheme<GetTagInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTagInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagName = iprot.readString();
                struct.setTagNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTagInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagName != null) {
          oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.tagName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTagInfo_argsTupleSchemeFactory implements SchemeFactory {
      public GetTagInfo_argsTupleScheme getScheme() {
        return new GetTagInfo_argsTupleScheme();
      }
    }

    private static class GetTagInfo_argsTupleScheme extends TupleScheme<GetTagInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTagInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagName()) {
          oprot.writeString(struct.tagName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTagInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tagName = iprot.readString();
          struct.setTagNameIsSet(true);
        }
      }
    }

  }

  public static class GetTagInfo_result implements org.apache.thrift.TBase<GetTagInfo_result, GetTagInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetTagInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTagInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTagInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTagInfo_resultTupleSchemeFactory());
    }

    public TAGNODE success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGNODE.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTagInfo_result.class, metaDataMap);
    }

    public GetTagInfo_result() {
    }

    public GetTagInfo_result(
      TAGNODE success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTagInfo_result(GetTagInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAGNODE(other.success);
      }
    }

    public GetTagInfo_result deepCopy() {
      return new GetTagInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAGNODE getSuccess() {
      return this.success;
    }

    public GetTagInfo_result setSuccess(TAGNODE success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAGNODE)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTagInfo_result)
        return this.equals((GetTagInfo_result)that);
      return false;
    }

    public boolean equals(GetTagInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTagInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTagInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTagInfo_resultStandardSchemeFactory implements SchemeFactory {
      public GetTagInfo_resultStandardScheme getScheme() {
        return new GetTagInfo_resultStandardScheme();
      }
    }

    private static class GetTagInfo_resultStandardScheme extends StandardScheme<GetTagInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTagInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAGNODE();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTagInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTagInfo_resultTupleSchemeFactory implements SchemeFactory {
      public GetTagInfo_resultTupleScheme getScheme() {
        return new GetTagInfo_resultTupleScheme();
      }
    }

    private static class GetTagInfo_resultTupleScheme extends TupleScheme<GetTagInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTagInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTagInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAGNODE();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddNewTag_args implements org.apache.thrift.TBase<AddNewTag_args, AddNewTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddNewTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddNewTag_args");

    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IS_OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOverwrite", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddNewTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddNewTag_argsTupleSchemeFactory());
    }

    public TAGNODE node; // required
    public boolean isOverwrite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE((short)1, "node"),
      IS_OVERWRITE((short)2, "isOverwrite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE
            return NODE;
          case 2: // IS_OVERWRITE
            return IS_OVERWRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISOVERWRITE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGNODE.class)));
      tmpMap.put(_Fields.IS_OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("isOverwrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddNewTag_args.class, metaDataMap);
    }

    public AddNewTag_args() {
    }

    public AddNewTag_args(
      TAGNODE node,
      boolean isOverwrite)
    {
      this();
      this.node = node;
      this.isOverwrite = isOverwrite;
      setIsOverwriteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddNewTag_args(AddNewTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNode()) {
        this.node = new TAGNODE(other.node);
      }
      this.isOverwrite = other.isOverwrite;
    }

    public AddNewTag_args deepCopy() {
      return new AddNewTag_args(this);
    }

    @Override
    public void clear() {
      this.node = null;
      setIsOverwriteIsSet(false);
      this.isOverwrite = false;
    }

    public TAGNODE getNode() {
      return this.node;
    }

    public AddNewTag_args setNode(TAGNODE node) {
      this.node = node;
      return this;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public boolean isIsOverwrite() {
      return this.isOverwrite;
    }

    public AddNewTag_args setIsOverwrite(boolean isOverwrite) {
      this.isOverwrite = isOverwrite;
      setIsOverwriteIsSet(true);
      return this;
    }

    public void unsetIsOverwrite() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOVERWRITE_ISSET_ID);
    }

    /** Returns true if field isOverwrite is set (has been assigned a value) and false otherwise */
    public boolean isSetIsOverwrite() {
      return EncodingUtils.testBit(__isset_bitfield, __ISOVERWRITE_ISSET_ID);
    }

    public void setIsOverwriteIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOVERWRITE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((TAGNODE)value);
        }
        break;

      case IS_OVERWRITE:
        if (value == null) {
          unsetIsOverwrite();
        } else {
          setIsOverwrite((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE:
        return getNode();

      case IS_OVERWRITE:
        return Boolean.valueOf(isIsOverwrite());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE:
        return isSetNode();
      case IS_OVERWRITE:
        return isSetIsOverwrite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddNewTag_args)
        return this.equals((AddNewTag_args)that);
      return false;
    }

    public boolean equals(AddNewTag_args that) {
      if (that == null)
        return false;

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      boolean this_present_isOverwrite = true;
      boolean that_present_isOverwrite = true;
      if (this_present_isOverwrite || that_present_isOverwrite) {
        if (!(this_present_isOverwrite && that_present_isOverwrite))
          return false;
        if (this.isOverwrite != that.isOverwrite)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_node = true && (isSetNode());
      list.add(present_node);
      if (present_node)
        list.add(node);

      boolean present_isOverwrite = true;
      list.add(present_isOverwrite);
      if (present_isOverwrite)
        list.add(isOverwrite);

      return list.hashCode();
    }

    @Override
    public int compareTo(AddNewTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsOverwrite()).compareTo(other.isSetIsOverwrite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsOverwrite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOverwrite, other.isOverwrite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddNewTag_args(");
      boolean first = true;

      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isOverwrite:");
      sb.append(this.isOverwrite);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (node != null) {
        node.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddNewTag_argsStandardSchemeFactory implements SchemeFactory {
      public AddNewTag_argsStandardScheme getScheme() {
        return new AddNewTag_argsStandardScheme();
      }
    }

    private static class AddNewTag_argsStandardScheme extends StandardScheme<AddNewTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddNewTag_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.node = new TAGNODE();
                struct.node.read(iprot);
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_OVERWRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isOverwrite = iprot.readBool();
                struct.setIsOverwriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddNewTag_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          struct.node.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_OVERWRITE_FIELD_DESC);
        oprot.writeBool(struct.isOverwrite);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddNewTag_argsTupleSchemeFactory implements SchemeFactory {
      public AddNewTag_argsTupleScheme getScheme() {
        return new AddNewTag_argsTupleScheme();
      }
    }

    private static class AddNewTag_argsTupleScheme extends TupleScheme<AddNewTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddNewTag_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNode()) {
          optionals.set(0);
        }
        if (struct.isSetIsOverwrite()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNode()) {
          struct.node.write(oprot);
        }
        if (struct.isSetIsOverwrite()) {
          oprot.writeBool(struct.isOverwrite);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddNewTag_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.node = new TAGNODE();
          struct.node.read(iprot);
          struct.setNodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isOverwrite = iprot.readBool();
          struct.setIsOverwriteIsSet(true);
        }
      }
    }

  }

  public static class AddNewTag_result implements org.apache.thrift.TBase<AddNewTag_result, AddNewTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddNewTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddNewTag_result");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddNewTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddNewTag_resultTupleSchemeFactory());
    }

    public WriteValueException a; // required
    public TargetInsertException b; // required
    public DeviceNotFoundException c; // required
    public ParamErrorException d; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a"),
      B((short)2, "b"),
      C((short)3, "c"),
      D((short)4, "d");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          case 2: // B
            return B;
          case 3: // C
            return C;
          case 4: // D
            return D;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddNewTag_result.class, metaDataMap);
    }

    public AddNewTag_result() {
    }

    public AddNewTag_result(
      WriteValueException a,
      TargetInsertException b,
      DeviceNotFoundException c,
      ParamErrorException d)
    {
      this();
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddNewTag_result(AddNewTag_result other) {
      if (other.isSetA()) {
        this.a = new WriteValueException(other.a);
      }
      if (other.isSetB()) {
        this.b = new TargetInsertException(other.b);
      }
      if (other.isSetC()) {
        this.c = new DeviceNotFoundException(other.c);
      }
      if (other.isSetD()) {
        this.d = new ParamErrorException(other.d);
      }
    }

    public AddNewTag_result deepCopy() {
      return new AddNewTag_result(this);
    }

    @Override
    public void clear() {
      this.a = null;
      this.b = null;
      this.c = null;
      this.d = null;
    }

    public WriteValueException getA() {
      return this.a;
    }

    public AddNewTag_result setA(WriteValueException a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public TargetInsertException getB() {
      return this.b;
    }

    public AddNewTag_result setB(TargetInsertException b) {
      this.b = b;
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public DeviceNotFoundException getC() {
      return this.c;
    }

    public AddNewTag_result setC(DeviceNotFoundException c) {
      this.c = c;
      return this;
    }

    public void unsetC() {
      this.c = null;
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
      return this.c != null;
    }

    public void setCIsSet(boolean value) {
      if (!value) {
        this.c = null;
      }
    }

    public ParamErrorException getD() {
      return this.d;
    }

    public AddNewTag_result setD(ParamErrorException d) {
      this.d = d;
      return this;
    }

    public void unsetD() {
      this.d = null;
    }

    /** Returns true if field d is set (has been assigned a value) and false otherwise */
    public boolean isSetD() {
      return this.d != null;
    }

    public void setDIsSet(boolean value) {
      if (!value) {
        this.d = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((WriteValueException)value);
        }
        break;

      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((TargetInsertException)value);
        }
        break;

      case C:
        if (value == null) {
          unsetC();
        } else {
          setC((DeviceNotFoundException)value);
        }
        break;

      case D:
        if (value == null) {
          unsetD();
        } else {
          setD((ParamErrorException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      case B:
        return getB();

      case C:
        return getC();

      case D:
        return getD();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      case B:
        return isSetB();
      case C:
        return isSetC();
      case D:
        return isSetD();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddNewTag_result)
        return this.equals((AddNewTag_result)that);
      return false;
    }

    public boolean equals(AddNewTag_result that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      boolean this_present_c = true && this.isSetC();
      boolean that_present_c = true && that.isSetC();
      if (this_present_c || that_present_c) {
        if (!(this_present_c && that_present_c))
          return false;
        if (!this.c.equals(that.c))
          return false;
      }

      boolean this_present_d = true && this.isSetD();
      boolean that_present_d = true && that.isSetD();
      if (this_present_d || that_present_d) {
        if (!(this_present_d && that_present_d))
          return false;
        if (!this.d.equals(that.d))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_a = true && (isSetA());
      list.add(present_a);
      if (present_a)
        list.add(a);

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      boolean present_c = true && (isSetC());
      list.add(present_c);
      if (present_c)
        list.add(c);

      boolean present_d = true && (isSetD());
      list.add(present_d);
      if (present_d)
        list.add(d);

      return list.hashCode();
    }

    @Override
    public int compareTo(AddNewTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddNewTag_result(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c:");
      if (this.c == null) {
        sb.append("null");
      } else {
        sb.append(this.c);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d:");
      if (this.d == null) {
        sb.append("null");
      } else {
        sb.append(this.d);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddNewTag_resultStandardSchemeFactory implements SchemeFactory {
      public AddNewTag_resultStandardScheme getScheme() {
        return new AddNewTag_resultStandardScheme();
      }
    }

    private static class AddNewTag_resultStandardScheme extends StandardScheme<AddNewTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddNewTag_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.a = new WriteValueException();
                struct.a.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.b = new TargetInsertException();
                struct.b.read(iprot);
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.c = new DeviceNotFoundException();
                struct.c.read(iprot);
                struct.setCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.d = new ParamErrorException();
                struct.d.read(iprot);
                struct.setDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddNewTag_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.a.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          struct.b.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.c != null) {
          oprot.writeFieldBegin(C_FIELD_DESC);
          struct.c.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.d != null) {
          oprot.writeFieldBegin(D_FIELD_DESC);
          struct.d.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddNewTag_resultTupleSchemeFactory implements SchemeFactory {
      public AddNewTag_resultTupleScheme getScheme() {
        return new AddNewTag_resultTupleScheme();
      }
    }

    private static class AddNewTag_resultTupleScheme extends TupleScheme<AddNewTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddNewTag_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        if (struct.isSetB()) {
          optionals.set(1);
        }
        if (struct.isSetC()) {
          optionals.set(2);
        }
        if (struct.isSetD()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetA()) {
          struct.a.write(oprot);
        }
        if (struct.isSetB()) {
          struct.b.write(oprot);
        }
        if (struct.isSetC()) {
          struct.c.write(oprot);
        }
        if (struct.isSetD()) {
          struct.d.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddNewTag_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.a = new WriteValueException();
          struct.a.read(iprot);
          struct.setAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.b = new TargetInsertException();
          struct.b.read(iprot);
          struct.setBIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c = new DeviceNotFoundException();
          struct.c.read(iprot);
          struct.setCIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d = new ParamErrorException();
          struct.d.read(iprot);
          struct.setDIsSet(true);
        }
      }
    }

  }

  public static class EnumNextTag_args implements org.apache.thrift.TBase<EnumNextTag_args, EnumNextTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<EnumNextTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnumNextTag_args");

    private static final org.apache.thrift.protocol.TField HWND_FIELD_DESC = new org.apache.thrift.protocol.TField("hwnd", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnumNextTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnumNextTag_argsTupleSchemeFactory());
    }

    public int hwnd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HWND((short)1, "hwnd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HWND
            return HWND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HWND_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HWND, new org.apache.thrift.meta_data.FieldMetaData("hwnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnumNextTag_args.class, metaDataMap);
    }

    public EnumNextTag_args() {
    }

    public EnumNextTag_args(
      int hwnd)
    {
      this();
      this.hwnd = hwnd;
      setHwndIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnumNextTag_args(EnumNextTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hwnd = other.hwnd;
    }

    public EnumNextTag_args deepCopy() {
      return new EnumNextTag_args(this);
    }

    @Override
    public void clear() {
      setHwndIsSet(false);
      this.hwnd = 0;
    }

    public int getHwnd() {
      return this.hwnd;
    }

    public EnumNextTag_args setHwnd(int hwnd) {
      this.hwnd = hwnd;
      setHwndIsSet(true);
      return this;
    }

    public void unsetHwnd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HWND_ISSET_ID);
    }

    /** Returns true if field hwnd is set (has been assigned a value) and false otherwise */
    public boolean isSetHwnd() {
      return EncodingUtils.testBit(__isset_bitfield, __HWND_ISSET_ID);
    }

    public void setHwndIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HWND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HWND:
        if (value == null) {
          unsetHwnd();
        } else {
          setHwnd((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HWND:
        return Integer.valueOf(getHwnd());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HWND:
        return isSetHwnd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnumNextTag_args)
        return this.equals((EnumNextTag_args)that);
      return false;
    }

    public boolean equals(EnumNextTag_args that) {
      if (that == null)
        return false;

      boolean this_present_hwnd = true;
      boolean that_present_hwnd = true;
      if (this_present_hwnd || that_present_hwnd) {
        if (!(this_present_hwnd && that_present_hwnd))
          return false;
        if (this.hwnd != that.hwnd)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hwnd = true;
      list.add(present_hwnd);
      if (present_hwnd)
        list.add(hwnd);

      return list.hashCode();
    }

    @Override
    public int compareTo(EnumNextTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHwnd()).compareTo(other.isSetHwnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHwnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hwnd, other.hwnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnumNextTag_args(");
      boolean first = true;

      sb.append("hwnd:");
      sb.append(this.hwnd);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnumNextTag_argsStandardSchemeFactory implements SchemeFactory {
      public EnumNextTag_argsStandardScheme getScheme() {
        return new EnumNextTag_argsStandardScheme();
      }
    }

    private static class EnumNextTag_argsStandardScheme extends StandardScheme<EnumNextTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnumNextTag_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HWND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hwnd = iprot.readI32();
                struct.setHwndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnumNextTag_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HWND_FIELD_DESC);
        oprot.writeI32(struct.hwnd);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnumNextTag_argsTupleSchemeFactory implements SchemeFactory {
      public EnumNextTag_argsTupleScheme getScheme() {
        return new EnumNextTag_argsTupleScheme();
      }
    }

    private static class EnumNextTag_argsTupleScheme extends TupleScheme<EnumNextTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnumNextTag_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHwnd()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHwnd()) {
          oprot.writeI32(struct.hwnd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnumNextTag_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hwnd = iprot.readI32();
          struct.setHwndIsSet(true);
        }
      }
    }

  }

  public static class EnumNextTag_result implements org.apache.thrift.TBase<EnumNextTag_result, EnumNextTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<EnumNextTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnumNextTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnumNextTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnumNextTag_resultTupleSchemeFactory());
    }

    public TAGNODE success; // required
    public HandleErrorException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGNODE.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnumNextTag_result.class, metaDataMap);
    }

    public EnumNextTag_result() {
    }

    public EnumNextTag_result(
      TAGNODE success,
      HandleErrorException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnumNextTag_result(EnumNextTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAGNODE(other.success);
      }
      if (other.isSetE()) {
        this.e = new HandleErrorException(other.e);
      }
    }

    public EnumNextTag_result deepCopy() {
      return new EnumNextTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TAGNODE getSuccess() {
      return this.success;
    }

    public EnumNextTag_result setSuccess(TAGNODE success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HandleErrorException getE() {
      return this.e;
    }

    public EnumNextTag_result setE(HandleErrorException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAGNODE)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((HandleErrorException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnumNextTag_result)
        return this.equals((EnumNextTag_result)that);
      return false;
    }

    public boolean equals(EnumNextTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(EnumNextTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnumNextTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnumNextTag_resultStandardSchemeFactory implements SchemeFactory {
      public EnumNextTag_resultStandardScheme getScheme() {
        return new EnumNextTag_resultStandardScheme();
      }
    }

    private static class EnumNextTag_resultStandardScheme extends StandardScheme<EnumNextTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnumNextTag_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAGNODE();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new HandleErrorException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnumNextTag_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnumNextTag_resultTupleSchemeFactory implements SchemeFactory {
      public EnumNextTag_resultTupleScheme getScheme() {
        return new EnumNextTag_resultTupleScheme();
      }
    }

    private static class EnumNextTag_resultTupleScheme extends TupleScheme<EnumNextTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnumNextTag_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnumNextTag_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TAGNODE();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new HandleErrorException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class SubscribeTags_args implements org.apache.thrift.TBase<SubscribeTags_args, SubscribeTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<SubscribeTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscribeTags_args");

    private static final org.apache.thrift.protocol.TField TAG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tagNames", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SubscribeTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SubscribeTags_argsTupleSchemeFactory());
    }

    public String tagNames; // required
    public short count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAMES((short)1, "tagNames"),
      COUNT((short)2, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAMES
            return TAG_NAMES;
          case 2: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tagNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscribeTags_args.class, metaDataMap);
    }

    public SubscribeTags_args() {
    }

    public SubscribeTags_args(
      String tagNames,
      short count)
    {
      this();
      this.tagNames = tagNames;
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SubscribeTags_args(SubscribeTags_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTagNames()) {
        this.tagNames = other.tagNames;
      }
      this.count = other.count;
    }

    public SubscribeTags_args deepCopy() {
      return new SubscribeTags_args(this);
    }

    @Override
    public void clear() {
      this.tagNames = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getTagNames() {
      return this.tagNames;
    }

    public SubscribeTags_args setTagNames(String tagNames) {
      this.tagNames = tagNames;
      return this;
    }

    public void unsetTagNames() {
      this.tagNames = null;
    }

    /** Returns true if field tagNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTagNames() {
      return this.tagNames != null;
    }

    public void setTagNamesIsSet(boolean value) {
      if (!value) {
        this.tagNames = null;
      }
    }

    public short getCount() {
      return this.count;
    }

    public SubscribeTags_args setCount(short count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_NAMES:
        if (value == null) {
          unsetTagNames();
        } else {
          setTagNames((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAMES:
        return getTagNames();

      case COUNT:
        return Short.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAMES:
        return isSetTagNames();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SubscribeTags_args)
        return this.equals((SubscribeTags_args)that);
      return false;
    }

    public boolean equals(SubscribeTags_args that) {
      if (that == null)
        return false;

      boolean this_present_tagNames = true && this.isSetTagNames();
      boolean that_present_tagNames = true && that.isSetTagNames();
      if (this_present_tagNames || that_present_tagNames) {
        if (!(this_present_tagNames && that_present_tagNames))
          return false;
        if (!this.tagNames.equals(that.tagNames))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagNames = true && (isSetTagNames());
      list.add(present_tagNames);
      if (present_tagNames)
        list.add(tagNames);

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      return list.hashCode();
    }

    @Override
    public int compareTo(SubscribeTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagNames()).compareTo(other.isSetTagNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagNames, other.tagNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SubscribeTags_args(");
      boolean first = true;

      sb.append("tagNames:");
      if (this.tagNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tagNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SubscribeTags_argsStandardSchemeFactory implements SchemeFactory {
      public SubscribeTags_argsStandardScheme getScheme() {
        return new SubscribeTags_argsStandardScheme();
      }
    }

    private static class SubscribeTags_argsStandardScheme extends StandardScheme<SubscribeTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SubscribeTags_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagNames = iprot.readString();
                struct.setTagNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.count = iprot.readI16();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SubscribeTags_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagNames != null) {
          oprot.writeFieldBegin(TAG_NAMES_FIELD_DESC);
          oprot.writeString(struct.tagNames);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI16(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SubscribeTags_argsTupleSchemeFactory implements SchemeFactory {
      public SubscribeTags_argsTupleScheme getScheme() {
        return new SubscribeTags_argsTupleScheme();
      }
    }

    private static class SubscribeTags_argsTupleScheme extends TupleScheme<SubscribeTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SubscribeTags_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagNames()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTagNames()) {
          oprot.writeString(struct.tagNames);
        }
        if (struct.isSetCount()) {
          oprot.writeI16(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SubscribeTags_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tagNames = iprot.readString();
          struct.setTagNamesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI16();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class SubscribeTags_result implements org.apache.thrift.TBase<SubscribeTags_result, SubscribeTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<SubscribeTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscribeTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SubscribeTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SubscribeTags_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscribeTags_result.class, metaDataMap);
    }

    public SubscribeTags_result() {
    }

    public SubscribeTags_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SubscribeTags_result(SubscribeTags_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public SubscribeTags_result deepCopy() {
      return new SubscribeTags_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public SubscribeTags_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SubscribeTags_result)
        return this.equals((SubscribeTags_result)that);
      return false;
    }

    public boolean equals(SubscribeTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(SubscribeTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SubscribeTags_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SubscribeTags_resultStandardSchemeFactory implements SchemeFactory {
      public SubscribeTags_resultStandardScheme getScheme() {
        return new SubscribeTags_resultStandardScheme();
      }
    }

    private static class SubscribeTags_resultStandardScheme extends StandardScheme<SubscribeTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SubscribeTags_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SubscribeTags_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SubscribeTags_resultTupleSchemeFactory implements SchemeFactory {
      public SubscribeTags_resultTupleScheme getScheme() {
        return new SubscribeTags_resultTupleScheme();
      }
    }

    private static class SubscribeTags_resultTupleScheme extends TupleScheme<SubscribeTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SubscribeTags_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SubscribeTags_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetSubTagValue_args implements org.apache.thrift.TBase<GetSubTagValue_args, GetSubTagValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSubTagValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSubTagValue_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSubTagValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSubTagValue_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSubTagValue_args.class, metaDataMap);
    }

    public GetSubTagValue_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSubTagValue_args(GetSubTagValue_args other) {
    }

    public GetSubTagValue_args deepCopy() {
      return new GetSubTagValue_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSubTagValue_args)
        return this.equals((GetSubTagValue_args)that);
      return false;
    }

    public boolean equals(GetSubTagValue_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetSubTagValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSubTagValue_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSubTagValue_argsStandardSchemeFactory implements SchemeFactory {
      public GetSubTagValue_argsStandardScheme getScheme() {
        return new GetSubTagValue_argsStandardScheme();
      }
    }

    private static class GetSubTagValue_argsStandardScheme extends StandardScheme<GetSubTagValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSubTagValue_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSubTagValue_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSubTagValue_argsTupleSchemeFactory implements SchemeFactory {
      public GetSubTagValue_argsTupleScheme getScheme() {
        return new GetSubTagValue_argsTupleScheme();
      }
    }

    private static class GetSubTagValue_argsTupleScheme extends TupleScheme<GetSubTagValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSubTagValue_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSubTagValue_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetSubTagValue_result implements org.apache.thrift.TBase<GetSubTagValue_result, GetSubTagValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSubTagValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSubTagValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSubTagValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSubTagValue_resultTupleSchemeFactory());
    }

    public TAGVAL success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAGVAL.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSubTagValue_result.class, metaDataMap);
    }

    public GetSubTagValue_result() {
    }

    public GetSubTagValue_result(
      TAGVAL success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSubTagValue_result(GetSubTagValue_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAGVAL(other.success);
      }
    }

    public GetSubTagValue_result deepCopy() {
      return new GetSubTagValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAGVAL getSuccess() {
      return this.success;
    }

    public GetSubTagValue_result setSuccess(TAGVAL success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAGVAL)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSubTagValue_result)
        return this.equals((GetSubTagValue_result)that);
      return false;
    }

    public boolean equals(GetSubTagValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetSubTagValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSubTagValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSubTagValue_resultStandardSchemeFactory implements SchemeFactory {
      public GetSubTagValue_resultStandardScheme getScheme() {
        return new GetSubTagValue_resultStandardScheme();
      }
    }

    private static class GetSubTagValue_resultStandardScheme extends StandardScheme<GetSubTagValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSubTagValue_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAGVAL();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSubTagValue_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSubTagValue_resultTupleSchemeFactory implements SchemeFactory {
      public GetSubTagValue_resultTupleScheme getScheme() {
        return new GetSubTagValue_resultTupleScheme();
      }
    }

    private static class GetSubTagValue_resultTupleScheme extends TupleScheme<GetSubTagValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSubTagValue_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSubTagValue_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAGVAL();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UnSubscribeTags_args implements org.apache.thrift.TBase<UnSubscribeTags_args, UnSubscribeTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<UnSubscribeTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnSubscribeTags_args");

    private static final org.apache.thrift.protocol.TField TAG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tagNames", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UnSubscribeTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UnSubscribeTags_argsTupleSchemeFactory());
    }

    public String tagNames; // required
    public short count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_NAMES((short)1, "tagNames"),
      COUNT((short)2, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_NAMES
            return TAG_NAMES;
          case 2: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tagNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnSubscribeTags_args.class, metaDataMap);
    }

    public UnSubscribeTags_args() {
    }

    public UnSubscribeTags_args(
      String tagNames,
      short count)
    {
      this();
      this.tagNames = tagNames;
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnSubscribeTags_args(UnSubscribeTags_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTagNames()) {
        this.tagNames = other.tagNames;
      }
      this.count = other.count;
    }

    public UnSubscribeTags_args deepCopy() {
      return new UnSubscribeTags_args(this);
    }

    @Override
    public void clear() {
      this.tagNames = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getTagNames() {
      return this.tagNames;
    }

    public UnSubscribeTags_args setTagNames(String tagNames) {
      this.tagNames = tagNames;
      return this;
    }

    public void unsetTagNames() {
      this.tagNames = null;
    }

    /** Returns true if field tagNames is set (has been assigned a value) and false otherwise */
    public boolean isSetTagNames() {
      return this.tagNames != null;
    }

    public void setTagNamesIsSet(boolean value) {
      if (!value) {
        this.tagNames = null;
      }
    }

    public short getCount() {
      return this.count;
    }

    public UnSubscribeTags_args setCount(short count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_NAMES:
        if (value == null) {
          unsetTagNames();
        } else {
          setTagNames((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_NAMES:
        return getTagNames();

      case COUNT:
        return Short.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_NAMES:
        return isSetTagNames();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UnSubscribeTags_args)
        return this.equals((UnSubscribeTags_args)that);
      return false;
    }

    public boolean equals(UnSubscribeTags_args that) {
      if (that == null)
        return false;

      boolean this_present_tagNames = true && this.isSetTagNames();
      boolean that_present_tagNames = true && that.isSetTagNames();
      if (this_present_tagNames || that_present_tagNames) {
        if (!(this_present_tagNames && that_present_tagNames))
          return false;
        if (!this.tagNames.equals(that.tagNames))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagNames = true && (isSetTagNames());
      list.add(present_tagNames);
      if (present_tagNames)
        list.add(tagNames);

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      return list.hashCode();
    }

    @Override
    public int compareTo(UnSubscribeTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagNames()).compareTo(other.isSetTagNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagNames, other.tagNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UnSubscribeTags_args(");
      boolean first = true;

      sb.append("tagNames:");
      if (this.tagNames == null) {
        sb.append("null");
      } else {
        sb.append(this.tagNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnSubscribeTags_argsStandardSchemeFactory implements SchemeFactory {
      public UnSubscribeTags_argsStandardScheme getScheme() {
        return new UnSubscribeTags_argsStandardScheme();
      }
    }

    private static class UnSubscribeTags_argsStandardScheme extends StandardScheme<UnSubscribeTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnSubscribeTags_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagNames = iprot.readString();
                struct.setTagNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.count = iprot.readI16();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnSubscribeTags_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagNames != null) {
          oprot.writeFieldBegin(TAG_NAMES_FIELD_DESC);
          oprot.writeString(struct.tagNames);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI16(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnSubscribeTags_argsTupleSchemeFactory implements SchemeFactory {
      public UnSubscribeTags_argsTupleScheme getScheme() {
        return new UnSubscribeTags_argsTupleScheme();
      }
    }

    private static class UnSubscribeTags_argsTupleScheme extends TupleScheme<UnSubscribeTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnSubscribeTags_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagNames()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTagNames()) {
          oprot.writeString(struct.tagNames);
        }
        if (struct.isSetCount()) {
          oprot.writeI16(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnSubscribeTags_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tagNames = iprot.readString();
          struct.setTagNamesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI16();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class UnSubscribeTags_result implements org.apache.thrift.TBase<UnSubscribeTags_result, UnSubscribeTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<UnSubscribeTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnSubscribeTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UnSubscribeTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UnSubscribeTags_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnSubscribeTags_result.class, metaDataMap);
    }

    public UnSubscribeTags_result() {
    }

    public UnSubscribeTags_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnSubscribeTags_result(UnSubscribeTags_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public UnSubscribeTags_result deepCopy() {
      return new UnSubscribeTags_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public UnSubscribeTags_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UnSubscribeTags_result)
        return this.equals((UnSubscribeTags_result)that);
      return false;
    }

    public boolean equals(UnSubscribeTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UnSubscribeTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UnSubscribeTags_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnSubscribeTags_resultStandardSchemeFactory implements SchemeFactory {
      public UnSubscribeTags_resultStandardScheme getScheme() {
        return new UnSubscribeTags_resultStandardScheme();
      }
    }

    private static class UnSubscribeTags_resultStandardScheme extends StandardScheme<UnSubscribeTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnSubscribeTags_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnSubscribeTags_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnSubscribeTags_resultTupleSchemeFactory implements SchemeFactory {
      public UnSubscribeTags_resultTupleScheme getScheme() {
        return new UnSubscribeTags_resultTupleScheme();
      }
    }

    private static class UnSubscribeTags_resultTupleScheme extends TupleScheme<UnSubscribeTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnSubscribeTags_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnSubscribeTags_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UnSubscribeAll_args implements org.apache.thrift.TBase<UnSubscribeAll_args, UnSubscribeAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<UnSubscribeAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnSubscribeAll_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UnSubscribeAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UnSubscribeAll_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnSubscribeAll_args.class, metaDataMap);
    }

    public UnSubscribeAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnSubscribeAll_args(UnSubscribeAll_args other) {
    }

    public UnSubscribeAll_args deepCopy() {
      return new UnSubscribeAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UnSubscribeAll_args)
        return this.equals((UnSubscribeAll_args)that);
      return false;
    }

    public boolean equals(UnSubscribeAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UnSubscribeAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UnSubscribeAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnSubscribeAll_argsStandardSchemeFactory implements SchemeFactory {
      public UnSubscribeAll_argsStandardScheme getScheme() {
        return new UnSubscribeAll_argsStandardScheme();
      }
    }

    private static class UnSubscribeAll_argsStandardScheme extends StandardScheme<UnSubscribeAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnSubscribeAll_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnSubscribeAll_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnSubscribeAll_argsTupleSchemeFactory implements SchemeFactory {
      public UnSubscribeAll_argsTupleScheme getScheme() {
        return new UnSubscribeAll_argsTupleScheme();
      }
    }

    private static class UnSubscribeAll_argsTupleScheme extends TupleScheme<UnSubscribeAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnSubscribeAll_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnSubscribeAll_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UnSubscribeAll_result implements org.apache.thrift.TBase<UnSubscribeAll_result, UnSubscribeAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<UnSubscribeAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnSubscribeAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UnSubscribeAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UnSubscribeAll_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnSubscribeAll_result.class, metaDataMap);
    }

    public UnSubscribeAll_result() {
    }

    public UnSubscribeAll_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnSubscribeAll_result(UnSubscribeAll_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public UnSubscribeAll_result deepCopy() {
      return new UnSubscribeAll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public UnSubscribeAll_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UnSubscribeAll_result)
        return this.equals((UnSubscribeAll_result)that);
      return false;
    }

    public boolean equals(UnSubscribeAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UnSubscribeAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UnSubscribeAll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnSubscribeAll_resultStandardSchemeFactory implements SchemeFactory {
      public UnSubscribeAll_resultStandardScheme getScheme() {
        return new UnSubscribeAll_resultStandardScheme();
      }
    }

    private static class UnSubscribeAll_resultStandardScheme extends StandardScheme<UnSubscribeAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnSubscribeAll_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnSubscribeAll_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnSubscribeAll_resultTupleSchemeFactory implements SchemeFactory {
      public UnSubscribeAll_resultTupleScheme getScheme() {
        return new UnSubscribeAll_resultTupleScheme();
      }
    }

    private static class UnSubscribeAll_resultTupleScheme extends TupleScheme<UnSubscribeAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnSubscribeAll_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnSubscribeAll_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
