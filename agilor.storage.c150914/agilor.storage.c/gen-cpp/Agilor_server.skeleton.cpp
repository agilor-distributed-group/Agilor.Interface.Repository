// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Agilor.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AgilorHandler : virtual public AgilorIf {
 public:
  AgilorHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void AddDevice(const DEVICE& device) {
    // Your implementation goes here
    printf("AddDevice\n");
  }

  void DeleteDevice(const std::string& deviceName) {
    // Your implementation goes here
    printf("DeleteDevice\n");
  }

  bool ModifyDevice(const DEVICE& device) {
    // Your implementation goes here
    printf("ModifyDevice\n");
  }

  int32_t QueryDeviceInfo() {
    // Your implementation goes here
    printf("QueryDeviceInfo\n");
  }

  void EnumDeviceInfo(DEVICE& _return, const int32_t hRecordset) {
    // Your implementation goes here
    printf("EnumDeviceInfo\n");
  }

  void GetAllDevices(std::vector<DEVICE> & _return) {
    // Your implementation goes here
    printf("GetAllDevices\n");
  }

  int32_t TagCountByDevice(const std::string& deviceName) {
    // Your implementation goes here
    printf("TagCountByDevice\n");
  }

  int32_t QuerySnapshots(const std::string& tagNames, const int32_t tagCount) {
    // Your implementation goes here
    printf("QuerySnapshots\n");
  }

  void GetNextTagValue(TAGVAL& _return, const int32_t hRecordset, const bool isRemoved) {
    // Your implementation goes here
    printf("GetNextTagValue\n");
  }

  int32_t QueryTagHistory(const std::string& tagName, const int32_t startTime, const int32_t endTime, const int32_t step) {
    // Your implementation goes here
    printf("QueryTagHistory\n");
  }

  void GetAggregateValue(TAGVAL& _return, const int32_t hRecordset, const AGGREGATE::type ag, const bool isRemoved) {
    // Your implementation goes here
    printf("GetAggregateValue\n");
  }

  int32_t QueryTagsbyDevice(const std::string& deviceName) {
    // Your implementation goes here
    printf("QueryTagsbyDevice\n");
  }

  void EnumTagName(std::string& _return, const int32_t hRecordset) {
    // Your implementation goes here
    printf("EnumTagName\n");
  }

  void GetTagNamebyId(std::string& _return, const int32_t tagId) {
    // Your implementation goes here
    printf("GetTagNamebyId\n");
  }

  void SetValue(const TAGVAL& value) {
    // Your implementation goes here
    printf("SetValue\n");
  }

  void SetValues(const std::vector<TAGVAL> & values) {
    // Your implementation goes here
    printf("SetValues\n");
  }

  void RemoveTag(const int32_t tagId) {
    // Your implementation goes here
    printf("RemoveTag\n");
  }

  void GetTagInfo(TAGNODE& _return, const std::string& tagName) {
    // Your implementation goes here
    printf("GetTagInfo\n");
  }

  void AddNewTag(const TAGNODE& node, const bool isOverwrite) {
    // Your implementation goes here
    printf("AddNewTag\n");
  }

  void EnumNextTag(TAGNODE& _return, const int32_t hwnd) {
    // Your implementation goes here
    printf("EnumNextTag\n");
  }

  int32_t SubscribeTags(const std::string& tagNames, const int16_t count) {
    // Your implementation goes here
    printf("SubscribeTags\n");
  }

  void GetSubTagValue(TAGVAL& _return) {
    // Your implementation goes here
    printf("GetSubTagValue\n");
  }

  int32_t UnSubscribeTags(const std::string& tagNames, const int16_t count) {
    // Your implementation goes here
    printf("UnSubscribeTags\n");
  }

  int32_t UnSubscribeAll() {
    // Your implementation goes here
    printf("UnSubscribeAll\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AgilorHandler> handler(new AgilorHandler());
  shared_ptr<TProcessor> processor(new AgilorProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

