/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef inter_TYPES_H
#define inter_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct AGGREGATE {
  enum type {
    AF_SUMMARY = 0,
    AF_MINIMUM = 1,
    AF_MAXIMUM = 2,
    AF_AVERAGE = 3,
    AF_COUNT = 4,
    AF_SUMMARY_FOR_CONTINOUS = 5,
    AF_AVERAGE_FOR_CONTINOUS = 6
  };
};

extern const std::map<int, const char*> _AGGREGATE_VALUES_TO_NAMES;

struct EXCEPTIONTYPE {
  enum type {
    INSERTFAIL = 0,
    REGISTERFAIL = 1
  };
};

extern const std::map<int, const char*> _EXCEPTIONTYPE_VALUES_TO_NAMES;

class DEVICE;

class TAGVAL;

class TAGNODE;

class DeviceIsExistException;

class DeviceNotFoundException;

class DeviceMaxException;

class DeviceInsertException;

class TargetInsertException;

class HandleErrorException;

class WriteValueException;

class ParamErrorException;

typedef struct _DEVICE__isset {
  _DEVICE__isset() : name(false), id(false) {}
  bool name :1;
  bool id :1;
} _DEVICE__isset;

class DEVICE {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  DEVICE(const DEVICE&);
  DEVICE& operator=(const DEVICE&);
  DEVICE() : name(), id(0) {
  }

  virtual ~DEVICE() throw();
  std::string name;
  int32_t id;

  _DEVICE__isset __isset;

  void __set_name(const std::string& val);

  void __set_id(const int32_t val);

  bool operator == (const DEVICE & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DEVICE &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEVICE & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DEVICE& obj);
};

void swap(DEVICE &a, DEVICE &b);

typedef struct _TAGVAL__isset {
  _TAGVAL__isset() : name(false), timestamp(false), state(false), type(false), value(false), id(false), device(false) {}
  bool name :1;
  bool timestamp :1;
  bool state :1;
  bool type :1;
  bool value :1;
  bool id :1;
  bool device :1;
} _TAGVAL__isset;

class TAGVAL {
 public:

  static const char* ascii_fingerprint; // = "FA396A1A2D5CCBDE0CAE233C1C885C24";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x39,0x6A,0x1A,0x2D,0x5C,0xCB,0xDE,0x0C,0xAE,0x23,0x3C,0x1C,0x88,0x5C,0x24};

  TAGVAL(const TAGVAL&);
  TAGVAL& operator=(const TAGVAL&);
  TAGVAL() : name(), timestamp(0), state(0), type(0), value(), id(0), device() {
  }

  virtual ~TAGVAL() throw();
  std::string name;
  int32_t timestamp;
  int32_t state;
  int8_t type;
  std::string value;
  int32_t id;
  std::string device;

  _TAGVAL__isset __isset;

  void __set_name(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_state(const int32_t val);

  void __set_type(const int8_t val);

  void __set_value(const std::string& val);

  void __set_id(const int32_t val);

  void __set_device(const std::string& val);

  bool operator == (const TAGVAL & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const TAGVAL &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAGVAL & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TAGVAL& obj);
};

void swap(TAGVAL &a, TAGVAL &b);

typedef struct _TAGNODE__isset {
  _TAGNODE__isset() : name(false), desc(false), engUnit(false), id(false), type(false), IOState(false), typicalVal(false), value(false), enumDesc(false), timestamp(false), state(false), deviceName(false), groupName(false), sourceTag(false), upperLimit(false), lowerLimit(false), pushreference(false), ruleReference(false), exceptionMin(false), exceptionMax(false), exceptionDev(false), alarmType(false), alarmState(false), alarmHi(false), alarmLo(false), alarmHiHi(false), alarmLolo(false), hiPriority(false), loPriority(false), hihiPriority(false), loloPriority(false), isArchived(false), isCompressed(false), interMethod(false), hisIndex(false), compressMin(false), compressMax(false), lastValue(false), creationDate(false) {}
  bool name :1;
  bool desc :1;
  bool engUnit :1;
  bool id :1;
  bool type :1;
  bool IOState :1;
  bool typicalVal :1;
  bool value :1;
  bool enumDesc :1;
  bool timestamp :1;
  bool state :1;
  bool deviceName :1;
  bool groupName :1;
  bool sourceTag :1;
  bool upperLimit :1;
  bool lowerLimit :1;
  bool pushreference :1;
  bool ruleReference :1;
  bool exceptionMin :1;
  bool exceptionMax :1;
  bool exceptionDev :1;
  bool alarmType :1;
  bool alarmState :1;
  bool alarmHi :1;
  bool alarmLo :1;
  bool alarmHiHi :1;
  bool alarmLolo :1;
  bool hiPriority :1;
  bool loPriority :1;
  bool hihiPriority :1;
  bool loloPriority :1;
  bool isArchived :1;
  bool isCompressed :1;
  bool interMethod :1;
  bool hisIndex :1;
  bool compressMin :1;
  bool compressMax :1;
  bool lastValue :1;
  bool creationDate :1;
} _TAGNODE__isset;

class TAGNODE {
 public:

  static const char* ascii_fingerprint; // = "94802ABAE2B134B9B620AF4A6E36FA6D";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0x80,0x2A,0xBA,0xE2,0xB1,0x34,0xB9,0xB6,0x20,0xAF,0x4A,0x6E,0x36,0xFA,0x6D};

  TAGNODE(const TAGNODE&);
  TAGNODE& operator=(const TAGNODE&);
  TAGNODE() : name(), desc(), engUnit(), id(0), type(0), IOState(0), typicalVal(0), value(), enumDesc(), timestamp(0), state(0), deviceName(), groupName(), sourceTag(), upperLimit(0), lowerLimit(0), pushreference(0), ruleReference(0), exceptionMin(0), exceptionMax(0), exceptionDev(0), alarmType(0), alarmState(0), alarmHi(0), alarmLo(0), alarmHiHi(0), alarmLolo(0), hiPriority(0), loPriority(0), hihiPriority(0), loloPriority(0), isArchived(0), isCompressed(0), interMethod(0), hisIndex(0), compressMin(0), compressMax(0), lastValue(0), creationDate(0) {
  }

  virtual ~TAGNODE() throw();
  std::string name;
  std::string desc;
  std::string engUnit;
  int32_t id;
  int8_t type;
  int8_t IOState;
  double typicalVal;
  std::string value;
  std::string enumDesc;
  int32_t timestamp;
  int32_t state;
  std::string deviceName;
  std::string groupName;
  std::string sourceTag;
  double upperLimit;
  double lowerLimit;
  int16_t pushreference;
  int16_t ruleReference;
  int32_t exceptionMin;
  int32_t exceptionMax;
  double exceptionDev;
  int16_t alarmType;
  int16_t alarmState;
  double alarmHi;
  double alarmLo;
  double alarmHiHi;
  double alarmLolo;
  int16_t hiPriority;
  int16_t loPriority;
  int16_t hihiPriority;
  int16_t loloPriority;
  bool isArchived;
  bool isCompressed;
  int8_t interMethod;
  int32_t hisIndex;
  int32_t compressMin;
  int32_t compressMax;
  double lastValue;
  int32_t creationDate;

  _TAGNODE__isset __isset;

  void __set_name(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_engUnit(const std::string& val);

  void __set_id(const int32_t val);

  void __set_type(const int8_t val);

  void __set_IOState(const int8_t val);

  void __set_typicalVal(const double val);

  void __set_value(const std::string& val);

  void __set_enumDesc(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_state(const int32_t val);

  void __set_deviceName(const std::string& val);

  void __set_groupName(const std::string& val);

  void __set_sourceTag(const std::string& val);

  void __set_upperLimit(const double val);

  void __set_lowerLimit(const double val);

  void __set_pushreference(const int16_t val);

  void __set_ruleReference(const int16_t val);

  void __set_exceptionMin(const int32_t val);

  void __set_exceptionMax(const int32_t val);

  void __set_exceptionDev(const double val);

  void __set_alarmType(const int16_t val);

  void __set_alarmState(const int16_t val);

  void __set_alarmHi(const double val);

  void __set_alarmLo(const double val);

  void __set_alarmHiHi(const double val);

  void __set_alarmLolo(const double val);

  void __set_hiPriority(const int16_t val);

  void __set_loPriority(const int16_t val);

  void __set_hihiPriority(const int16_t val);

  void __set_loloPriority(const int16_t val);

  void __set_isArchived(const bool val);

  void __set_isCompressed(const bool val);

  void __set_interMethod(const int8_t val);

  void __set_hisIndex(const int32_t val);

  void __set_compressMin(const int32_t val);

  void __set_compressMax(const int32_t val);

  void __set_lastValue(const double val);

  void __set_creationDate(const int32_t val);

  bool operator == (const TAGNODE & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(engUnit == rhs.engUnit))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(IOState == rhs.IOState))
      return false;
    if (!(typicalVal == rhs.typicalVal))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(enumDesc == rhs.enumDesc))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(deviceName == rhs.deviceName))
      return false;
    if (!(groupName == rhs.groupName))
      return false;
    if (!(sourceTag == rhs.sourceTag))
      return false;
    if (!(upperLimit == rhs.upperLimit))
      return false;
    if (!(lowerLimit == rhs.lowerLimit))
      return false;
    if (!(pushreference == rhs.pushreference))
      return false;
    if (!(ruleReference == rhs.ruleReference))
      return false;
    if (!(exceptionMin == rhs.exceptionMin))
      return false;
    if (!(exceptionMax == rhs.exceptionMax))
      return false;
    if (!(exceptionDev == rhs.exceptionDev))
      return false;
    if (!(alarmType == rhs.alarmType))
      return false;
    if (!(alarmState == rhs.alarmState))
      return false;
    if (!(alarmHi == rhs.alarmHi))
      return false;
    if (!(alarmLo == rhs.alarmLo))
      return false;
    if (!(alarmHiHi == rhs.alarmHiHi))
      return false;
    if (!(alarmLolo == rhs.alarmLolo))
      return false;
    if (!(hiPriority == rhs.hiPriority))
      return false;
    if (!(loPriority == rhs.loPriority))
      return false;
    if (!(hihiPriority == rhs.hihiPriority))
      return false;
    if (!(loloPriority == rhs.loloPriority))
      return false;
    if (!(isArchived == rhs.isArchived))
      return false;
    if (!(isCompressed == rhs.isCompressed))
      return false;
    if (!(interMethod == rhs.interMethod))
      return false;
    if (!(hisIndex == rhs.hisIndex))
      return false;
    if (!(compressMin == rhs.compressMin))
      return false;
    if (!(compressMax == rhs.compressMax))
      return false;
    if (!(lastValue == rhs.lastValue))
      return false;
    if (!(creationDate == rhs.creationDate))
      return false;
    return true;
  }
  bool operator != (const TAGNODE &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAGNODE & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TAGNODE& obj);
};

void swap(TAGNODE &a, TAGNODE &b);

typedef struct _DeviceIsExistException__isset {
  _DeviceIsExistException__isset() : name(false) {}
  bool name :1;
} _DeviceIsExistException__isset;

class DeviceIsExistException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeviceIsExistException(const DeviceIsExistException&);
  DeviceIsExistException& operator=(const DeviceIsExistException&);
  DeviceIsExistException() : name() {
  }

  virtual ~DeviceIsExistException() throw();
  std::string name;

  _DeviceIsExistException__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const DeviceIsExistException & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const DeviceIsExistException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceIsExistException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeviceIsExistException& obj);
};

void swap(DeviceIsExistException &a, DeviceIsExistException &b);

typedef struct _DeviceNotFoundException__isset {
  _DeviceNotFoundException__isset() : name(false) {}
  bool name :1;
} _DeviceNotFoundException__isset;

class DeviceNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeviceNotFoundException(const DeviceNotFoundException&);
  DeviceNotFoundException& operator=(const DeviceNotFoundException&);
  DeviceNotFoundException() : name() {
  }

  virtual ~DeviceNotFoundException() throw();
  std::string name;

  _DeviceNotFoundException__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const DeviceNotFoundException & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const DeviceNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeviceNotFoundException& obj);
};

void swap(DeviceNotFoundException &a, DeviceNotFoundException &b);


class DeviceMaxException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  DeviceMaxException(const DeviceMaxException&);
  DeviceMaxException& operator=(const DeviceMaxException&);
  DeviceMaxException() {
  }

  virtual ~DeviceMaxException() throw();

  bool operator == (const DeviceMaxException & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceMaxException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceMaxException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeviceMaxException& obj);
};

void swap(DeviceMaxException &a, DeviceMaxException &b);

typedef struct _DeviceInsertException__isset {
  _DeviceInsertException__isset() : type(false) {}
  bool type :1;
} _DeviceInsertException__isset;

class DeviceInsertException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  DeviceInsertException(const DeviceInsertException&);
  DeviceInsertException& operator=(const DeviceInsertException&);
  DeviceInsertException() : type((EXCEPTIONTYPE::type)0) {
  }

  virtual ~DeviceInsertException() throw();
  EXCEPTIONTYPE::type type;

  _DeviceInsertException__isset __isset;

  void __set_type(const EXCEPTIONTYPE::type val);

  bool operator == (const DeviceInsertException & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const DeviceInsertException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceInsertException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeviceInsertException& obj);
};

void swap(DeviceInsertException &a, DeviceInsertException &b);


class TargetInsertException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TargetInsertException(const TargetInsertException&);
  TargetInsertException& operator=(const TargetInsertException&);
  TargetInsertException() {
  }

  virtual ~TargetInsertException() throw();

  bool operator == (const TargetInsertException & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TargetInsertException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TargetInsertException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TargetInsertException& obj);
};

void swap(TargetInsertException &a, TargetInsertException &b);

typedef struct _HandleErrorException__isset {
  _HandleErrorException__isset() : hwnd(false) {}
  bool hwnd :1;
} _HandleErrorException__isset;

class HandleErrorException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HandleErrorException(const HandleErrorException&);
  HandleErrorException& operator=(const HandleErrorException&);
  HandleErrorException() : hwnd(0) {
  }

  virtual ~HandleErrorException() throw();
  int32_t hwnd;

  _HandleErrorException__isset __isset;

  void __set_hwnd(const int32_t val);

  bool operator == (const HandleErrorException & rhs) const
  {
    if (!(hwnd == rhs.hwnd))
      return false;
    return true;
  }
  bool operator != (const HandleErrorException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandleErrorException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandleErrorException& obj);
};

void swap(HandleErrorException &a, HandleErrorException &b);

typedef struct _WriteValueException__isset {
  _WriteValueException__isset() : name(false), val(false) {}
  bool name :1;
  bool val :1;
} _WriteValueException__isset;

class WriteValueException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "6EDBFDFB07238031CB1BF9153F361D95";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0xDB,0xFD,0xFB,0x07,0x23,0x80,0x31,0xCB,0x1B,0xF9,0x15,0x3F,0x36,0x1D,0x95};

  WriteValueException(const WriteValueException&);
  WriteValueException& operator=(const WriteValueException&);
  WriteValueException() : name() {
  }

  virtual ~WriteValueException() throw();
  std::string name;
  TAGVAL val;

  _WriteValueException__isset __isset;

  void __set_name(const std::string& val);

  void __set_val(const TAGVAL& val);

  bool operator == (const WriteValueException & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const WriteValueException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WriteValueException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WriteValueException& obj);
};

void swap(WriteValueException &a, WriteValueException &b);

typedef struct _ParamErrorException__isset {
  _ParamErrorException__isset() : name(false) {}
  bool name :1;
} _ParamErrorException__isset;

class ParamErrorException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ParamErrorException(const ParamErrorException&);
  ParamErrorException& operator=(const ParamErrorException&);
  ParamErrorException() : name() {
  }

  virtual ~ParamErrorException() throw();
  std::string name;

  _ParamErrorException__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const ParamErrorException & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ParamErrorException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamErrorException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ParamErrorException& obj);
};

void swap(ParamErrorException &a, ParamErrorException &b);



#endif
