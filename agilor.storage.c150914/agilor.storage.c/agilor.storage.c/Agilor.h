/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Agilor_H
#define Agilor_H

#include <thrift/TDispatchProcessor.h>
#include "inter_types.h"



class AgilorIf {
 public:
  virtual ~AgilorIf() {}
  virtual void ping() = 0;
  virtual void AddDevice(const DEVICE& device) = 0;
  virtual void DeleteDevice(const std::string& deviceName) = 0;
  virtual bool ModifyDevice(const DEVICE& device) = 0;
  virtual int32_t QueryDeviceInfo() = 0;
  virtual void EnumDeviceInfo(DEVICE& _return, const int32_t hRecordset) = 0;
  virtual void GetAllDevices(std::vector<DEVICE> & _return) = 0;
  virtual int32_t TagCountByDevice(const std::string& deviceName) = 0;
  virtual int32_t QuerySnapshots(const std::string& tagNames, const int32_t tagCount) = 0;
  virtual void GetNextTagValue(TAGVAL& _return, const int32_t hRecordset, const bool isRemoved) = 0;
  virtual int32_t QueryTagHistory(const std::string& tagName, const int32_t startTime, const int32_t endTime, const int32_t step) = 0;
  virtual void GetAggregateValue(TAGVAL& _return, const int32_t hRecordset, const AGGREGATE::type ag, const bool isRemoved) = 0;
  virtual int32_t QueryTagsbyDevice(const std::string& deviceName) = 0;
  virtual void EnumTagName(std::string& _return, const int32_t hRecordset) = 0;
  virtual void GetTagNamebyId(std::string& _return, const int32_t tagId) = 0;
  virtual void SetValue(const TAGVAL& value) = 0;
  virtual void SetValues(const std::vector<TAGVAL> & values) = 0;
  virtual void RemoveTag(const int32_t tagId) = 0;
  virtual void GetTagInfo(TAGNODE& _return, const std::string& tagName) = 0;
  virtual void AddNewTag(const TAGNODE& node, const bool isOverwrite) = 0;
  virtual void EnumNextTag(TAGNODE& _return, const int32_t hwnd) = 0;
  virtual int32_t SubscribeTags(const std::string& tagNames, const int16_t count) = 0;
  virtual void GetSubTagValue(TAGVAL& _return) = 0;
  virtual int32_t UnSubscribeTags(const std::string& tagNames, const int16_t count) = 0;
  virtual int32_t UnSubscribeAll() = 0;
};

class AgilorIfFactory {
 public:
  typedef AgilorIf Handler;

  virtual ~AgilorIfFactory() {}

  virtual AgilorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgilorIf* /* handler */) = 0;
};

class AgilorIfSingletonFactory : virtual public AgilorIfFactory {
 public:
  AgilorIfSingletonFactory(const boost::shared_ptr<AgilorIf>& iface) : iface_(iface) {}
  virtual ~AgilorIfSingletonFactory() {}

  virtual AgilorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgilorIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgilorIf> iface_;
};

class AgilorNull : virtual public AgilorIf {
 public:
  virtual ~AgilorNull() {}
  void ping() {
    return;
  }
  void AddDevice(const DEVICE& /* device */) {
    return;
  }
  void DeleteDevice(const std::string& /* deviceName */) {
    return;
  }
  bool ModifyDevice(const DEVICE& /* device */) {
    bool _return = false;
    return _return;
  }
  int32_t QueryDeviceInfo() {
    int32_t _return = 0;
    return _return;
  }
  void EnumDeviceInfo(DEVICE& /* _return */, const int32_t /* hRecordset */) {
    return;
  }
  void GetAllDevices(std::vector<DEVICE> & /* _return */) {
    return;
  }
  int32_t TagCountByDevice(const std::string& /* deviceName */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t QuerySnapshots(const std::string& /* tagNames */, const int32_t /* tagCount */) {
    int32_t _return = 0;
    return _return;
  }
  void GetNextTagValue(TAGVAL& /* _return */, const int32_t /* hRecordset */, const bool /* isRemoved */) {
    return;
  }
  int32_t QueryTagHistory(const std::string& /* tagName */, const int32_t /* startTime */, const int32_t /* endTime */, const int32_t /* step */) {
    int32_t _return = 0;
    return _return;
  }
  void GetAggregateValue(TAGVAL& /* _return */, const int32_t /* hRecordset */, const AGGREGATE::type /* ag */, const bool /* isRemoved */) {
    return;
  }
  int32_t QueryTagsbyDevice(const std::string& /* deviceName */) {
    int32_t _return = 0;
    return _return;
  }
  void EnumTagName(std::string& /* _return */, const int32_t /* hRecordset */) {
    return;
  }
  void GetTagNamebyId(std::string& /* _return */, const int32_t /* tagId */) {
    return;
  }
  void SetValue(const TAGVAL& /* value */) {
    return;
  }
  void SetValues(const std::vector<TAGVAL> & /* values */) {
    return;
  }
  void RemoveTag(const int32_t /* tagId */) {
    return;
  }
  void GetTagInfo(TAGNODE& /* _return */, const std::string& /* tagName */) {
    return;
  }
  void AddNewTag(const TAGNODE& /* node */, const bool /* isOverwrite */) {
    return;
  }
  void EnumNextTag(TAGNODE& /* _return */, const int32_t /* hwnd */) {
    return;
  }
  int32_t SubscribeTags(const std::string& /* tagNames */, const int16_t /* count */) {
    int32_t _return = 0;
    return _return;
  }
  void GetSubTagValue(TAGVAL& /* _return */) {
    return;
  }
  int32_t UnSubscribeTags(const std::string& /* tagNames */, const int16_t /* count */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t UnSubscribeAll() {
    int32_t _return = 0;
    return _return;
  }
};


class Agilor_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_ping_args(const Agilor_ping_args&);
  Agilor_ping_args& operator=(const Agilor_ping_args&);
  Agilor_ping_args() {
  }

  virtual ~Agilor_ping_args() throw();

  bool operator == (const Agilor_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ping_args& obj);
};


class Agilor_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ping_pargs& obj);
};


class Agilor_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_ping_result(const Agilor_ping_result&);
  Agilor_ping_result& operator=(const Agilor_ping_result&);
  Agilor_ping_result() {
  }

  virtual ~Agilor_ping_result() throw();

  bool operator == (const Agilor_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ping_result& obj);
};


class Agilor_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ping_presult& obj);
};

typedef struct _Agilor_AddDevice_args__isset {
  _Agilor_AddDevice_args__isset() : device(false) {}
  bool device :1;
} _Agilor_AddDevice_args__isset;

class Agilor_AddDevice_args {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  Agilor_AddDevice_args(const Agilor_AddDevice_args&);
  Agilor_AddDevice_args& operator=(const Agilor_AddDevice_args&);
  Agilor_AddDevice_args() {
  }

  virtual ~Agilor_AddDevice_args() throw();
  DEVICE device;

  _Agilor_AddDevice_args__isset __isset;

  void __set_device(const DEVICE& val);

  bool operator == (const Agilor_AddDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const Agilor_AddDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_AddDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddDevice_args& obj);
};


class Agilor_AddDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~Agilor_AddDevice_pargs() throw();
  const DEVICE* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddDevice_pargs& obj);
};

typedef struct _Agilor_AddDevice_result__isset {
  _Agilor_AddDevice_result__isset() : a(false), b(false), c(false), d(false) {}
  bool a :1;
  bool b :1;
  bool c :1;
  bool d :1;
} _Agilor_AddDevice_result__isset;

class Agilor_AddDevice_result {
 public:

  static const char* ascii_fingerprint; // = "6EDE140F531B5210345F2FD4A0DF2B1C";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0xDE,0x14,0x0F,0x53,0x1B,0x52,0x10,0x34,0x5F,0x2F,0xD4,0xA0,0xDF,0x2B,0x1C};

  Agilor_AddDevice_result(const Agilor_AddDevice_result&);
  Agilor_AddDevice_result& operator=(const Agilor_AddDevice_result&);
  Agilor_AddDevice_result() {
  }

  virtual ~Agilor_AddDevice_result() throw();
  DeviceIsExistException a;
  DeviceMaxException b;
  DeviceInsertException c;
  ParamErrorException d;

  _Agilor_AddDevice_result__isset __isset;

  void __set_a(const DeviceIsExistException& val);

  void __set_b(const DeviceMaxException& val);

  void __set_c(const DeviceInsertException& val);

  void __set_d(const ParamErrorException& val);

  bool operator == (const Agilor_AddDevice_result & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(d == rhs.d))
      return false;
    return true;
  }
  bool operator != (const Agilor_AddDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_AddDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddDevice_result& obj);
};

typedef struct _Agilor_AddDevice_presult__isset {
  _Agilor_AddDevice_presult__isset() : a(false), b(false), c(false), d(false) {}
  bool a :1;
  bool b :1;
  bool c :1;
  bool d :1;
} _Agilor_AddDevice_presult__isset;

class Agilor_AddDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "6EDE140F531B5210345F2FD4A0DF2B1C";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0xDE,0x14,0x0F,0x53,0x1B,0x52,0x10,0x34,0x5F,0x2F,0xD4,0xA0,0xDF,0x2B,0x1C};


  virtual ~Agilor_AddDevice_presult() throw();
  DeviceIsExistException a;
  DeviceMaxException b;
  DeviceInsertException c;
  ParamErrorException d;

  _Agilor_AddDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddDevice_presult& obj);
};

typedef struct _Agilor_DeleteDevice_args__isset {
  _Agilor_DeleteDevice_args__isset() : deviceName(false) {}
  bool deviceName :1;
} _Agilor_DeleteDevice_args__isset;

class Agilor_DeleteDevice_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Agilor_DeleteDevice_args(const Agilor_DeleteDevice_args&);
  Agilor_DeleteDevice_args& operator=(const Agilor_DeleteDevice_args&);
  Agilor_DeleteDevice_args() : deviceName() {
  }

  virtual ~Agilor_DeleteDevice_args() throw();
  std::string deviceName;

  _Agilor_DeleteDevice_args__isset __isset;

  void __set_deviceName(const std::string& val);

  bool operator == (const Agilor_DeleteDevice_args & rhs) const
  {
    if (!(deviceName == rhs.deviceName))
      return false;
    return true;
  }
  bool operator != (const Agilor_DeleteDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_DeleteDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_DeleteDevice_args& obj);
};


class Agilor_DeleteDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Agilor_DeleteDevice_pargs() throw();
  const std::string* deviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_DeleteDevice_pargs& obj);
};

typedef struct _Agilor_DeleteDevice_result__isset {
  _Agilor_DeleteDevice_result__isset() : e(false) {}
  bool e :1;
} _Agilor_DeleteDevice_result__isset;

class Agilor_DeleteDevice_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  Agilor_DeleteDevice_result(const Agilor_DeleteDevice_result&);
  Agilor_DeleteDevice_result& operator=(const Agilor_DeleteDevice_result&);
  Agilor_DeleteDevice_result() {
  }

  virtual ~Agilor_DeleteDevice_result() throw();
  DeviceNotFoundException e;

  _Agilor_DeleteDevice_result__isset __isset;

  void __set_e(const DeviceNotFoundException& val);

  bool operator == (const Agilor_DeleteDevice_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_DeleteDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_DeleteDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_DeleteDevice_result& obj);
};

typedef struct _Agilor_DeleteDevice_presult__isset {
  _Agilor_DeleteDevice_presult__isset() : e(false) {}
  bool e :1;
} _Agilor_DeleteDevice_presult__isset;

class Agilor_DeleteDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~Agilor_DeleteDevice_presult() throw();
  DeviceNotFoundException e;

  _Agilor_DeleteDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_DeleteDevice_presult& obj);
};

typedef struct _Agilor_ModifyDevice_args__isset {
  _Agilor_ModifyDevice_args__isset() : device(false) {}
  bool device :1;
} _Agilor_ModifyDevice_args__isset;

class Agilor_ModifyDevice_args {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  Agilor_ModifyDevice_args(const Agilor_ModifyDevice_args&);
  Agilor_ModifyDevice_args& operator=(const Agilor_ModifyDevice_args&);
  Agilor_ModifyDevice_args() {
  }

  virtual ~Agilor_ModifyDevice_args() throw();
  DEVICE device;

  _Agilor_ModifyDevice_args__isset __isset;

  void __set_device(const DEVICE& val);

  bool operator == (const Agilor_ModifyDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const Agilor_ModifyDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_ModifyDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ModifyDevice_args& obj);
};


class Agilor_ModifyDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~Agilor_ModifyDevice_pargs() throw();
  const DEVICE* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ModifyDevice_pargs& obj);
};

typedef struct _Agilor_ModifyDevice_result__isset {
  _Agilor_ModifyDevice_result__isset() : success(false) {}
  bool success :1;
} _Agilor_ModifyDevice_result__isset;

class Agilor_ModifyDevice_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  Agilor_ModifyDevice_result(const Agilor_ModifyDevice_result&);
  Agilor_ModifyDevice_result& operator=(const Agilor_ModifyDevice_result&);
  Agilor_ModifyDevice_result() : success(0) {
  }

  virtual ~Agilor_ModifyDevice_result() throw();
  bool success;

  _Agilor_ModifyDevice_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Agilor_ModifyDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_ModifyDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_ModifyDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ModifyDevice_result& obj);
};

typedef struct _Agilor_ModifyDevice_presult__isset {
  _Agilor_ModifyDevice_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_ModifyDevice_presult__isset;

class Agilor_ModifyDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~Agilor_ModifyDevice_presult() throw();
  bool* success;

  _Agilor_ModifyDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_ModifyDevice_presult& obj);
};


class Agilor_QueryDeviceInfo_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_QueryDeviceInfo_args(const Agilor_QueryDeviceInfo_args&);
  Agilor_QueryDeviceInfo_args& operator=(const Agilor_QueryDeviceInfo_args&);
  Agilor_QueryDeviceInfo_args() {
  }

  virtual ~Agilor_QueryDeviceInfo_args() throw();

  bool operator == (const Agilor_QueryDeviceInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_QueryDeviceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QueryDeviceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryDeviceInfo_args& obj);
};


class Agilor_QueryDeviceInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_QueryDeviceInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryDeviceInfo_pargs& obj);
};

typedef struct _Agilor_QueryDeviceInfo_result__isset {
  _Agilor_QueryDeviceInfo_result__isset() : success(false) {}
  bool success :1;
} _Agilor_QueryDeviceInfo_result__isset;

class Agilor_QueryDeviceInfo_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Agilor_QueryDeviceInfo_result(const Agilor_QueryDeviceInfo_result&);
  Agilor_QueryDeviceInfo_result& operator=(const Agilor_QueryDeviceInfo_result&);
  Agilor_QueryDeviceInfo_result() : success(0) {
  }

  virtual ~Agilor_QueryDeviceInfo_result() throw();
  int32_t success;

  _Agilor_QueryDeviceInfo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Agilor_QueryDeviceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_QueryDeviceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QueryDeviceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryDeviceInfo_result& obj);
};

typedef struct _Agilor_QueryDeviceInfo_presult__isset {
  _Agilor_QueryDeviceInfo_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_QueryDeviceInfo_presult__isset;

class Agilor_QueryDeviceInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Agilor_QueryDeviceInfo_presult() throw();
  int32_t* success;

  _Agilor_QueryDeviceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryDeviceInfo_presult& obj);
};

typedef struct _Agilor_EnumDeviceInfo_args__isset {
  _Agilor_EnumDeviceInfo_args__isset() : hRecordset(false) {}
  bool hRecordset :1;
} _Agilor_EnumDeviceInfo_args__isset;

class Agilor_EnumDeviceInfo_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Agilor_EnumDeviceInfo_args(const Agilor_EnumDeviceInfo_args&);
  Agilor_EnumDeviceInfo_args& operator=(const Agilor_EnumDeviceInfo_args&);
  Agilor_EnumDeviceInfo_args() : hRecordset(0) {
  }

  virtual ~Agilor_EnumDeviceInfo_args() throw();
  int32_t hRecordset;

  _Agilor_EnumDeviceInfo_args__isset __isset;

  void __set_hRecordset(const int32_t val);

  bool operator == (const Agilor_EnumDeviceInfo_args & rhs) const
  {
    if (!(hRecordset == rhs.hRecordset))
      return false;
    return true;
  }
  bool operator != (const Agilor_EnumDeviceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_EnumDeviceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumDeviceInfo_args& obj);
};


class Agilor_EnumDeviceInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Agilor_EnumDeviceInfo_pargs() throw();
  const int32_t* hRecordset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumDeviceInfo_pargs& obj);
};

typedef struct _Agilor_EnumDeviceInfo_result__isset {
  _Agilor_EnumDeviceInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_EnumDeviceInfo_result__isset;

class Agilor_EnumDeviceInfo_result {
 public:

  static const char* ascii_fingerprint; // = "344758254A21C95A7B6E61C60521C5C5";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x47,0x58,0x25,0x4A,0x21,0xC9,0x5A,0x7B,0x6E,0x61,0xC6,0x05,0x21,0xC5,0xC5};

  Agilor_EnumDeviceInfo_result(const Agilor_EnumDeviceInfo_result&);
  Agilor_EnumDeviceInfo_result& operator=(const Agilor_EnumDeviceInfo_result&);
  Agilor_EnumDeviceInfo_result() {
  }

  virtual ~Agilor_EnumDeviceInfo_result() throw();
  DEVICE success;
  HandleErrorException e;

  _Agilor_EnumDeviceInfo_result__isset __isset;

  void __set_success(const DEVICE& val);

  void __set_e(const HandleErrorException& val);

  bool operator == (const Agilor_EnumDeviceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_EnumDeviceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_EnumDeviceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumDeviceInfo_result& obj);
};

typedef struct _Agilor_EnumDeviceInfo_presult__isset {
  _Agilor_EnumDeviceInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_EnumDeviceInfo_presult__isset;

class Agilor_EnumDeviceInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "344758254A21C95A7B6E61C60521C5C5";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x47,0x58,0x25,0x4A,0x21,0xC9,0x5A,0x7B,0x6E,0x61,0xC6,0x05,0x21,0xC5,0xC5};


  virtual ~Agilor_EnumDeviceInfo_presult() throw();
  DEVICE* success;
  HandleErrorException e;

  _Agilor_EnumDeviceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumDeviceInfo_presult& obj);
};


class Agilor_GetAllDevices_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_GetAllDevices_args(const Agilor_GetAllDevices_args&);
  Agilor_GetAllDevices_args& operator=(const Agilor_GetAllDevices_args&);
  Agilor_GetAllDevices_args() {
  }

  virtual ~Agilor_GetAllDevices_args() throw();

  bool operator == (const Agilor_GetAllDevices_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_GetAllDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetAllDevices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAllDevices_args& obj);
};


class Agilor_GetAllDevices_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_GetAllDevices_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAllDevices_pargs& obj);
};

typedef struct _Agilor_GetAllDevices_result__isset {
  _Agilor_GetAllDevices_result__isset() : success(false) {}
  bool success :1;
} _Agilor_GetAllDevices_result__isset;

class Agilor_GetAllDevices_result {
 public:

  static const char* ascii_fingerprint; // = "4C53C87891978470ACC4312D02689432";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x53,0xC8,0x78,0x91,0x97,0x84,0x70,0xAC,0xC4,0x31,0x2D,0x02,0x68,0x94,0x32};

  Agilor_GetAllDevices_result(const Agilor_GetAllDevices_result&);
  Agilor_GetAllDevices_result& operator=(const Agilor_GetAllDevices_result&);
  Agilor_GetAllDevices_result() {
  }

  virtual ~Agilor_GetAllDevices_result() throw();
  std::vector<DEVICE>  success;

  _Agilor_GetAllDevices_result__isset __isset;

  void __set_success(const std::vector<DEVICE> & val);

  bool operator == (const Agilor_GetAllDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetAllDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetAllDevices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAllDevices_result& obj);
};

typedef struct _Agilor_GetAllDevices_presult__isset {
  _Agilor_GetAllDevices_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_GetAllDevices_presult__isset;

class Agilor_GetAllDevices_presult {
 public:

  static const char* ascii_fingerprint; // = "4C53C87891978470ACC4312D02689432";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x53,0xC8,0x78,0x91,0x97,0x84,0x70,0xAC,0xC4,0x31,0x2D,0x02,0x68,0x94,0x32};


  virtual ~Agilor_GetAllDevices_presult() throw();
  std::vector<DEVICE> * success;

  _Agilor_GetAllDevices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAllDevices_presult& obj);
};

typedef struct _Agilor_TagCountByDevice_args__isset {
  _Agilor_TagCountByDevice_args__isset() : deviceName(false) {}
  bool deviceName :1;
} _Agilor_TagCountByDevice_args__isset;

class Agilor_TagCountByDevice_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Agilor_TagCountByDevice_args(const Agilor_TagCountByDevice_args&);
  Agilor_TagCountByDevice_args& operator=(const Agilor_TagCountByDevice_args&);
  Agilor_TagCountByDevice_args() : deviceName() {
  }

  virtual ~Agilor_TagCountByDevice_args() throw();
  std::string deviceName;

  _Agilor_TagCountByDevice_args__isset __isset;

  void __set_deviceName(const std::string& val);

  bool operator == (const Agilor_TagCountByDevice_args & rhs) const
  {
    if (!(deviceName == rhs.deviceName))
      return false;
    return true;
  }
  bool operator != (const Agilor_TagCountByDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_TagCountByDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_TagCountByDevice_args& obj);
};


class Agilor_TagCountByDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Agilor_TagCountByDevice_pargs() throw();
  const std::string* deviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_TagCountByDevice_pargs& obj);
};

typedef struct _Agilor_TagCountByDevice_result__isset {
  _Agilor_TagCountByDevice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_TagCountByDevice_result__isset;

class Agilor_TagCountByDevice_result {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};

  Agilor_TagCountByDevice_result(const Agilor_TagCountByDevice_result&);
  Agilor_TagCountByDevice_result& operator=(const Agilor_TagCountByDevice_result&);
  Agilor_TagCountByDevice_result() : success(0) {
  }

  virtual ~Agilor_TagCountByDevice_result() throw();
  int32_t success;
  DeviceIsExistException e;

  _Agilor_TagCountByDevice_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const DeviceIsExistException& val);

  bool operator == (const Agilor_TagCountByDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_TagCountByDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_TagCountByDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_TagCountByDevice_result& obj);
};

typedef struct _Agilor_TagCountByDevice_presult__isset {
  _Agilor_TagCountByDevice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_TagCountByDevice_presult__isset;

class Agilor_TagCountByDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};


  virtual ~Agilor_TagCountByDevice_presult() throw();
  int32_t* success;
  DeviceIsExistException e;

  _Agilor_TagCountByDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_TagCountByDevice_presult& obj);
};

typedef struct _Agilor_QuerySnapshots_args__isset {
  _Agilor_QuerySnapshots_args__isset() : tagNames(false), tagCount(false) {}
  bool tagNames :1;
  bool tagCount :1;
} _Agilor_QuerySnapshots_args__isset;

class Agilor_QuerySnapshots_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Agilor_QuerySnapshots_args(const Agilor_QuerySnapshots_args&);
  Agilor_QuerySnapshots_args& operator=(const Agilor_QuerySnapshots_args&);
  Agilor_QuerySnapshots_args() : tagNames(), tagCount(0) {
  }

  virtual ~Agilor_QuerySnapshots_args() throw();
  std::string tagNames;
  int32_t tagCount;

  _Agilor_QuerySnapshots_args__isset __isset;

  void __set_tagNames(const std::string& val);

  void __set_tagCount(const int32_t val);

  bool operator == (const Agilor_QuerySnapshots_args & rhs) const
  {
    if (!(tagNames == rhs.tagNames))
      return false;
    if (!(tagCount == rhs.tagCount))
      return false;
    return true;
  }
  bool operator != (const Agilor_QuerySnapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QuerySnapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QuerySnapshots_args& obj);
};


class Agilor_QuerySnapshots_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~Agilor_QuerySnapshots_pargs() throw();
  const std::string* tagNames;
  const int32_t* tagCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QuerySnapshots_pargs& obj);
};

typedef struct _Agilor_QuerySnapshots_result__isset {
  _Agilor_QuerySnapshots_result__isset() : success(false) {}
  bool success :1;
} _Agilor_QuerySnapshots_result__isset;

class Agilor_QuerySnapshots_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Agilor_QuerySnapshots_result(const Agilor_QuerySnapshots_result&);
  Agilor_QuerySnapshots_result& operator=(const Agilor_QuerySnapshots_result&);
  Agilor_QuerySnapshots_result() : success(0) {
  }

  virtual ~Agilor_QuerySnapshots_result() throw();
  int32_t success;

  _Agilor_QuerySnapshots_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Agilor_QuerySnapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_QuerySnapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QuerySnapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QuerySnapshots_result& obj);
};

typedef struct _Agilor_QuerySnapshots_presult__isset {
  _Agilor_QuerySnapshots_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_QuerySnapshots_presult__isset;

class Agilor_QuerySnapshots_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Agilor_QuerySnapshots_presult() throw();
  int32_t* success;

  _Agilor_QuerySnapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QuerySnapshots_presult& obj);
};

typedef struct _Agilor_GetNextTagValue_args__isset {
  _Agilor_GetNextTagValue_args__isset() : hRecordset(false), isRemoved(false) {}
  bool hRecordset :1;
  bool isRemoved :1;
} _Agilor_GetNextTagValue_args__isset;

class Agilor_GetNextTagValue_args {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  Agilor_GetNextTagValue_args(const Agilor_GetNextTagValue_args&);
  Agilor_GetNextTagValue_args& operator=(const Agilor_GetNextTagValue_args&);
  Agilor_GetNextTagValue_args() : hRecordset(0), isRemoved(0) {
  }

  virtual ~Agilor_GetNextTagValue_args() throw();
  int32_t hRecordset;
  bool isRemoved;

  _Agilor_GetNextTagValue_args__isset __isset;

  void __set_hRecordset(const int32_t val);

  void __set_isRemoved(const bool val);

  bool operator == (const Agilor_GetNextTagValue_args & rhs) const
  {
    if (!(hRecordset == rhs.hRecordset))
      return false;
    if (!(isRemoved == rhs.isRemoved))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetNextTagValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetNextTagValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetNextTagValue_args& obj);
};


class Agilor_GetNextTagValue_pargs {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};


  virtual ~Agilor_GetNextTagValue_pargs() throw();
  const int32_t* hRecordset;
  const bool* isRemoved;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetNextTagValue_pargs& obj);
};

typedef struct _Agilor_GetNextTagValue_result__isset {
  _Agilor_GetNextTagValue_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_GetNextTagValue_result__isset;

class Agilor_GetNextTagValue_result {
 public:

  static const char* ascii_fingerprint; // = "0EA74826D0974B4AE14D951BF8FED687";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xA7,0x48,0x26,0xD0,0x97,0x4B,0x4A,0xE1,0x4D,0x95,0x1B,0xF8,0xFE,0xD6,0x87};

  Agilor_GetNextTagValue_result(const Agilor_GetNextTagValue_result&);
  Agilor_GetNextTagValue_result& operator=(const Agilor_GetNextTagValue_result&);
  Agilor_GetNextTagValue_result() {
  }

  virtual ~Agilor_GetNextTagValue_result() throw();
  TAGVAL success;
  HandleErrorException e;

  _Agilor_GetNextTagValue_result__isset __isset;

  void __set_success(const TAGVAL& val);

  void __set_e(const HandleErrorException& val);

  bool operator == (const Agilor_GetNextTagValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetNextTagValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetNextTagValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetNextTagValue_result& obj);
};

typedef struct _Agilor_GetNextTagValue_presult__isset {
  _Agilor_GetNextTagValue_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_GetNextTagValue_presult__isset;

class Agilor_GetNextTagValue_presult {
 public:

  static const char* ascii_fingerprint; // = "0EA74826D0974B4AE14D951BF8FED687";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xA7,0x48,0x26,0xD0,0x97,0x4B,0x4A,0xE1,0x4D,0x95,0x1B,0xF8,0xFE,0xD6,0x87};


  virtual ~Agilor_GetNextTagValue_presult() throw();
  TAGVAL* success;
  HandleErrorException e;

  _Agilor_GetNextTagValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetNextTagValue_presult& obj);
};

typedef struct _Agilor_QueryTagHistory_args__isset {
  _Agilor_QueryTagHistory_args__isset() : tagName(false), startTime(false), endTime(false), step(false) {}
  bool tagName :1;
  bool startTime :1;
  bool endTime :1;
  bool step :1;
} _Agilor_QueryTagHistory_args__isset;

class Agilor_QueryTagHistory_args {
 public:

  static const char* ascii_fingerprint; // = "9284B42FBE364FECA7AF8E76C1F488A2";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x84,0xB4,0x2F,0xBE,0x36,0x4F,0xEC,0xA7,0xAF,0x8E,0x76,0xC1,0xF4,0x88,0xA2};

  Agilor_QueryTagHistory_args(const Agilor_QueryTagHistory_args&);
  Agilor_QueryTagHistory_args& operator=(const Agilor_QueryTagHistory_args&);
  Agilor_QueryTagHistory_args() : tagName(), startTime(0), endTime(0), step(0) {
  }

  virtual ~Agilor_QueryTagHistory_args() throw();
  std::string tagName;
  int32_t startTime;
  int32_t endTime;
  int32_t step;

  _Agilor_QueryTagHistory_args__isset __isset;

  void __set_tagName(const std::string& val);

  void __set_startTime(const int32_t val);

  void __set_endTime(const int32_t val);

  void __set_step(const int32_t val);

  bool operator == (const Agilor_QueryTagHistory_args & rhs) const
  {
    if (!(tagName == rhs.tagName))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(step == rhs.step))
      return false;
    return true;
  }
  bool operator != (const Agilor_QueryTagHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QueryTagHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagHistory_args& obj);
};


class Agilor_QueryTagHistory_pargs {
 public:

  static const char* ascii_fingerprint; // = "9284B42FBE364FECA7AF8E76C1F488A2";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x84,0xB4,0x2F,0xBE,0x36,0x4F,0xEC,0xA7,0xAF,0x8E,0x76,0xC1,0xF4,0x88,0xA2};


  virtual ~Agilor_QueryTagHistory_pargs() throw();
  const std::string* tagName;
  const int32_t* startTime;
  const int32_t* endTime;
  const int32_t* step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagHistory_pargs& obj);
};

typedef struct _Agilor_QueryTagHistory_result__isset {
  _Agilor_QueryTagHistory_result__isset() : success(false) {}
  bool success :1;
} _Agilor_QueryTagHistory_result__isset;

class Agilor_QueryTagHistory_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Agilor_QueryTagHistory_result(const Agilor_QueryTagHistory_result&);
  Agilor_QueryTagHistory_result& operator=(const Agilor_QueryTagHistory_result&);
  Agilor_QueryTagHistory_result() : success(0) {
  }

  virtual ~Agilor_QueryTagHistory_result() throw();
  int32_t success;

  _Agilor_QueryTagHistory_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Agilor_QueryTagHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_QueryTagHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QueryTagHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagHistory_result& obj);
};

typedef struct _Agilor_QueryTagHistory_presult__isset {
  _Agilor_QueryTagHistory_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_QueryTagHistory_presult__isset;

class Agilor_QueryTagHistory_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Agilor_QueryTagHistory_presult() throw();
  int32_t* success;

  _Agilor_QueryTagHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagHistory_presult& obj);
};

typedef struct _Agilor_GetAggregateValue_args__isset {
  _Agilor_GetAggregateValue_args__isset() : hRecordset(false), ag(false), isRemoved(false) {}
  bool hRecordset :1;
  bool ag :1;
  bool isRemoved :1;
} _Agilor_GetAggregateValue_args__isset;

class Agilor_GetAggregateValue_args {
 public:

  static const char* ascii_fingerprint; // = "6AF7B6EFF57107E5E7990AC233062451";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xF7,0xB6,0xEF,0xF5,0x71,0x07,0xE5,0xE7,0x99,0x0A,0xC2,0x33,0x06,0x24,0x51};

  Agilor_GetAggregateValue_args(const Agilor_GetAggregateValue_args&);
  Agilor_GetAggregateValue_args& operator=(const Agilor_GetAggregateValue_args&);
  Agilor_GetAggregateValue_args() : hRecordset(0), ag((AGGREGATE::type)0), isRemoved(0) {
  }

  virtual ~Agilor_GetAggregateValue_args() throw();
  int32_t hRecordset;
  AGGREGATE::type ag;
  bool isRemoved;

  _Agilor_GetAggregateValue_args__isset __isset;

  void __set_hRecordset(const int32_t val);

  void __set_ag(const AGGREGATE::type val);

  void __set_isRemoved(const bool val);

  bool operator == (const Agilor_GetAggregateValue_args & rhs) const
  {
    if (!(hRecordset == rhs.hRecordset))
      return false;
    if (!(ag == rhs.ag))
      return false;
    if (!(isRemoved == rhs.isRemoved))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetAggregateValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetAggregateValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAggregateValue_args& obj);
};


class Agilor_GetAggregateValue_pargs {
 public:

  static const char* ascii_fingerprint; // = "6AF7B6EFF57107E5E7990AC233062451";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xF7,0xB6,0xEF,0xF5,0x71,0x07,0xE5,0xE7,0x99,0x0A,0xC2,0x33,0x06,0x24,0x51};


  virtual ~Agilor_GetAggregateValue_pargs() throw();
  const int32_t* hRecordset;
  const AGGREGATE::type* ag;
  const bool* isRemoved;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAggregateValue_pargs& obj);
};

typedef struct _Agilor_GetAggregateValue_result__isset {
  _Agilor_GetAggregateValue_result__isset() : success(false) {}
  bool success :1;
} _Agilor_GetAggregateValue_result__isset;

class Agilor_GetAggregateValue_result {
 public:

  static const char* ascii_fingerprint; // = "BB4FE54E71C35E3E7A43F7DA68DA3B85";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x4F,0xE5,0x4E,0x71,0xC3,0x5E,0x3E,0x7A,0x43,0xF7,0xDA,0x68,0xDA,0x3B,0x85};

  Agilor_GetAggregateValue_result(const Agilor_GetAggregateValue_result&);
  Agilor_GetAggregateValue_result& operator=(const Agilor_GetAggregateValue_result&);
  Agilor_GetAggregateValue_result() {
  }

  virtual ~Agilor_GetAggregateValue_result() throw();
  TAGVAL success;

  _Agilor_GetAggregateValue_result__isset __isset;

  void __set_success(const TAGVAL& val);

  bool operator == (const Agilor_GetAggregateValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetAggregateValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetAggregateValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAggregateValue_result& obj);
};

typedef struct _Agilor_GetAggregateValue_presult__isset {
  _Agilor_GetAggregateValue_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_GetAggregateValue_presult__isset;

class Agilor_GetAggregateValue_presult {
 public:

  static const char* ascii_fingerprint; // = "BB4FE54E71C35E3E7A43F7DA68DA3B85";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x4F,0xE5,0x4E,0x71,0xC3,0x5E,0x3E,0x7A,0x43,0xF7,0xDA,0x68,0xDA,0x3B,0x85};


  virtual ~Agilor_GetAggregateValue_presult() throw();
  TAGVAL* success;

  _Agilor_GetAggregateValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetAggregateValue_presult& obj);
};

typedef struct _Agilor_QueryTagsbyDevice_args__isset {
  _Agilor_QueryTagsbyDevice_args__isset() : deviceName(false) {}
  bool deviceName :1;
} _Agilor_QueryTagsbyDevice_args__isset;

class Agilor_QueryTagsbyDevice_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Agilor_QueryTagsbyDevice_args(const Agilor_QueryTagsbyDevice_args&);
  Agilor_QueryTagsbyDevice_args& operator=(const Agilor_QueryTagsbyDevice_args&);
  Agilor_QueryTagsbyDevice_args() : deviceName() {
  }

  virtual ~Agilor_QueryTagsbyDevice_args() throw();
  std::string deviceName;

  _Agilor_QueryTagsbyDevice_args__isset __isset;

  void __set_deviceName(const std::string& val);

  bool operator == (const Agilor_QueryTagsbyDevice_args & rhs) const
  {
    if (!(deviceName == rhs.deviceName))
      return false;
    return true;
  }
  bool operator != (const Agilor_QueryTagsbyDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QueryTagsbyDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagsbyDevice_args& obj);
};


class Agilor_QueryTagsbyDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Agilor_QueryTagsbyDevice_pargs() throw();
  const std::string* deviceName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagsbyDevice_pargs& obj);
};

typedef struct _Agilor_QueryTagsbyDevice_result__isset {
  _Agilor_QueryTagsbyDevice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_QueryTagsbyDevice_result__isset;

class Agilor_QueryTagsbyDevice_result {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};

  Agilor_QueryTagsbyDevice_result(const Agilor_QueryTagsbyDevice_result&);
  Agilor_QueryTagsbyDevice_result& operator=(const Agilor_QueryTagsbyDevice_result&);
  Agilor_QueryTagsbyDevice_result() : success(0) {
  }

  virtual ~Agilor_QueryTagsbyDevice_result() throw();
  int32_t success;
  DeviceNotFoundException e;

  _Agilor_QueryTagsbyDevice_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const DeviceNotFoundException& val);

  bool operator == (const Agilor_QueryTagsbyDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_QueryTagsbyDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_QueryTagsbyDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagsbyDevice_result& obj);
};

typedef struct _Agilor_QueryTagsbyDevice_presult__isset {
  _Agilor_QueryTagsbyDevice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_QueryTagsbyDevice_presult__isset;

class Agilor_QueryTagsbyDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};


  virtual ~Agilor_QueryTagsbyDevice_presult() throw();
  int32_t* success;
  DeviceNotFoundException e;

  _Agilor_QueryTagsbyDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_QueryTagsbyDevice_presult& obj);
};

typedef struct _Agilor_EnumTagName_args__isset {
  _Agilor_EnumTagName_args__isset() : hRecordset(false) {}
  bool hRecordset :1;
} _Agilor_EnumTagName_args__isset;

class Agilor_EnumTagName_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Agilor_EnumTagName_args(const Agilor_EnumTagName_args&);
  Agilor_EnumTagName_args& operator=(const Agilor_EnumTagName_args&);
  Agilor_EnumTagName_args() : hRecordset(0) {
  }

  virtual ~Agilor_EnumTagName_args() throw();
  int32_t hRecordset;

  _Agilor_EnumTagName_args__isset __isset;

  void __set_hRecordset(const int32_t val);

  bool operator == (const Agilor_EnumTagName_args & rhs) const
  {
    if (!(hRecordset == rhs.hRecordset))
      return false;
    return true;
  }
  bool operator != (const Agilor_EnumTagName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_EnumTagName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumTagName_args& obj);
};


class Agilor_EnumTagName_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Agilor_EnumTagName_pargs() throw();
  const int32_t* hRecordset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumTagName_pargs& obj);
};

typedef struct _Agilor_EnumTagName_result__isset {
  _Agilor_EnumTagName_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_EnumTagName_result__isset;

class Agilor_EnumTagName_result {
 public:

  static const char* ascii_fingerprint; // = "CC57F18CE146312046D6D0D11EF0183F";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x57,0xF1,0x8C,0xE1,0x46,0x31,0x20,0x46,0xD6,0xD0,0xD1,0x1E,0xF0,0x18,0x3F};

  Agilor_EnumTagName_result(const Agilor_EnumTagName_result&);
  Agilor_EnumTagName_result& operator=(const Agilor_EnumTagName_result&);
  Agilor_EnumTagName_result() : success() {
  }

  virtual ~Agilor_EnumTagName_result() throw();
  std::string success;
  HandleErrorException e;

  _Agilor_EnumTagName_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const HandleErrorException& val);

  bool operator == (const Agilor_EnumTagName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_EnumTagName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_EnumTagName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumTagName_result& obj);
};

typedef struct _Agilor_EnumTagName_presult__isset {
  _Agilor_EnumTagName_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_EnumTagName_presult__isset;

class Agilor_EnumTagName_presult {
 public:

  static const char* ascii_fingerprint; // = "CC57F18CE146312046D6D0D11EF0183F";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x57,0xF1,0x8C,0xE1,0x46,0x31,0x20,0x46,0xD6,0xD0,0xD1,0x1E,0xF0,0x18,0x3F};


  virtual ~Agilor_EnumTagName_presult() throw();
  std::string* success;
  HandleErrorException e;

  _Agilor_EnumTagName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumTagName_presult& obj);
};

typedef struct _Agilor_GetTagNamebyId_args__isset {
  _Agilor_GetTagNamebyId_args__isset() : tagId(false) {}
  bool tagId :1;
} _Agilor_GetTagNamebyId_args__isset;

class Agilor_GetTagNamebyId_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Agilor_GetTagNamebyId_args(const Agilor_GetTagNamebyId_args&);
  Agilor_GetTagNamebyId_args& operator=(const Agilor_GetTagNamebyId_args&);
  Agilor_GetTagNamebyId_args() : tagId(0) {
  }

  virtual ~Agilor_GetTagNamebyId_args() throw();
  int32_t tagId;

  _Agilor_GetTagNamebyId_args__isset __isset;

  void __set_tagId(const int32_t val);

  bool operator == (const Agilor_GetTagNamebyId_args & rhs) const
  {
    if (!(tagId == rhs.tagId))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetTagNamebyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetTagNamebyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagNamebyId_args& obj);
};


class Agilor_GetTagNamebyId_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Agilor_GetTagNamebyId_pargs() throw();
  const int32_t* tagId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagNamebyId_pargs& obj);
};

typedef struct _Agilor_GetTagNamebyId_result__isset {
  _Agilor_GetTagNamebyId_result__isset() : success(false) {}
  bool success :1;
} _Agilor_GetTagNamebyId_result__isset;

class Agilor_GetTagNamebyId_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  Agilor_GetTagNamebyId_result(const Agilor_GetTagNamebyId_result&);
  Agilor_GetTagNamebyId_result& operator=(const Agilor_GetTagNamebyId_result&);
  Agilor_GetTagNamebyId_result() : success() {
  }

  virtual ~Agilor_GetTagNamebyId_result() throw();
  std::string success;

  _Agilor_GetTagNamebyId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Agilor_GetTagNamebyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetTagNamebyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetTagNamebyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagNamebyId_result& obj);
};

typedef struct _Agilor_GetTagNamebyId_presult__isset {
  _Agilor_GetTagNamebyId_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_GetTagNamebyId_presult__isset;

class Agilor_GetTagNamebyId_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~Agilor_GetTagNamebyId_presult() throw();
  std::string* success;

  _Agilor_GetTagNamebyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagNamebyId_presult& obj);
};

typedef struct _Agilor_SetValue_args__isset {
  _Agilor_SetValue_args__isset() : value(false) {}
  bool value :1;
} _Agilor_SetValue_args__isset;

class Agilor_SetValue_args {
 public:

  static const char* ascii_fingerprint; // = "54E3BDF942F753464FFAA76E6357C382";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0xE3,0xBD,0xF9,0x42,0xF7,0x53,0x46,0x4F,0xFA,0xA7,0x6E,0x63,0x57,0xC3,0x82};

  Agilor_SetValue_args(const Agilor_SetValue_args&);
  Agilor_SetValue_args& operator=(const Agilor_SetValue_args&);
  Agilor_SetValue_args() {
  }

  virtual ~Agilor_SetValue_args() throw();
  TAGVAL value;

  _Agilor_SetValue_args__isset __isset;

  void __set_value(const TAGVAL& val);

  bool operator == (const Agilor_SetValue_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Agilor_SetValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_SetValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValue_args& obj);
};


class Agilor_SetValue_pargs {
 public:

  static const char* ascii_fingerprint; // = "54E3BDF942F753464FFAA76E6357C382";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0xE3,0xBD,0xF9,0x42,0xF7,0x53,0x46,0x4F,0xFA,0xA7,0x6E,0x63,0x57,0xC3,0x82};


  virtual ~Agilor_SetValue_pargs() throw();
  const TAGVAL* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValue_pargs& obj);
};

typedef struct _Agilor_SetValue_result__isset {
  _Agilor_SetValue_result__isset() : e(false) {}
  bool e :1;
} _Agilor_SetValue_result__isset;

class Agilor_SetValue_result {
 public:

  static const char* ascii_fingerprint; // = "50988459A2A28ABBFB77B5637FC06199";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x98,0x84,0x59,0xA2,0xA2,0x8A,0xBB,0xFB,0x77,0xB5,0x63,0x7F,0xC0,0x61,0x99};

  Agilor_SetValue_result(const Agilor_SetValue_result&);
  Agilor_SetValue_result& operator=(const Agilor_SetValue_result&);
  Agilor_SetValue_result() {
  }

  virtual ~Agilor_SetValue_result() throw();
  WriteValueException e;

  _Agilor_SetValue_result__isset __isset;

  void __set_e(const WriteValueException& val);

  bool operator == (const Agilor_SetValue_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_SetValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_SetValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValue_result& obj);
};

typedef struct _Agilor_SetValue_presult__isset {
  _Agilor_SetValue_presult__isset() : e(false) {}
  bool e :1;
} _Agilor_SetValue_presult__isset;

class Agilor_SetValue_presult {
 public:

  static const char* ascii_fingerprint; // = "50988459A2A28ABBFB77B5637FC06199";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x98,0x84,0x59,0xA2,0xA2,0x8A,0xBB,0xFB,0x77,0xB5,0x63,0x7F,0xC0,0x61,0x99};


  virtual ~Agilor_SetValue_presult() throw();
  WriteValueException e;

  _Agilor_SetValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValue_presult& obj);
};

typedef struct _Agilor_SetValues_args__isset {
  _Agilor_SetValues_args__isset() : values(false) {}
  bool values :1;
} _Agilor_SetValues_args__isset;

class Agilor_SetValues_args {
 public:

  static const char* ascii_fingerprint; // = "66978484022C0AC02CCDD845C2E845BE";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0x97,0x84,0x84,0x02,0x2C,0x0A,0xC0,0x2C,0xCD,0xD8,0x45,0xC2,0xE8,0x45,0xBE};

  Agilor_SetValues_args(const Agilor_SetValues_args&);
  Agilor_SetValues_args& operator=(const Agilor_SetValues_args&);
  Agilor_SetValues_args() {
  }

  virtual ~Agilor_SetValues_args() throw();
  std::vector<TAGVAL>  values;

  _Agilor_SetValues_args__isset __isset;

  void __set_values(const std::vector<TAGVAL> & val);

  bool operator == (const Agilor_SetValues_args & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const Agilor_SetValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_SetValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValues_args& obj);
};


class Agilor_SetValues_pargs {
 public:

  static const char* ascii_fingerprint; // = "66978484022C0AC02CCDD845C2E845BE";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0x97,0x84,0x84,0x02,0x2C,0x0A,0xC0,0x2C,0xCD,0xD8,0x45,0xC2,0xE8,0x45,0xBE};


  virtual ~Agilor_SetValues_pargs() throw();
  const std::vector<TAGVAL> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValues_pargs& obj);
};

typedef struct _Agilor_SetValues_result__isset {
  _Agilor_SetValues_result__isset() : e(false) {}
  bool e :1;
} _Agilor_SetValues_result__isset;

class Agilor_SetValues_result {
 public:

  static const char* ascii_fingerprint; // = "50988459A2A28ABBFB77B5637FC06199";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x98,0x84,0x59,0xA2,0xA2,0x8A,0xBB,0xFB,0x77,0xB5,0x63,0x7F,0xC0,0x61,0x99};

  Agilor_SetValues_result(const Agilor_SetValues_result&);
  Agilor_SetValues_result& operator=(const Agilor_SetValues_result&);
  Agilor_SetValues_result() {
  }

  virtual ~Agilor_SetValues_result() throw();
  WriteValueException e;

  _Agilor_SetValues_result__isset __isset;

  void __set_e(const WriteValueException& val);

  bool operator == (const Agilor_SetValues_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_SetValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_SetValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValues_result& obj);
};

typedef struct _Agilor_SetValues_presult__isset {
  _Agilor_SetValues_presult__isset() : e(false) {}
  bool e :1;
} _Agilor_SetValues_presult__isset;

class Agilor_SetValues_presult {
 public:

  static const char* ascii_fingerprint; // = "50988459A2A28ABBFB77B5637FC06199";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x98,0x84,0x59,0xA2,0xA2,0x8A,0xBB,0xFB,0x77,0xB5,0x63,0x7F,0xC0,0x61,0x99};


  virtual ~Agilor_SetValues_presult() throw();
  WriteValueException e;

  _Agilor_SetValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SetValues_presult& obj);
};

typedef struct _Agilor_RemoveTag_args__isset {
  _Agilor_RemoveTag_args__isset() : tagId(false) {}
  bool tagId :1;
} _Agilor_RemoveTag_args__isset;

class Agilor_RemoveTag_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Agilor_RemoveTag_args(const Agilor_RemoveTag_args&);
  Agilor_RemoveTag_args& operator=(const Agilor_RemoveTag_args&);
  Agilor_RemoveTag_args() : tagId(0) {
  }

  virtual ~Agilor_RemoveTag_args() throw();
  int32_t tagId;

  _Agilor_RemoveTag_args__isset __isset;

  void __set_tagId(const int32_t val);

  bool operator == (const Agilor_RemoveTag_args & rhs) const
  {
    if (!(tagId == rhs.tagId))
      return false;
    return true;
  }
  bool operator != (const Agilor_RemoveTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_RemoveTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_RemoveTag_args& obj);
};


class Agilor_RemoveTag_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Agilor_RemoveTag_pargs() throw();
  const int32_t* tagId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_RemoveTag_pargs& obj);
};


class Agilor_RemoveTag_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_RemoveTag_result(const Agilor_RemoveTag_result&);
  Agilor_RemoveTag_result& operator=(const Agilor_RemoveTag_result&);
  Agilor_RemoveTag_result() {
  }

  virtual ~Agilor_RemoveTag_result() throw();

  bool operator == (const Agilor_RemoveTag_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_RemoveTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_RemoveTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_RemoveTag_result& obj);
};


class Agilor_RemoveTag_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_RemoveTag_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_RemoveTag_presult& obj);
};

typedef struct _Agilor_GetTagInfo_args__isset {
  _Agilor_GetTagInfo_args__isset() : tagName(false) {}
  bool tagName :1;
} _Agilor_GetTagInfo_args__isset;

class Agilor_GetTagInfo_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Agilor_GetTagInfo_args(const Agilor_GetTagInfo_args&);
  Agilor_GetTagInfo_args& operator=(const Agilor_GetTagInfo_args&);
  Agilor_GetTagInfo_args() : tagName() {
  }

  virtual ~Agilor_GetTagInfo_args() throw();
  std::string tagName;

  _Agilor_GetTagInfo_args__isset __isset;

  void __set_tagName(const std::string& val);

  bool operator == (const Agilor_GetTagInfo_args & rhs) const
  {
    if (!(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetTagInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetTagInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagInfo_args& obj);
};


class Agilor_GetTagInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Agilor_GetTagInfo_pargs() throw();
  const std::string* tagName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagInfo_pargs& obj);
};

typedef struct _Agilor_GetTagInfo_result__isset {
  _Agilor_GetTagInfo_result__isset() : success(false) {}
  bool success :1;
} _Agilor_GetTagInfo_result__isset;

class Agilor_GetTagInfo_result {
 public:

  static const char* ascii_fingerprint; // = "EE86AC1E4C9CA9C033880336988E4F65";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x86,0xAC,0x1E,0x4C,0x9C,0xA9,0xC0,0x33,0x88,0x03,0x36,0x98,0x8E,0x4F,0x65};

  Agilor_GetTagInfo_result(const Agilor_GetTagInfo_result&);
  Agilor_GetTagInfo_result& operator=(const Agilor_GetTagInfo_result&);
  Agilor_GetTagInfo_result() {
  }

  virtual ~Agilor_GetTagInfo_result() throw();
  TAGNODE success;

  _Agilor_GetTagInfo_result__isset __isset;

  void __set_success(const TAGNODE& val);

  bool operator == (const Agilor_GetTagInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetTagInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetTagInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagInfo_result& obj);
};

typedef struct _Agilor_GetTagInfo_presult__isset {
  _Agilor_GetTagInfo_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_GetTagInfo_presult__isset;

class Agilor_GetTagInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "EE86AC1E4C9CA9C033880336988E4F65";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x86,0xAC,0x1E,0x4C,0x9C,0xA9,0xC0,0x33,0x88,0x03,0x36,0x98,0x8E,0x4F,0x65};


  virtual ~Agilor_GetTagInfo_presult() throw();
  TAGNODE* success;

  _Agilor_GetTagInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetTagInfo_presult& obj);
};

typedef struct _Agilor_AddNewTag_args__isset {
  _Agilor_AddNewTag_args__isset() : node(false), isOverwrite(false) {}
  bool node :1;
  bool isOverwrite :1;
} _Agilor_AddNewTag_args__isset;

class Agilor_AddNewTag_args {
 public:

  static const char* ascii_fingerprint; // = "CE6E6B7DAABA3A8A3081645CC032CCD9";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x6E,0x6B,0x7D,0xAA,0xBA,0x3A,0x8A,0x30,0x81,0x64,0x5C,0xC0,0x32,0xCC,0xD9};

  Agilor_AddNewTag_args(const Agilor_AddNewTag_args&);
  Agilor_AddNewTag_args& operator=(const Agilor_AddNewTag_args&);
  Agilor_AddNewTag_args() : isOverwrite(0) {
  }

  virtual ~Agilor_AddNewTag_args() throw();
  TAGNODE node;
  bool isOverwrite;

  _Agilor_AddNewTag_args__isset __isset;

  void __set_node(const TAGNODE& val);

  void __set_isOverwrite(const bool val);

  bool operator == (const Agilor_AddNewTag_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (!(isOverwrite == rhs.isOverwrite))
      return false;
    return true;
  }
  bool operator != (const Agilor_AddNewTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_AddNewTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddNewTag_args& obj);
};


class Agilor_AddNewTag_pargs {
 public:

  static const char* ascii_fingerprint; // = "CE6E6B7DAABA3A8A3081645CC032CCD9";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x6E,0x6B,0x7D,0xAA,0xBA,0x3A,0x8A,0x30,0x81,0x64,0x5C,0xC0,0x32,0xCC,0xD9};


  virtual ~Agilor_AddNewTag_pargs() throw();
  const TAGNODE* node;
  const bool* isOverwrite;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddNewTag_pargs& obj);
};

typedef struct _Agilor_AddNewTag_result__isset {
  _Agilor_AddNewTag_result__isset() : a(false), b(false), c(false), d(false) {}
  bool a :1;
  bool b :1;
  bool c :1;
  bool d :1;
} _Agilor_AddNewTag_result__isset;

class Agilor_AddNewTag_result {
 public:

  static const char* ascii_fingerprint; // = "A047E6715C6CA347912082CACFC670AC";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x47,0xE6,0x71,0x5C,0x6C,0xA3,0x47,0x91,0x20,0x82,0xCA,0xCF,0xC6,0x70,0xAC};

  Agilor_AddNewTag_result(const Agilor_AddNewTag_result&);
  Agilor_AddNewTag_result& operator=(const Agilor_AddNewTag_result&);
  Agilor_AddNewTag_result() {
  }

  virtual ~Agilor_AddNewTag_result() throw();
  WriteValueException a;
  TargetInsertException b;
  DeviceNotFoundException c;
  ParamErrorException d;

  _Agilor_AddNewTag_result__isset __isset;

  void __set_a(const WriteValueException& val);

  void __set_b(const TargetInsertException& val);

  void __set_c(const DeviceNotFoundException& val);

  void __set_d(const ParamErrorException& val);

  bool operator == (const Agilor_AddNewTag_result & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(d == rhs.d))
      return false;
    return true;
  }
  bool operator != (const Agilor_AddNewTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_AddNewTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddNewTag_result& obj);
};

typedef struct _Agilor_AddNewTag_presult__isset {
  _Agilor_AddNewTag_presult__isset() : a(false), b(false), c(false), d(false) {}
  bool a :1;
  bool b :1;
  bool c :1;
  bool d :1;
} _Agilor_AddNewTag_presult__isset;

class Agilor_AddNewTag_presult {
 public:

  static const char* ascii_fingerprint; // = "A047E6715C6CA347912082CACFC670AC";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x47,0xE6,0x71,0x5C,0x6C,0xA3,0x47,0x91,0x20,0x82,0xCA,0xCF,0xC6,0x70,0xAC};


  virtual ~Agilor_AddNewTag_presult() throw();
  WriteValueException a;
  TargetInsertException b;
  DeviceNotFoundException c;
  ParamErrorException d;

  _Agilor_AddNewTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_AddNewTag_presult& obj);
};

typedef struct _Agilor_EnumNextTag_args__isset {
  _Agilor_EnumNextTag_args__isset() : hwnd(false) {}
  bool hwnd :1;
} _Agilor_EnumNextTag_args__isset;

class Agilor_EnumNextTag_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Agilor_EnumNextTag_args(const Agilor_EnumNextTag_args&);
  Agilor_EnumNextTag_args& operator=(const Agilor_EnumNextTag_args&);
  Agilor_EnumNextTag_args() : hwnd(0) {
  }

  virtual ~Agilor_EnumNextTag_args() throw();
  int32_t hwnd;

  _Agilor_EnumNextTag_args__isset __isset;

  void __set_hwnd(const int32_t val);

  bool operator == (const Agilor_EnumNextTag_args & rhs) const
  {
    if (!(hwnd == rhs.hwnd))
      return false;
    return true;
  }
  bool operator != (const Agilor_EnumNextTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_EnumNextTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumNextTag_args& obj);
};


class Agilor_EnumNextTag_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Agilor_EnumNextTag_pargs() throw();
  const int32_t* hwnd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumNextTag_pargs& obj);
};

typedef struct _Agilor_EnumNextTag_result__isset {
  _Agilor_EnumNextTag_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_EnumNextTag_result__isset;

class Agilor_EnumNextTag_result {
 public:

  static const char* ascii_fingerprint; // = "F432994420FAE5F37FD361CA14B7C273";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x32,0x99,0x44,0x20,0xFA,0xE5,0xF3,0x7F,0xD3,0x61,0xCA,0x14,0xB7,0xC2,0x73};

  Agilor_EnumNextTag_result(const Agilor_EnumNextTag_result&);
  Agilor_EnumNextTag_result& operator=(const Agilor_EnumNextTag_result&);
  Agilor_EnumNextTag_result() {
  }

  virtual ~Agilor_EnumNextTag_result() throw();
  TAGNODE success;
  HandleErrorException e;

  _Agilor_EnumNextTag_result__isset __isset;

  void __set_success(const TAGNODE& val);

  void __set_e(const HandleErrorException& val);

  bool operator == (const Agilor_EnumNextTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Agilor_EnumNextTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_EnumNextTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumNextTag_result& obj);
};

typedef struct _Agilor_EnumNextTag_presult__isset {
  _Agilor_EnumNextTag_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Agilor_EnumNextTag_presult__isset;

class Agilor_EnumNextTag_presult {
 public:

  static const char* ascii_fingerprint; // = "F432994420FAE5F37FD361CA14B7C273";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x32,0x99,0x44,0x20,0xFA,0xE5,0xF3,0x7F,0xD3,0x61,0xCA,0x14,0xB7,0xC2,0x73};


  virtual ~Agilor_EnumNextTag_presult() throw();
  TAGNODE* success;
  HandleErrorException e;

  _Agilor_EnumNextTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_EnumNextTag_presult& obj);
};

typedef struct _Agilor_SubscribeTags_args__isset {
  _Agilor_SubscribeTags_args__isset() : tagNames(false), count(false) {}
  bool tagNames :1;
  bool count :1;
} _Agilor_SubscribeTags_args__isset;

class Agilor_SubscribeTags_args {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};

  Agilor_SubscribeTags_args(const Agilor_SubscribeTags_args&);
  Agilor_SubscribeTags_args& operator=(const Agilor_SubscribeTags_args&);
  Agilor_SubscribeTags_args() : tagNames(), count(0) {
  }

  virtual ~Agilor_SubscribeTags_args() throw();
  std::string tagNames;
  int16_t count;

  _Agilor_SubscribeTags_args__isset __isset;

  void __set_tagNames(const std::string& val);

  void __set_count(const int16_t val);

  bool operator == (const Agilor_SubscribeTags_args & rhs) const
  {
    if (!(tagNames == rhs.tagNames))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const Agilor_SubscribeTags_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_SubscribeTags_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SubscribeTags_args& obj);
};


class Agilor_SubscribeTags_pargs {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};


  virtual ~Agilor_SubscribeTags_pargs() throw();
  const std::string* tagNames;
  const int16_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SubscribeTags_pargs& obj);
};

typedef struct _Agilor_SubscribeTags_result__isset {
  _Agilor_SubscribeTags_result__isset() : success(false) {}
  bool success :1;
} _Agilor_SubscribeTags_result__isset;

class Agilor_SubscribeTags_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Agilor_SubscribeTags_result(const Agilor_SubscribeTags_result&);
  Agilor_SubscribeTags_result& operator=(const Agilor_SubscribeTags_result&);
  Agilor_SubscribeTags_result() : success(0) {
  }

  virtual ~Agilor_SubscribeTags_result() throw();
  int32_t success;

  _Agilor_SubscribeTags_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Agilor_SubscribeTags_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_SubscribeTags_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_SubscribeTags_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SubscribeTags_result& obj);
};

typedef struct _Agilor_SubscribeTags_presult__isset {
  _Agilor_SubscribeTags_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_SubscribeTags_presult__isset;

class Agilor_SubscribeTags_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Agilor_SubscribeTags_presult() throw();
  int32_t* success;

  _Agilor_SubscribeTags_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_SubscribeTags_presult& obj);
};


class Agilor_GetSubTagValue_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_GetSubTagValue_args(const Agilor_GetSubTagValue_args&);
  Agilor_GetSubTagValue_args& operator=(const Agilor_GetSubTagValue_args&);
  Agilor_GetSubTagValue_args() {
  }

  virtual ~Agilor_GetSubTagValue_args() throw();

  bool operator == (const Agilor_GetSubTagValue_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_GetSubTagValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetSubTagValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetSubTagValue_args& obj);
};


class Agilor_GetSubTagValue_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_GetSubTagValue_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetSubTagValue_pargs& obj);
};

typedef struct _Agilor_GetSubTagValue_result__isset {
  _Agilor_GetSubTagValue_result__isset() : success(false) {}
  bool success :1;
} _Agilor_GetSubTagValue_result__isset;

class Agilor_GetSubTagValue_result {
 public:

  static const char* ascii_fingerprint; // = "BB4FE54E71C35E3E7A43F7DA68DA3B85";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x4F,0xE5,0x4E,0x71,0xC3,0x5E,0x3E,0x7A,0x43,0xF7,0xDA,0x68,0xDA,0x3B,0x85};

  Agilor_GetSubTagValue_result(const Agilor_GetSubTagValue_result&);
  Agilor_GetSubTagValue_result& operator=(const Agilor_GetSubTagValue_result&);
  Agilor_GetSubTagValue_result() {
  }

  virtual ~Agilor_GetSubTagValue_result() throw();
  TAGVAL success;

  _Agilor_GetSubTagValue_result__isset __isset;

  void __set_success(const TAGVAL& val);

  bool operator == (const Agilor_GetSubTagValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_GetSubTagValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_GetSubTagValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetSubTagValue_result& obj);
};

typedef struct _Agilor_GetSubTagValue_presult__isset {
  _Agilor_GetSubTagValue_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_GetSubTagValue_presult__isset;

class Agilor_GetSubTagValue_presult {
 public:

  static const char* ascii_fingerprint; // = "BB4FE54E71C35E3E7A43F7DA68DA3B85";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x4F,0xE5,0x4E,0x71,0xC3,0x5E,0x3E,0x7A,0x43,0xF7,0xDA,0x68,0xDA,0x3B,0x85};


  virtual ~Agilor_GetSubTagValue_presult() throw();
  TAGVAL* success;

  _Agilor_GetSubTagValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_GetSubTagValue_presult& obj);
};

typedef struct _Agilor_UnSubscribeTags_args__isset {
  _Agilor_UnSubscribeTags_args__isset() : tagNames(false), count(false) {}
  bool tagNames :1;
  bool count :1;
} _Agilor_UnSubscribeTags_args__isset;

class Agilor_UnSubscribeTags_args {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};

  Agilor_UnSubscribeTags_args(const Agilor_UnSubscribeTags_args&);
  Agilor_UnSubscribeTags_args& operator=(const Agilor_UnSubscribeTags_args&);
  Agilor_UnSubscribeTags_args() : tagNames(), count(0) {
  }

  virtual ~Agilor_UnSubscribeTags_args() throw();
  std::string tagNames;
  int16_t count;

  _Agilor_UnSubscribeTags_args__isset __isset;

  void __set_tagNames(const std::string& val);

  void __set_count(const int16_t val);

  bool operator == (const Agilor_UnSubscribeTags_args & rhs) const
  {
    if (!(tagNames == rhs.tagNames))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const Agilor_UnSubscribeTags_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_UnSubscribeTags_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeTags_args& obj);
};


class Agilor_UnSubscribeTags_pargs {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};


  virtual ~Agilor_UnSubscribeTags_pargs() throw();
  const std::string* tagNames;
  const int16_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeTags_pargs& obj);
};

typedef struct _Agilor_UnSubscribeTags_result__isset {
  _Agilor_UnSubscribeTags_result__isset() : success(false) {}
  bool success :1;
} _Agilor_UnSubscribeTags_result__isset;

class Agilor_UnSubscribeTags_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Agilor_UnSubscribeTags_result(const Agilor_UnSubscribeTags_result&);
  Agilor_UnSubscribeTags_result& operator=(const Agilor_UnSubscribeTags_result&);
  Agilor_UnSubscribeTags_result() : success(0) {
  }

  virtual ~Agilor_UnSubscribeTags_result() throw();
  int32_t success;

  _Agilor_UnSubscribeTags_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Agilor_UnSubscribeTags_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_UnSubscribeTags_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_UnSubscribeTags_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeTags_result& obj);
};

typedef struct _Agilor_UnSubscribeTags_presult__isset {
  _Agilor_UnSubscribeTags_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_UnSubscribeTags_presult__isset;

class Agilor_UnSubscribeTags_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Agilor_UnSubscribeTags_presult() throw();
  int32_t* success;

  _Agilor_UnSubscribeTags_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeTags_presult& obj);
};


class Agilor_UnSubscribeAll_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Agilor_UnSubscribeAll_args(const Agilor_UnSubscribeAll_args&);
  Agilor_UnSubscribeAll_args& operator=(const Agilor_UnSubscribeAll_args&);
  Agilor_UnSubscribeAll_args() {
  }

  virtual ~Agilor_UnSubscribeAll_args() throw();

  bool operator == (const Agilor_UnSubscribeAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Agilor_UnSubscribeAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_UnSubscribeAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeAll_args& obj);
};


class Agilor_UnSubscribeAll_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Agilor_UnSubscribeAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeAll_pargs& obj);
};

typedef struct _Agilor_UnSubscribeAll_result__isset {
  _Agilor_UnSubscribeAll_result__isset() : success(false) {}
  bool success :1;
} _Agilor_UnSubscribeAll_result__isset;

class Agilor_UnSubscribeAll_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Agilor_UnSubscribeAll_result(const Agilor_UnSubscribeAll_result&);
  Agilor_UnSubscribeAll_result& operator=(const Agilor_UnSubscribeAll_result&);
  Agilor_UnSubscribeAll_result() : success(0) {
  }

  virtual ~Agilor_UnSubscribeAll_result() throw();
  int32_t success;

  _Agilor_UnSubscribeAll_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Agilor_UnSubscribeAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agilor_UnSubscribeAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agilor_UnSubscribeAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeAll_result& obj);
};

typedef struct _Agilor_UnSubscribeAll_presult__isset {
  _Agilor_UnSubscribeAll_presult__isset() : success(false) {}
  bool success :1;
} _Agilor_UnSubscribeAll_presult__isset;

class Agilor_UnSubscribeAll_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Agilor_UnSubscribeAll_presult() throw();
  int32_t* success;

  _Agilor_UnSubscribeAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Agilor_UnSubscribeAll_presult& obj);
};

class AgilorClient : virtual public AgilorIf {
 public:
  AgilorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AgilorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void AddDevice(const DEVICE& device);
  void send_AddDevice(const DEVICE& device);
  void recv_AddDevice();
  void DeleteDevice(const std::string& deviceName);
  void send_DeleteDevice(const std::string& deviceName);
  void recv_DeleteDevice();
  bool ModifyDevice(const DEVICE& device);
  void send_ModifyDevice(const DEVICE& device);
  bool recv_ModifyDevice();
  int32_t QueryDeviceInfo();
  void send_QueryDeviceInfo();
  int32_t recv_QueryDeviceInfo();
  void EnumDeviceInfo(DEVICE& _return, const int32_t hRecordset);
  void send_EnumDeviceInfo(const int32_t hRecordset);
  void recv_EnumDeviceInfo(DEVICE& _return);
  void GetAllDevices(std::vector<DEVICE> & _return);
  void send_GetAllDevices();
  void recv_GetAllDevices(std::vector<DEVICE> & _return);
  int32_t TagCountByDevice(const std::string& deviceName);
  void send_TagCountByDevice(const std::string& deviceName);
  int32_t recv_TagCountByDevice();
  int32_t QuerySnapshots(const std::string& tagNames, const int32_t tagCount);
  void send_QuerySnapshots(const std::string& tagNames, const int32_t tagCount);
  int32_t recv_QuerySnapshots();
  void GetNextTagValue(TAGVAL& _return, const int32_t hRecordset, const bool isRemoved);
  void send_GetNextTagValue(const int32_t hRecordset, const bool isRemoved);
  void recv_GetNextTagValue(TAGVAL& _return);
  int32_t QueryTagHistory(const std::string& tagName, const int32_t startTime, const int32_t endTime, const int32_t step);
  void send_QueryTagHistory(const std::string& tagName, const int32_t startTime, const int32_t endTime, const int32_t step);
  int32_t recv_QueryTagHistory();
  void GetAggregateValue(TAGVAL& _return, const int32_t hRecordset, const AGGREGATE::type ag, const bool isRemoved);
  void send_GetAggregateValue(const int32_t hRecordset, const AGGREGATE::type ag, const bool isRemoved);
  void recv_GetAggregateValue(TAGVAL& _return);
  int32_t QueryTagsbyDevice(const std::string& deviceName);
  void send_QueryTagsbyDevice(const std::string& deviceName);
  int32_t recv_QueryTagsbyDevice();
  void EnumTagName(std::string& _return, const int32_t hRecordset);
  void send_EnumTagName(const int32_t hRecordset);
  void recv_EnumTagName(std::string& _return);
  void GetTagNamebyId(std::string& _return, const int32_t tagId);
  void send_GetTagNamebyId(const int32_t tagId);
  void recv_GetTagNamebyId(std::string& _return);
  void SetValue(const TAGVAL& value);
  void send_SetValue(const TAGVAL& value);
  void recv_SetValue();
  void SetValues(const std::vector<TAGVAL> & values);
  void send_SetValues(const std::vector<TAGVAL> & values);
  void recv_SetValues();
  void RemoveTag(const int32_t tagId);
  void send_RemoveTag(const int32_t tagId);
  void recv_RemoveTag();
  void GetTagInfo(TAGNODE& _return, const std::string& tagName);
  void send_GetTagInfo(const std::string& tagName);
  void recv_GetTagInfo(TAGNODE& _return);
  void AddNewTag(const TAGNODE& node, const bool isOverwrite);
  void send_AddNewTag(const TAGNODE& node, const bool isOverwrite);
  void recv_AddNewTag();
  void EnumNextTag(TAGNODE& _return, const int32_t hwnd);
  void send_EnumNextTag(const int32_t hwnd);
  void recv_EnumNextTag(TAGNODE& _return);
  int32_t SubscribeTags(const std::string& tagNames, const int16_t count);
  void send_SubscribeTags(const std::string& tagNames, const int16_t count);
  int32_t recv_SubscribeTags();
  void GetSubTagValue(TAGVAL& _return);
  void send_GetSubTagValue();
  void recv_GetSubTagValue(TAGVAL& _return);
  int32_t UnSubscribeTags(const std::string& tagNames, const int16_t count);
  void send_UnSubscribeTags(const std::string& tagNames, const int16_t count);
  int32_t recv_UnSubscribeTags();
  int32_t UnSubscribeAll();
  void send_UnSubscribeAll();
  int32_t recv_UnSubscribeAll();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgilorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgilorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgilorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ModifyDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryDeviceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnumDeviceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAllDevices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TagCountByDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QuerySnapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNextTagValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryTagHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAggregateValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryTagsbyDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnumTagName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTagNamebyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTagInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddNewTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnumNextTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SubscribeTags(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSubTagValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnSubscribeTags(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnSubscribeAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgilorProcessor(boost::shared_ptr<AgilorIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &AgilorProcessor::process_ping;
    processMap_["AddDevice"] = &AgilorProcessor::process_AddDevice;
    processMap_["DeleteDevice"] = &AgilorProcessor::process_DeleteDevice;
    processMap_["ModifyDevice"] = &AgilorProcessor::process_ModifyDevice;
    processMap_["QueryDeviceInfo"] = &AgilorProcessor::process_QueryDeviceInfo;
    processMap_["EnumDeviceInfo"] = &AgilorProcessor::process_EnumDeviceInfo;
    processMap_["GetAllDevices"] = &AgilorProcessor::process_GetAllDevices;
    processMap_["TagCountByDevice"] = &AgilorProcessor::process_TagCountByDevice;
    processMap_["QuerySnapshots"] = &AgilorProcessor::process_QuerySnapshots;
    processMap_["GetNextTagValue"] = &AgilorProcessor::process_GetNextTagValue;
    processMap_["QueryTagHistory"] = &AgilorProcessor::process_QueryTagHistory;
    processMap_["GetAggregateValue"] = &AgilorProcessor::process_GetAggregateValue;
    processMap_["QueryTagsbyDevice"] = &AgilorProcessor::process_QueryTagsbyDevice;
    processMap_["EnumTagName"] = &AgilorProcessor::process_EnumTagName;
    processMap_["GetTagNamebyId"] = &AgilorProcessor::process_GetTagNamebyId;
    processMap_["SetValue"] = &AgilorProcessor::process_SetValue;
    processMap_["SetValues"] = &AgilorProcessor::process_SetValues;
    processMap_["RemoveTag"] = &AgilorProcessor::process_RemoveTag;
    processMap_["GetTagInfo"] = &AgilorProcessor::process_GetTagInfo;
    processMap_["AddNewTag"] = &AgilorProcessor::process_AddNewTag;
    processMap_["EnumNextTag"] = &AgilorProcessor::process_EnumNextTag;
    processMap_["SubscribeTags"] = &AgilorProcessor::process_SubscribeTags;
    processMap_["GetSubTagValue"] = &AgilorProcessor::process_GetSubTagValue;
    processMap_["UnSubscribeTags"] = &AgilorProcessor::process_UnSubscribeTags;
    processMap_["UnSubscribeAll"] = &AgilorProcessor::process_UnSubscribeAll;
  }

  virtual ~AgilorProcessor() {}
};

class AgilorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgilorProcessorFactory(const ::boost::shared_ptr< AgilorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgilorIfFactory > handlerFactory_;
};

class AgilorMultiface : virtual public AgilorIf {
 public:
  AgilorMultiface(std::vector<boost::shared_ptr<AgilorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgilorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgilorIf> > ifaces_;
  AgilorMultiface() {}
  void add(boost::shared_ptr<AgilorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void AddDevice(const DEVICE& device) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddDevice(device);
    }
    ifaces_[i]->AddDevice(device);
  }

  void DeleteDevice(const std::string& deviceName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteDevice(deviceName);
    }
    ifaces_[i]->DeleteDevice(deviceName);
  }

  bool ModifyDevice(const DEVICE& device) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ModifyDevice(device);
    }
    return ifaces_[i]->ModifyDevice(device);
  }

  int32_t QueryDeviceInfo() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryDeviceInfo();
    }
    return ifaces_[i]->QueryDeviceInfo();
  }

  void EnumDeviceInfo(DEVICE& _return, const int32_t hRecordset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EnumDeviceInfo(_return, hRecordset);
    }
    ifaces_[i]->EnumDeviceInfo(_return, hRecordset);
    return;
  }

  void GetAllDevices(std::vector<DEVICE> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAllDevices(_return);
    }
    ifaces_[i]->GetAllDevices(_return);
    return;
  }

  int32_t TagCountByDevice(const std::string& deviceName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TagCountByDevice(deviceName);
    }
    return ifaces_[i]->TagCountByDevice(deviceName);
  }

  int32_t QuerySnapshots(const std::string& tagNames, const int32_t tagCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QuerySnapshots(tagNames, tagCount);
    }
    return ifaces_[i]->QuerySnapshots(tagNames, tagCount);
  }

  void GetNextTagValue(TAGVAL& _return, const int32_t hRecordset, const bool isRemoved) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNextTagValue(_return, hRecordset, isRemoved);
    }
    ifaces_[i]->GetNextTagValue(_return, hRecordset, isRemoved);
    return;
  }

  int32_t QueryTagHistory(const std::string& tagName, const int32_t startTime, const int32_t endTime, const int32_t step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryTagHistory(tagName, startTime, endTime, step);
    }
    return ifaces_[i]->QueryTagHistory(tagName, startTime, endTime, step);
  }

  void GetAggregateValue(TAGVAL& _return, const int32_t hRecordset, const AGGREGATE::type ag, const bool isRemoved) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAggregateValue(_return, hRecordset, ag, isRemoved);
    }
    ifaces_[i]->GetAggregateValue(_return, hRecordset, ag, isRemoved);
    return;
  }

  int32_t QueryTagsbyDevice(const std::string& deviceName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryTagsbyDevice(deviceName);
    }
    return ifaces_[i]->QueryTagsbyDevice(deviceName);
  }

  void EnumTagName(std::string& _return, const int32_t hRecordset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EnumTagName(_return, hRecordset);
    }
    ifaces_[i]->EnumTagName(_return, hRecordset);
    return;
  }

  void GetTagNamebyId(std::string& _return, const int32_t tagId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTagNamebyId(_return, tagId);
    }
    ifaces_[i]->GetTagNamebyId(_return, tagId);
    return;
  }

  void SetValue(const TAGVAL& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetValue(value);
    }
    ifaces_[i]->SetValue(value);
  }

  void SetValues(const std::vector<TAGVAL> & values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetValues(values);
    }
    ifaces_[i]->SetValues(values);
  }

  void RemoveTag(const int32_t tagId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveTag(tagId);
    }
    ifaces_[i]->RemoveTag(tagId);
  }

  void GetTagInfo(TAGNODE& _return, const std::string& tagName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTagInfo(_return, tagName);
    }
    ifaces_[i]->GetTagInfo(_return, tagName);
    return;
  }

  void AddNewTag(const TAGNODE& node, const bool isOverwrite) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddNewTag(node, isOverwrite);
    }
    ifaces_[i]->AddNewTag(node, isOverwrite);
  }

  void EnumNextTag(TAGNODE& _return, const int32_t hwnd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EnumNextTag(_return, hwnd);
    }
    ifaces_[i]->EnumNextTag(_return, hwnd);
    return;
  }

  int32_t SubscribeTags(const std::string& tagNames, const int16_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SubscribeTags(tagNames, count);
    }
    return ifaces_[i]->SubscribeTags(tagNames, count);
  }

  void GetSubTagValue(TAGVAL& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSubTagValue(_return);
    }
    ifaces_[i]->GetSubTagValue(_return);
    return;
  }

  int32_t UnSubscribeTags(const std::string& tagNames, const int16_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnSubscribeTags(tagNames, count);
    }
    return ifaces_[i]->UnSubscribeTags(tagNames, count);
  }

  int32_t UnSubscribeAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnSubscribeAll();
    }
    return ifaces_[i]->UnSubscribeAll();
  }

};



#endif
