/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "inter_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kAGGREGATEValues[] = {
  AGGREGATE::AF_SUMMARY,
  AGGREGATE::AF_MINIMUM,
  AGGREGATE::AF_MAXIMUM,
  AGGREGATE::AF_AVERAGE,
  AGGREGATE::AF_COUNT,
  AGGREGATE::AF_SUMMARY_FOR_CONTINOUS,
  AGGREGATE::AF_AVERAGE_FOR_CONTINOUS
};
const char* _kAGGREGATENames[] = {
  "AF_SUMMARY",
  "AF_MINIMUM",
  "AF_MAXIMUM",
  "AF_AVERAGE",
  "AF_COUNT",
  "AF_SUMMARY_FOR_CONTINOUS",
  "AF_AVERAGE_FOR_CONTINOUS"
};
const std::map<int, const char*> _AGGREGATE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kAGGREGATEValues, _kAGGREGATENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEXCEPTIONTYPEValues[] = {
  EXCEPTIONTYPE::INSERTFAIL,
  EXCEPTIONTYPE::REGISTERFAIL
};
const char* _kEXCEPTIONTYPENames[] = {
  "INSERTFAIL",
  "REGISTERFAIL"
};
const std::map<int, const char*> _EXCEPTIONTYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEXCEPTIONTYPEValues, _kEXCEPTIONTYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


DEVICE::~DEVICE() throw() {
}


void DEVICE::__set_name(const std::string& val) {
  this->name = val;
}

void DEVICE::__set_id(const int32_t val) {
  this->id = val;
}

const char* DEVICE::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t DEVICE::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t DEVICE::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DEVICE::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DEVICE");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DEVICE &a, DEVICE &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

DEVICE::DEVICE(const DEVICE& other0) {
  name = other0.name;
  id = other0.id;
  __isset = other0.__isset;
}
DEVICE& DEVICE::operator=(const DEVICE& other1) {
  name = other1.name;
  id = other1.id;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DEVICE& obj) {
  using apache::thrift::to_string;
  out << "DEVICE(";
  out << "name=" << to_string(obj.name);
  out << ", " << "id=" << to_string(obj.id);
  out << ")";
  return out;
}


TAGVAL::~TAGVAL() throw() {
}


void TAGVAL::__set_name(const std::string& val) {
  this->name = val;
}

void TAGVAL::__set_timestamp(const int32_t val) {
  this->timestamp = val;
}

void TAGVAL::__set_state(const int32_t val) {
  this->state = val;
}

void TAGVAL::__set_type(const int8_t val) {
  this->type = val;
}

void TAGVAL::__set_value(const std::string& val) {
  this->value = val;
}

void TAGVAL::__set_id(const int32_t val) {
  this->id = val;
}

void TAGVAL::__set_device(const std::string& val) {
  this->device = val;
}

const char* TAGVAL::ascii_fingerprint = "FA396A1A2D5CCBDE0CAE233C1C885C24";
const uint8_t TAGVAL::binary_fingerprint[16] = {0xFA,0x39,0x6A,0x1A,0x2D,0x5C,0xCB,0xDE,0x0C,0xAE,0x23,0x3C,0x1C,0x88,0x5C,0x24};

uint32_t TAGVAL::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->device);
          this->__isset.device = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAGVAL::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TAGVAL");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->device);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TAGVAL &a, TAGVAL &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.timestamp, b.timestamp);
  swap(a.state, b.state);
  swap(a.type, b.type);
  swap(a.value, b.value);
  swap(a.id, b.id);
  swap(a.device, b.device);
  swap(a.__isset, b.__isset);
}

TAGVAL::TAGVAL(const TAGVAL& other2) {
  name = other2.name;
  timestamp = other2.timestamp;
  state = other2.state;
  type = other2.type;
  value = other2.value;
  id = other2.id;
  device = other2.device;
  __isset = other2.__isset;
}
TAGVAL& TAGVAL::operator=(const TAGVAL& other3) {
  name = other3.name;
  timestamp = other3.timestamp;
  state = other3.state;
  type = other3.type;
  value = other3.value;
  id = other3.id;
  device = other3.device;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TAGVAL& obj) {
  using apache::thrift::to_string;
  out << "TAGVAL(";
  out << "name=" << to_string(obj.name);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "value=" << to_string(obj.value);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "device=" << to_string(obj.device);
  out << ")";
  return out;
}


TAGNODE::~TAGNODE() throw() {
}


void TAGNODE::__set_name(const std::string& val) {
  this->name = val;
}

void TAGNODE::__set_desc(const std::string& val) {
  this->desc = val;
}

void TAGNODE::__set_engUnit(const std::string& val) {
  this->engUnit = val;
}

void TAGNODE::__set_id(const int32_t val) {
  this->id = val;
}

void TAGNODE::__set_type(const int8_t val) {
  this->type = val;
}

void TAGNODE::__set_IOState(const int8_t val) {
  this->IOState = val;
}

void TAGNODE::__set_typicalVal(const double val) {
  this->typicalVal = val;
}

void TAGNODE::__set_value(const std::string& val) {
  this->value = val;
}

void TAGNODE::__set_enumDesc(const std::string& val) {
  this->enumDesc = val;
}

void TAGNODE::__set_timestamp(const int32_t val) {
  this->timestamp = val;
}

void TAGNODE::__set_state(const int32_t val) {
  this->state = val;
}

void TAGNODE::__set_deviceName(const std::string& val) {
  this->deviceName = val;
}

void TAGNODE::__set_groupName(const std::string& val) {
  this->groupName = val;
}

void TAGNODE::__set_sourceTag(const std::string& val) {
  this->sourceTag = val;
}

void TAGNODE::__set_upperLimit(const double val) {
  this->upperLimit = val;
}

void TAGNODE::__set_lowerLimit(const double val) {
  this->lowerLimit = val;
}

void TAGNODE::__set_pushreference(const int16_t val) {
  this->pushreference = val;
}

void TAGNODE::__set_ruleReference(const int16_t val) {
  this->ruleReference = val;
}

void TAGNODE::__set_exceptionMin(const int32_t val) {
  this->exceptionMin = val;
}

void TAGNODE::__set_exceptionMax(const int32_t val) {
  this->exceptionMax = val;
}

void TAGNODE::__set_exceptionDev(const double val) {
  this->exceptionDev = val;
}

void TAGNODE::__set_alarmType(const int16_t val) {
  this->alarmType = val;
}

void TAGNODE::__set_alarmState(const int16_t val) {
  this->alarmState = val;
}

void TAGNODE::__set_alarmHi(const double val) {
  this->alarmHi = val;
}

void TAGNODE::__set_alarmLo(const double val) {
  this->alarmLo = val;
}

void TAGNODE::__set_alarmHiHi(const double val) {
  this->alarmHiHi = val;
}

void TAGNODE::__set_alarmLolo(const double val) {
  this->alarmLolo = val;
}

void TAGNODE::__set_hiPriority(const int16_t val) {
  this->hiPriority = val;
}

void TAGNODE::__set_loPriority(const int16_t val) {
  this->loPriority = val;
}

void TAGNODE::__set_hihiPriority(const int16_t val) {
  this->hihiPriority = val;
}

void TAGNODE::__set_loloPriority(const int16_t val) {
  this->loloPriority = val;
}

void TAGNODE::__set_isArchived(const bool val) {
  this->isArchived = val;
}

void TAGNODE::__set_isCompressed(const bool val) {
  this->isCompressed = val;
}

void TAGNODE::__set_interMethod(const int8_t val) {
  this->interMethod = val;
}

void TAGNODE::__set_hisIndex(const int32_t val) {
  this->hisIndex = val;
}

void TAGNODE::__set_compressMin(const int32_t val) {
  this->compressMin = val;
}

void TAGNODE::__set_compressMax(const int32_t val) {
  this->compressMax = val;
}

void TAGNODE::__set_lastValue(const double val) {
  this->lastValue = val;
}

void TAGNODE::__set_creationDate(const int32_t val) {
  this->creationDate = val;
}

const char* TAGNODE::ascii_fingerprint = "94802ABAE2B134B9B620AF4A6E36FA6D";
const uint8_t TAGNODE::binary_fingerprint[16] = {0x94,0x80,0x2A,0xBA,0xE2,0xB1,0x34,0xB9,0xB6,0x20,0xAF,0x4A,0x6E,0x36,0xFA,0x6D};

uint32_t TAGNODE::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->engUnit);
          this->__isset.engUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->IOState);
          this->__isset.IOState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->typicalVal);
          this->__isset.typicalVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->enumDesc);
          this->__isset.enumDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceName);
          this->__isset.deviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupName);
          this->__isset.groupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceTag);
          this->__isset.sourceTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->upperLimit);
          this->__isset.upperLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lowerLimit);
          this->__isset.lowerLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->pushreference);
          this->__isset.pushreference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ruleReference);
          this->__isset.ruleReference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exceptionMin);
          this->__isset.exceptionMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exceptionMax);
          this->__isset.exceptionMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->exceptionDev);
          this->__isset.exceptionDev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->alarmType);
          this->__isset.alarmType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->alarmState);
          this->__isset.alarmState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alarmHi);
          this->__isset.alarmHi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alarmLo);
          this->__isset.alarmLo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alarmHiHi);
          this->__isset.alarmHiHi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alarmLolo);
          this->__isset.alarmLolo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hiPriority);
          this->__isset.hiPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->loPriority);
          this->__isset.loPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hihiPriority);
          this->__isset.hihiPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->loloPriority);
          this->__isset.loloPriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isArchived);
          this->__isset.isArchived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isCompressed);
          this->__isset.isCompressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->interMethod);
          this->__isset.interMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hisIndex);
          this->__isset.hisIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compressMin);
          this->__isset.compressMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compressMax);
          this->__isset.compressMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lastValue);
          this->__isset.lastValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->creationDate);
          this->__isset.creationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAGNODE::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TAGNODE");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("engUnit", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->engUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IOState", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->IOState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("typicalVal", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->typicalVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enumDesc", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->enumDesc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceName", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->deviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupName", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->groupName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceTag", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->sourceTag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upperLimit", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->upperLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lowerLimit", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->lowerLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pushreference", ::apache::thrift::protocol::T_I16, 17);
  xfer += oprot->writeI16(this->pushreference);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ruleReference", ::apache::thrift::protocol::T_I16, 18);
  xfer += oprot->writeI16(this->ruleReference);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exceptionMin", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->exceptionMin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exceptionMax", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->exceptionMax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exceptionDev", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->exceptionDev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmType", ::apache::thrift::protocol::T_I16, 22);
  xfer += oprot->writeI16(this->alarmType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmState", ::apache::thrift::protocol::T_I16, 23);
  xfer += oprot->writeI16(this->alarmState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmHi", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->alarmHi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmLo", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->alarmLo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmHiHi", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->alarmHiHi);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmLolo", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->alarmLolo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hiPriority", ::apache::thrift::protocol::T_I16, 28);
  xfer += oprot->writeI16(this->hiPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loPriority", ::apache::thrift::protocol::T_I16, 29);
  xfer += oprot->writeI16(this->loPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hihiPriority", ::apache::thrift::protocol::T_I16, 30);
  xfer += oprot->writeI16(this->hihiPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loloPriority", ::apache::thrift::protocol::T_I16, 31);
  xfer += oprot->writeI16(this->loloPriority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isArchived", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->isArchived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isCompressed", ::apache::thrift::protocol::T_BOOL, 33);
  xfer += oprot->writeBool(this->isCompressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interMethod", ::apache::thrift::protocol::T_BYTE, 34);
  xfer += oprot->writeByte(this->interMethod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hisIndex", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->hisIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compressMin", ::apache::thrift::protocol::T_I32, 36);
  xfer += oprot->writeI32(this->compressMin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compressMax", ::apache::thrift::protocol::T_I32, 37);
  xfer += oprot->writeI32(this->compressMax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastValue", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->lastValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creationDate", ::apache::thrift::protocol::T_I32, 39);
  xfer += oprot->writeI32(this->creationDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TAGNODE &a, TAGNODE &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.desc, b.desc);
  swap(a.engUnit, b.engUnit);
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.IOState, b.IOState);
  swap(a.typicalVal, b.typicalVal);
  swap(a.value, b.value);
  swap(a.enumDesc, b.enumDesc);
  swap(a.timestamp, b.timestamp);
  swap(a.state, b.state);
  swap(a.deviceName, b.deviceName);
  swap(a.groupName, b.groupName);
  swap(a.sourceTag, b.sourceTag);
  swap(a.upperLimit, b.upperLimit);
  swap(a.lowerLimit, b.lowerLimit);
  swap(a.pushreference, b.pushreference);
  swap(a.ruleReference, b.ruleReference);
  swap(a.exceptionMin, b.exceptionMin);
  swap(a.exceptionMax, b.exceptionMax);
  swap(a.exceptionDev, b.exceptionDev);
  swap(a.alarmType, b.alarmType);
  swap(a.alarmState, b.alarmState);
  swap(a.alarmHi, b.alarmHi);
  swap(a.alarmLo, b.alarmLo);
  swap(a.alarmHiHi, b.alarmHiHi);
  swap(a.alarmLolo, b.alarmLolo);
  swap(a.hiPriority, b.hiPriority);
  swap(a.loPriority, b.loPriority);
  swap(a.hihiPriority, b.hihiPriority);
  swap(a.loloPriority, b.loloPriority);
  swap(a.isArchived, b.isArchived);
  swap(a.isCompressed, b.isCompressed);
  swap(a.interMethod, b.interMethod);
  swap(a.hisIndex, b.hisIndex);
  swap(a.compressMin, b.compressMin);
  swap(a.compressMax, b.compressMax);
  swap(a.lastValue, b.lastValue);
  swap(a.creationDate, b.creationDate);
  swap(a.__isset, b.__isset);
}

TAGNODE::TAGNODE(const TAGNODE& other4) {
  name = other4.name;
  desc = other4.desc;
  engUnit = other4.engUnit;
  id = other4.id;
  type = other4.type;
  IOState = other4.IOState;
  typicalVal = other4.typicalVal;
  value = other4.value;
  enumDesc = other4.enumDesc;
  timestamp = other4.timestamp;
  state = other4.state;
  deviceName = other4.deviceName;
  groupName = other4.groupName;
  sourceTag = other4.sourceTag;
  upperLimit = other4.upperLimit;
  lowerLimit = other4.lowerLimit;
  pushreference = other4.pushreference;
  ruleReference = other4.ruleReference;
  exceptionMin = other4.exceptionMin;
  exceptionMax = other4.exceptionMax;
  exceptionDev = other4.exceptionDev;
  alarmType = other4.alarmType;
  alarmState = other4.alarmState;
  alarmHi = other4.alarmHi;
  alarmLo = other4.alarmLo;
  alarmHiHi = other4.alarmHiHi;
  alarmLolo = other4.alarmLolo;
  hiPriority = other4.hiPriority;
  loPriority = other4.loPriority;
  hihiPriority = other4.hihiPriority;
  loloPriority = other4.loloPriority;
  isArchived = other4.isArchived;
  isCompressed = other4.isCompressed;
  interMethod = other4.interMethod;
  hisIndex = other4.hisIndex;
  compressMin = other4.compressMin;
  compressMax = other4.compressMax;
  lastValue = other4.lastValue;
  creationDate = other4.creationDate;
  __isset = other4.__isset;
}
TAGNODE& TAGNODE::operator=(const TAGNODE& other5) {
  name = other5.name;
  desc = other5.desc;
  engUnit = other5.engUnit;
  id = other5.id;
  type = other5.type;
  IOState = other5.IOState;
  typicalVal = other5.typicalVal;
  value = other5.value;
  enumDesc = other5.enumDesc;
  timestamp = other5.timestamp;
  state = other5.state;
  deviceName = other5.deviceName;
  groupName = other5.groupName;
  sourceTag = other5.sourceTag;
  upperLimit = other5.upperLimit;
  lowerLimit = other5.lowerLimit;
  pushreference = other5.pushreference;
  ruleReference = other5.ruleReference;
  exceptionMin = other5.exceptionMin;
  exceptionMax = other5.exceptionMax;
  exceptionDev = other5.exceptionDev;
  alarmType = other5.alarmType;
  alarmState = other5.alarmState;
  alarmHi = other5.alarmHi;
  alarmLo = other5.alarmLo;
  alarmHiHi = other5.alarmHiHi;
  alarmLolo = other5.alarmLolo;
  hiPriority = other5.hiPriority;
  loPriority = other5.loPriority;
  hihiPriority = other5.hihiPriority;
  loloPriority = other5.loloPriority;
  isArchived = other5.isArchived;
  isCompressed = other5.isCompressed;
  interMethod = other5.interMethod;
  hisIndex = other5.hisIndex;
  compressMin = other5.compressMin;
  compressMax = other5.compressMax;
  lastValue = other5.lastValue;
  creationDate = other5.creationDate;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TAGNODE& obj) {
  using apache::thrift::to_string;
  out << "TAGNODE(";
  out << "name=" << to_string(obj.name);
  out << ", " << "desc=" << to_string(obj.desc);
  out << ", " << "engUnit=" << to_string(obj.engUnit);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "IOState=" << to_string(obj.IOState);
  out << ", " << "typicalVal=" << to_string(obj.typicalVal);
  out << ", " << "value=" << to_string(obj.value);
  out << ", " << "enumDesc=" << to_string(obj.enumDesc);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "deviceName=" << to_string(obj.deviceName);
  out << ", " << "groupName=" << to_string(obj.groupName);
  out << ", " << "sourceTag=" << to_string(obj.sourceTag);
  out << ", " << "upperLimit=" << to_string(obj.upperLimit);
  out << ", " << "lowerLimit=" << to_string(obj.lowerLimit);
  out << ", " << "pushreference=" << to_string(obj.pushreference);
  out << ", " << "ruleReference=" << to_string(obj.ruleReference);
  out << ", " << "exceptionMin=" << to_string(obj.exceptionMin);
  out << ", " << "exceptionMax=" << to_string(obj.exceptionMax);
  out << ", " << "exceptionDev=" << to_string(obj.exceptionDev);
  out << ", " << "alarmType=" << to_string(obj.alarmType);
  out << ", " << "alarmState=" << to_string(obj.alarmState);
  out << ", " << "alarmHi=" << to_string(obj.alarmHi);
  out << ", " << "alarmLo=" << to_string(obj.alarmLo);
  out << ", " << "alarmHiHi=" << to_string(obj.alarmHiHi);
  out << ", " << "alarmLolo=" << to_string(obj.alarmLolo);
  out << ", " << "hiPriority=" << to_string(obj.hiPriority);
  out << ", " << "loPriority=" << to_string(obj.loPriority);
  out << ", " << "hihiPriority=" << to_string(obj.hihiPriority);
  out << ", " << "loloPriority=" << to_string(obj.loloPriority);
  out << ", " << "isArchived=" << to_string(obj.isArchived);
  out << ", " << "isCompressed=" << to_string(obj.isCompressed);
  out << ", " << "interMethod=" << to_string(obj.interMethod);
  out << ", " << "hisIndex=" << to_string(obj.hisIndex);
  out << ", " << "compressMin=" << to_string(obj.compressMin);
  out << ", " << "compressMax=" << to_string(obj.compressMax);
  out << ", " << "lastValue=" << to_string(obj.lastValue);
  out << ", " << "creationDate=" << to_string(obj.creationDate);
  out << ")";
  return out;
}


DeviceIsExistException::~DeviceIsExistException() throw() {
}


void DeviceIsExistException::__set_name(const std::string& val) {
  this->name = val;
}

const char* DeviceIsExistException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DeviceIsExistException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DeviceIsExistException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceIsExistException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeviceIsExistException");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeviceIsExistException &a, DeviceIsExistException &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

DeviceIsExistException::DeviceIsExistException(const DeviceIsExistException& other6) : TException() {
  name = other6.name;
  __isset = other6.__isset;
}
DeviceIsExistException& DeviceIsExistException::operator=(const DeviceIsExistException& other7) {
  name = other7.name;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeviceIsExistException& obj) {
  using apache::thrift::to_string;
  out << "DeviceIsExistException(";
  out << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


DeviceNotFoundException::~DeviceNotFoundException() throw() {
}


void DeviceNotFoundException::__set_name(const std::string& val) {
  this->name = val;
}

const char* DeviceNotFoundException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DeviceNotFoundException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DeviceNotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceNotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeviceNotFoundException");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeviceNotFoundException &a, DeviceNotFoundException &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

DeviceNotFoundException::DeviceNotFoundException(const DeviceNotFoundException& other8) : TException() {
  name = other8.name;
  __isset = other8.__isset;
}
DeviceNotFoundException& DeviceNotFoundException::operator=(const DeviceNotFoundException& other9) {
  name = other9.name;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeviceNotFoundException& obj) {
  using apache::thrift::to_string;
  out << "DeviceNotFoundException(";
  out << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


DeviceMaxException::~DeviceMaxException() throw() {
}


const char* DeviceMaxException::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t DeviceMaxException::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t DeviceMaxException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceMaxException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeviceMaxException");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeviceMaxException &a, DeviceMaxException &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeviceMaxException::DeviceMaxException(const DeviceMaxException& other10) : TException() {
  (void) other10;
}
DeviceMaxException& DeviceMaxException::operator=(const DeviceMaxException& other11) {
  (void) other11;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeviceMaxException& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "DeviceMaxException(";
  out << ")";
  return out;
}


DeviceInsertException::~DeviceInsertException() throw() {
}


void DeviceInsertException::__set_type(const EXCEPTIONTYPE::type val) {
  this->type = val;
}

const char* DeviceInsertException::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t DeviceInsertException::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t DeviceInsertException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->type = (EXCEPTIONTYPE::type)ecast12;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceInsertException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeviceInsertException");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeviceInsertException &a, DeviceInsertException &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

DeviceInsertException::DeviceInsertException(const DeviceInsertException& other13) : TException() {
  type = other13.type;
  __isset = other13.__isset;
}
DeviceInsertException& DeviceInsertException::operator=(const DeviceInsertException& other14) {
  type = other14.type;
  __isset = other14.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeviceInsertException& obj) {
  using apache::thrift::to_string;
  out << "DeviceInsertException(";
  out << "type=" << to_string(obj.type);
  out << ")";
  return out;
}


TargetInsertException::~TargetInsertException() throw() {
}


const char* TargetInsertException::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t TargetInsertException::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t TargetInsertException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TargetInsertException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TargetInsertException");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TargetInsertException &a, TargetInsertException &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

TargetInsertException::TargetInsertException(const TargetInsertException& other15) : TException() {
  (void) other15;
}
TargetInsertException& TargetInsertException::operator=(const TargetInsertException& other16) {
  (void) other16;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TargetInsertException& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "TargetInsertException(";
  out << ")";
  return out;
}


HandleErrorException::~HandleErrorException() throw() {
}


void HandleErrorException::__set_hwnd(const int32_t val) {
  this->hwnd = val;
}

const char* HandleErrorException::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t HandleErrorException::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t HandleErrorException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hwnd);
          this->__isset.hwnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HandleErrorException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("HandleErrorException");

  xfer += oprot->writeFieldBegin("hwnd", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->hwnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(HandleErrorException &a, HandleErrorException &b) {
  using ::std::swap;
  swap(a.hwnd, b.hwnd);
  swap(a.__isset, b.__isset);
}

HandleErrorException::HandleErrorException(const HandleErrorException& other17) : TException() {
  hwnd = other17.hwnd;
  __isset = other17.__isset;
}
HandleErrorException& HandleErrorException::operator=(const HandleErrorException& other18) {
  hwnd = other18.hwnd;
  __isset = other18.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const HandleErrorException& obj) {
  using apache::thrift::to_string;
  out << "HandleErrorException(";
  out << "hwnd=" << to_string(obj.hwnd);
  out << ")";
  return out;
}


WriteValueException::~WriteValueException() throw() {
}


void WriteValueException::__set_name(const std::string& val) {
  this->name = val;
}

void WriteValueException::__set_val(const TAGVAL& val) {
  this->val = val;
}

const char* WriteValueException::ascii_fingerprint = "6EDBFDFB07238031CB1BF9153F361D95";
const uint8_t WriteValueException::binary_fingerprint[16] = {0x6E,0xDB,0xFD,0xFB,0x07,0x23,0x80,0x31,0xCB,0x1B,0xF9,0x15,0x3F,0x36,0x1D,0x95};

uint32_t WriteValueException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->val.read(iprot);
          this->__isset.val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WriteValueException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("WriteValueException");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->val.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(WriteValueException &a, WriteValueException &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.val, b.val);
  swap(a.__isset, b.__isset);
}

WriteValueException::WriteValueException(const WriteValueException& other19) : TException() {
  name = other19.name;
  val = other19.val;
  __isset = other19.__isset;
}
WriteValueException& WriteValueException::operator=(const WriteValueException& other20) {
  name = other20.name;
  val = other20.val;
  __isset = other20.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const WriteValueException& obj) {
  using apache::thrift::to_string;
  out << "WriteValueException(";
  out << "name=" << to_string(obj.name);
  out << ", " << "val=" << to_string(obj.val);
  out << ")";
  return out;
}


ParamErrorException::~ParamErrorException() throw() {
}


void ParamErrorException::__set_name(const std::string& val) {
  this->name = val;
}

const char* ParamErrorException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ParamErrorException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ParamErrorException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamErrorException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ParamErrorException");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ParamErrorException &a, ParamErrorException &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

ParamErrorException::ParamErrorException(const ParamErrorException& other21) : TException() {
  name = other21.name;
  __isset = other21.__isset;
}
ParamErrorException& ParamErrorException::operator=(const ParamErrorException& other22) {
  name = other22.name;
  __isset = other22.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ParamErrorException& obj) {
  using apache::thrift::to_string;
  out << "ParamErrorException(";
  out << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


