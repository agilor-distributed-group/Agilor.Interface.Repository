<?xml version="1.0"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd">

    <diskStore path="../cache"></diskStore>

    <!--
      集群多台服务器中的缓存，这里是要同步一些服务器的缓存
      server1 hostName:192.168.8.9 port:400001 cacheName:mobileCache
      server2 hostName:192.168.8.32 port:400002 cacheName:mobileCache
      server3 hostName:192.168.8.231 port:400003 cacheName:mobileCache
      注意每台要同步缓存的服务器的RMI通信socket端口都不一样，在配置的时候注意设置
  -->
    <cacheManagerPeerProviderFactory
            class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
            properties="peerDiscovery=manual,
            rmiUrls=//localhost:40002/User
                    |//localhost:40002/DeviceType
                    |//localhost:40002/Device
                    |//localhost:40002/Sensor
                    |//localhost:40002/SensorOfType"

            />

    <cacheManagerPeerListenerFactory
            class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
            properties="hostName=localhost, port=40001,socketTimeoutMillis=2000" />

    <defaultCache maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="100000" timeToLiveSeconds="0" overflowToDisk="false">

        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=true,
            replicatePuts=true,
            replicateUpdates=true,
            replicateUpdatesViaCopy=false,
            replicateRemovals=true "/>
        <!-- 用于在初始化缓存，以及自动设置 -->
        <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </defaultCache>




    <!--
 配置自定义缓存
 maxElementsInMemory：缓存中允许创建的最大对象数
 eternal：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。
 timeToIdleSeconds：缓存数据空闲的最大时间，也就是说如果有一个缓存有多久没有被访问就会被销毁，
             如果该值是 0 就意味着元素可以停顿无穷长的时间。
 timeToLiveSeconds：缓存数据存活的时间，缓存对象最大的的存活时间，超过这个时间就会被销毁，
             这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。
 overflowToDisk：内存不足时，是否启用磁盘缓存。
 memoryStoreEvictionPolicy：缓存满了之后的淘汰算法。

 每一个小时更新一次缓存（1小时过期）
-->
    <!--<cache name="mobileCache"-->
    <!--maxElementsInMemory="10000"-->
    <!--eternal="false"-->
    <!--overflowToDisk="true"-->
    <!--timeToIdleSeconds="1800"-->
    <!--timeToLiveSeconds="3600"-->
    <!--memoryStoreEvictionPolicy="LFU">-->
    <!--
        RMI缓存分布同步查找 class使用net.sf.ehcache.distribution.RMICacheReplicatorFactory
        这个工厂支持以下属性：
        replicatePuts=true | false – 当一个新元素增加到缓存中的时候是否要复制到其他的peers。默认是true。
        replicateUpdates=true | false – 当一个已经在缓存中存在的元素被覆盖时是否要进行复制。默认是true。
        replicateRemovals= true | false – 当元素移除的时候是否进行复制。默认是true。
        replicateAsynchronously=true | false – 复制方式是异步的指定为true时，还是同步的，指定为false时。默认是true。
        replicatePutsViaCopy=true | false – 当一个新增元素被拷贝到其他的cache中时是否进行复制指定为true时为复制，默认是true。
        replicateUpdatesViaCopy=true | false – 当一个元素被拷贝到其他的cache中时是否进行复制指定为true时为复制，默认是true。
            asynchronousReplicationIntervalMillis=1000
        -->
    <!-- 监听RMI同步缓存对象配置 注册相应的的缓存监听类，用于处理缓存事件，如put,remove,update,和expire -->
    <!--<cacheEventListenerFactory-->
    <!--class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"-->
    <!--properties="replicateAsynchronously=true,-->
    <!--replicatePuts=true,-->
    <!--replicateUpdates=true,-->
    <!--replicateUpdatesViaCopy=false,-->
    <!--replicateRemovals=true "/>-->


    <!--</cache>-->


    <cache name="User"
           maxElementsInMemory="1000"
           eternal="false"
           timeToIdleSeconds="300000"
           timeToLiveSeconds="0"
           overflowToDisk="false"
            >
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=true,
            replicatePuts=true,
            replicateUpdates=true,
            replicateUpdatesViaCopy=false,
            replicateRemovals=true "/>
        <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </cache>
    <cache name="DeviceType"
           maxElementsInMemory="50"
           overflowToDisk="true"
            >
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=true,
            replicatePuts=true,
            replicateUpdates=true,
            replicateUpdatesViaCopy=false,
            replicateRemovals=true "/>
        <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </cache>
    <cache name="Device"
           maxElementsInMemory="1000"
            >
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=true,
            replicatePuts=true,
            replicateUpdates=true,
            replicateUpdatesViaCopy=false,
            replicateRemovals=true "/>
        <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </cache>
    <cache name="Sensor"
           maxElementsInMemory="100000"
           timeToIdleSeconds="20000"
           timeToLiveSeconds="0"
           overflowToDisk="false"
           memoryStoreEvictionPolicy="LFU"
            >
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=true,
            replicatePuts=true,
            replicateUpdates=true,
            replicateUpdatesViaCopy=false,
            replicateRemovals=true "/>
        <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </cache>
    <cache name="SensorOfType"
           maxElementsInMemory="200"
            >
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=true,
            replicatePuts=true,
            replicateUpdates=true,
            replicateUpdatesViaCopy=false,
            replicateRemovals=true "/>
        <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </cache>





</ehcache>

